;; Object contrib/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "contrib/"
  :tables
  (list
    (semanticdb-table "eassist.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [4975 4988])
            ("semantic" include nil nil [4991 5010])
            ("semantic/find" include nil nil [5011 5035])
            ("eassist-string-without-last" function (:arguments ("string" "n")) nil [5116 5277])
            ("eassist-string-ends-with" function (:arguments ("string" "end")) nil [5279 5426])
            ("eassist-header-switches" variable (:default-value (quote (("h" "cpp" "cc" "c") ("hpp" "cpp" "cc") ("cpp" "h" "hpp") ("c" "h") ("C" "H") ("H" "C" "CPP" "CC") ("cc" "h" "hpp")))) nil [5601 6016])
            ("eassist-switch-h-cpp" function (:user-visible-flag t) nil [6033 7325])
            ("eassist-current-tag" variable nil nil [7489 7564])
            ("eassist-buffer" variable nil nil [7565 7638])
            ("eassist-names-column" variable nil nil [7639 7720])
            ("eassist-methods" variable nil nil [7721 7818])
            ("eassist-actual-methods" variable nil nil [7819 7930])
            ("eassist-search-string" variable nil nil [7931 8012])
            ("eassist-overlays" variable nil nil [8013 8071])
            ("eassist-function-tags" function nil nil [8073 9271])
            ("eassist-car-if-list" function (:arguments ("thing")) nil [9273 9421])
            ("eassist-function-string-triplet" function (:arguments ("f")) nil [9423 9664])
            ("eassist-format-triplets" function (:arguments ("f")) nil [9666 10766])
            ("eassist-list-methods" function (:user-visible-flag t) nil [10783 11181])
            ("eassist-jump-to-method" function (:user-visible-flag t) nil [11183 11793])
            ("eassist-matches-all" function (:arguments ("string" "substrings")) nil [11795 12012])
            ("eassist-search-string-updated" function nil nil [12014 12989])
            ("eassist-key-pressed" function (:arguments ("key")) nil [12991 13173])
            ("eassist-backspace-pressed" function (:user-visible-flag t) nil [13175 13384])
            ("eassist-make-key-function" function (:arguments ("key")) nil [13386 13513])
            ("eassist-key-itself" function (:arguments ("map" "key")) nil [13515 13664])
            ("eassist-escape" function (:user-visible-flag t) nil [13666 13805])
            ("eassist-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (do ((k (string-to-char "a") (+ 1 k))) ((> k (string-to-char "z"))) (define-key map (read-kbd-macro (char-to-string k)) (eassist-make-key-function k))) (do ((k (string-to-char "A") (+ 1 k))) ((> k (string-to-char "Z"))) (define-key map (read-kbd-macro (char-to-string k)) (eassist-make-key-function k))) (do ((k (string-to-char "0") (+ 1 k))) ((> k (string-to-char "9"))) (define-key map (read-kbd-macro (char-to-string k)) (eassist-make-key-function k))) (dolist (k (string-to-list "=><&!")) (define-key map (read-kbd-macro (char-to-string k)) (eassist-make-key-function k))) (eassist-key-itself map (string-to-char " ")) (eassist-key-itself map (string-to-char "_")) (define-key map (kbd "<RET>") (quote eassist-jump-to-method)) (define-key map (kbd "<backspace>") (quote eassist-backspace-pressed)) (define-key map (kbd "<ESC>") (quote eassist-escape)) map)) nil [13807 14891])
            ("eassist-method" type
               (:members ("full-line" "name" "position" "tag")
                :type "struct")
                nil [14893 14963])
            ("eassist-mode-init" function nil nil [14965 16596])
            ("define-derived-mode" code nil nil [16598 16805])
            ("eassist" package nil nil [16890 16908]))          
      :file "eassist.el"
      :pointmax 16935
      :fsize 16934
      :lastmodtime '(21639 49900 0 0)
      :unmatched-syntax '((close-paren 4988 . 4989) (symbol 4955 . 4972) (open-paren 4954 . 4955))))
  :file "!root!.emacs.d!cedet!contrib!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
