;; Object textmodes/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "textmodes/"
  :tables
  (list
    (semanticdb-table "two-column.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("two-column" customgroup (:user-visible-flag t) nil [6428 6533])
            ("2C-mode-line-format" variable (:default-value (quote ("-%*- %15b --" (-3 . "%p") "--%[(" mode-name minor-mode-alist "%n" mode-line-process ")%]%-"))) nil [6535 6778])
            ("2C-other-buffer-hook" variable (:default-value (quote text-mode)) nil [6780 6929])
            ("2C-separator" variable nil nil [6931 7094])
            ("put" code nil nil [7095 7133])
            ("2C-window-width" variable (:default-value 40) nil [7135 7329])
            ("make-variable-buffer-local" code nil nil [7330 7375])
            ("put" code nil nil [7376 7417])
            ("2C-beyond-fill-column" variable (:default-value 4) nil [7419 7657])
            ("2C-autoscroll" variable (:default-value t) nil [7659 7797])
            ("2C-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "2" (quote 2C-two-columns)) (define-key map [f2] (quote 2C-two-columns)) (define-key map "b" (quote 2C-associate-buffer)) (define-key map "s" (quote 2C-split)) map)) nil [7801 8086])
            ("fset" code nil nil [8152 8182])
            ("2C-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "1" (quote 2C-merge)) (define-key map "d" (quote 2C-dissociate)) (define-key map "o" (quote 2C-associated-buffer)) (define-key map "" (quote 2C-newline)) (define-key map "|" (quote 2C-toggle-autoscroll)) (define-key map "{" (quote 2C-shrink-window-horizontally)) (define-key map "}" (quote 2C-enlarge-window-horizontally)) map)) nil [8486 8930])
            ("setq" code nil nil [8932 9450])
            ("2C-mode" variable nil nil [9636 9705])
            ("make-variable-buffer-local" code nil nil [9706 9743])
            ("put" code nil nil [9744 9777])
            ("setq" code nil nil [9779 9843])
            ("2C-autoscroll-start" variable nil nil [9845 9877])
            ("make-variable-buffer-local" code nil nil [9878 9927])
            ("2C-other" function (:arguments ("req")) nil [10073 10522])
            ("2C-mode" function (:arguments ("other")) nil [10648 12461])
            ("2C-two-columns" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [12479 13622])
            ("2C-associate-buffer" function (:user-visible-flag t) nil [13640 14414])
            ("scroll-bar-columns" function (:prototype-flag t) nil [14416 14459])
            ("fringe" include nil nil [14481 14498])
            ("2C-split" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [14544 16863])
            ("2C-dissociate" function (:user-visible-flag t) nil [16866 17708])
            ("2C-merge" function (:user-visible-flag t) nil [17798 19233])
            ("2C-associated-buffer" function (:user-visible-flag t) nil [19267 19721])
            ("2C-newline" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19723 19895])
            ("2C-toggle-autoscroll" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19897 20875])
            ("2C-autoscroll" function nil nil [20878 22018])
            ("2C-enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22021 22311])
            ("2C-shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [22313 22465])
            ("two-column" package nil nil [22468 22489]))          
      :file "two-column.el.gz"
      :pointmax 22519
      :fsize 7820
      :lastmodtime '(21291 53104 0 0)
      :unmatched-syntax '((close-paren 14498 . 14499) (symbol 14461 . 14478) (open-paren 14460 . 14461))))
  :file "!usr!local!share!emacs!24.4!lisp!textmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
