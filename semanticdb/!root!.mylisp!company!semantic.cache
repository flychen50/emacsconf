;; Object company/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "company/"
  :tables
  (list
    (semanticdb-table "company.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2615 2632])
            ("newcomment" include nil nil [2633 2654])
            ("add-to-list" code nil nil [2684 2756])
            ("add-to-list" code nil nil [2757 2827])
            ("add-to-list" code nil nil [2828 2906])
            ("add-to-list" code nil nil [2907 2958])
            ("add-to-list" code nil nil [2959 3018])
            ("add-to-list" code nil nil [3019 3083])
            ("add-to-list" code nil nil [3084 3141])
            ("unless" code nil nil [3226 3636])
            ("company" customgroup (:user-visible-flag t) nil [3639 3767])
            ("company-tooltip" variable
               (:default-value (quote ((default :foreground "black") (((class color) (min-colors 88) (background light)) (:background "cornsilk")) (((class color) (min-colors 88) (background dark)) (:background "yellow"))))
                :type "face")
                nil [3769 4031])
            ("company-tooltip-selection" variable
               (:default-value (quote ((default :inherit company-tooltip) (((class color) (min-colors 88) (background light)) (:background "light blue")) (((class color) (min-colors 88) (background dark)) (:background "orange1")) (t (:background "green"))))
                :type "face")
                nil [4033 4360])
            ("company-tooltip-search" variable
               (:default-value (quote ((default :inherit company-tooltip-selection)))
                :type "face")
                nil [4362 4496])
            ("company-tooltip-mouse" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [4498 4615])
            ("company-tooltip-common" variable
               (:default-value (quote ((default :inherit company-tooltip) (((background light)) :foreground "darkred") (((background dark)) :foreground "red")))
                :type "face")
                nil [4617 4848])
            ("company-tooltip-common-selection" variable
               (:default-value (quote ((default :inherit company-tooltip-selection) (((background light)) :foreground "darkred") (((background dark)) :foreground "red")))
                :type "face")
                nil [4850 5110])
            ("company-tooltip-annotation" variable
               (:default-value (quote ((default :inherit company-tooltip) (((background light)) :foreground "firebrick4") (((background dark)) :foreground "red4")))
                :type "face")
                nil [5112 5344])
            ("company-scrollbar-fg" variable
               (:default-value (quote ((((background light)) :background "darkred") (((background dark)) :background "red")))
                :type "face")
                nil [5346 5527])
            ("company-scrollbar-bg" variable
               (:default-value (quote ((default :inherit company-tooltip) (((background light)) :background "wheat") (((background dark)) :background "gold")))
                :type "face")
                nil [5529 5753])
            ("company-preview" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-selection) (((background dark)) :background "blue4" :foreground "wheat")))
                :type "face")
                nil [5755 5966])
            ("company-preview-common" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-selection) (((background dark)) :inherit company-preview :foreground "red")))
                :type "face")
                nil [5968 6208])
            ("company-preview-search" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-common-selection) (((background dark)) :inherit company-preview :background "blue1")))
                :type "face")
                nil [6210 6461])
            ("company-echo" variable (:type "face") nil [6463 6537])
            ("company-echo-common" variable
               (:default-value (quote ((((background dark)) (:foreground "firebrick1")) (((background light)) (:background "firebrick4"))))
                :type "face")
                nil [6539 6743])
            ("company-frontends-set" function (:arguments ("variable" "value")) nil [6745 7584])
            ("company-frontends" variable (:default-value (quote (company-pseudo-tooltip-unless-just-one-frontend company-preview-if-just-one-frontend company-echo-metadata-frontend))) nil [7586 9313])
            ("company-tooltip-limit" variable (:default-value 10) nil [9315 9421])
            ("company-tooltip-minimum" variable (:default-value 6) nil [9423 9591])
            ("company-tooltip-minimum-width" variable nil nil [9593 9797])
            ("company-tooltip-margin" variable (:default-value 1) nil [9799 9907])
            ("company-tooltip-offset-display" variable (:default-value (quote scrollbar)) nil [9909 10263])
            ("company-tooltip-align-annotations" variable nil nil [10265 10436])
            ("company-tooltip-flip-when-above" variable nil nil [10438 10608])
            ("company-safe-backends" variable (:default-value (quote ((company-abbrev . "Abbrev") (company-bbdb . "BBDB") (company-capf . "completion-at-point-functions") (company-clang . "Clang") (company-cmake . "CMake") (company-css . "CSS") (company-dabbrev . "dabbrev for plain text") (company-dabbrev-code . "dabbrev for code") (company-eclim . "Eclim (an Eclipse interface)") (company-elisp . "Emacs Lisp") (company-etags . "etags") (company-files . "Files") (company-gtags . "GNU Global") (company-ispell . "Ispell") (company-keywords . "Programming language keywords") (company-nxml . "nxml") (company-oddmuse . "Oddmuse") (company-pysmell . "PySmell") (company-ropemacs . "ropemacs") (company-semantic . "Semantic") (company-tempo . "Tempo templates") (company-xcode . "Xcode")))) nil [10610 11447])
            ("put" code nil nil [11448 11500])
            ("company-safe-backends-p" function (:arguments ("backends")) nil [11502 11808])
            ("company-backends" variable (:default-value (\` ((\,@ (unless (version< "24.3.50" emacs-version) (list (quote company-elisp)))) company-bbdb company-nxml company-css company-eclim company-semantic company-clang company-xcode company-ropemacs company-cmake company-capf (company-dabbrev-code company-gtags company-etags company-keywords) company-oddmuse company-files company-dabbrev))) nil [11810 17928])
            ("put" code nil nil [17930 17999])
            ("company-transformers" variable nil nil [18001 18517])
            ("company-completion-started-hook" variable nil nil [18519 18718])
            ("company-completion-cancelled-hook" variable nil nil [18720 18922])
            ("company-completion-finished-hook" variable nil nil [18924 19231])
            ("company-minimum-prefix-length" variable (:default-value 3) nil [19233 19367])
            ("company-abort-manual-when-too-short" variable nil nil [19369 19651])
            ("company-require-match" variable (:default-value (quote company-explicit-action-p)) nil [19653 20214])
            ("company-auto-complete" variable nil nil [20216 20696])
            ("company-auto-complete-chars" variable (:default-value (quote (32 41 46))) nil [20698 22187])
            ("company-idle-delay" variable (:default-value 0.5) nil [22189 22558])
            ("company-begin-commands" variable (:default-value (quote (self-insert-command org-self-insert-command orgtbl-self-insert-command c-scope-operator c-electric-colon c-electric-lt-gt c-electric-slash))) nil [22560 23455])
            ("company-continue-commands" variable (:default-value (quote (not save-buffer save-some-buffers save-buffers-kill-terminal save-buffers-kill-emacs))) nil [23457 24309])
            ("company-show-numbers" variable nil nil [24311 24497])
            ("company-selection-wrap-around" variable nil nil [24499 24694])
            ("company-async-wait" variable (:default-value 0.03) nil [24696 24836])
            ("company-async-timeout" variable (:default-value 2) nil [24838 24940])
            ("company-mode-map" variable (:default-value (make-sparse-keymap)) nil [25024 25105])
            ("company-active-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap "" (quote company-abort)) (define-key keymap "" (quote company-abort)) (define-key keymap (kbd "M-n") (quote company-select-next)) (define-key keymap (kbd "M-p") (quote company-select-previous)) (define-key keymap (kbd "<down>") (quote company-select-next-or-abort)) (define-key keymap (kbd "<up>") (quote company-select-previous-or-abort)) (define-key keymap [down-mouse-1] (quote ignore)) (define-key keymap [down-mouse-3] (quote ignore)) (define-key keymap [mouse-1] (quote company-complete-mouse)) (define-key keymap [mouse-3] (quote company-select-mouse)) (define-key keymap [up-mouse-1] (quote ignore)) (define-key keymap [up-mouse-3] (quote ignore)) (define-key keymap [return] (quote company-complete-selection)) (define-key keymap (kbd "RET") (quote company-complete-selection)) (define-key keymap [tab] (quote company-complete-common)) (define-key keymap (kbd "TAB") (quote company-complete-common)) (define-key keymap (kbd "<f1>") (quote company-show-doc-buffer)) (define-key keymap (kbd "C-h") (quote company-show-doc-buffer)) (define-key keymap "" (quote company-show-location)) (define-key keymap "" (quote company-search-candidates)) (define-key keymap "\223" (quote company-filter-candidates)) (dotimes (i 10) (define-key keymap (read-kbd-macro (format "M-%d" i)) (quote company-complete-number))) keymap)) nil [25107 26536])
            ("company--disabled-backends" variable nil nil [26538 26577])
            ("company-init-backend" function (:arguments ("backend")) nil [26579 27354])
            ("company-default-lighter" variable (:default-value " company") nil [27356 27399])
            ("defvar-local" code nil nil [27401 27455])
            ("define-minor-mode" code nil nil [27472 29045])
            ("company-global-modes" variable (:default-value t) nil [29047 29906])
            ("define-globalized-minor-mode" code nil nil [29923 30002])
            ("company-mode-on" function nil nil [30004 30392])
            ("company-assert-enabled" function nil nil [30394 30516])
            ("defvar-local" code nil nil [30600 30636])
            ("company-emulation-alist" variable (:default-value (quote ((t)))) nil [30638 30683])
            ("company-enable-overriding-keymap" function (:arguments ("keymap")) nil [30685 30797])
            ("company-ensure-emulation-alist" function nil nil [30799 31066])
            ("company-install-map" function nil nil [31068 31244])
            ("company-uninstall-map" function nil nil [31246 31322])
            ("company-ignore" function nil nil [31548 31624])
            ("global-set-key" code nil nil [31626 31681])
            ("company-input-noop" function nil nil [31683 31764])
            ("company--posn-col-row" function (:arguments ("posn")) nil [31766 32213])
            ("company--col-row" function (:arguments ("pos")) nil [32215 32301])
            ("company--row" function (:arguments ("pos")) nil [32303 32370])
            ("defvar-local" code nil nil [32454 32488])
            ("company-grab" function (:arguments ("regexp" "expression" "limit")) nil [32490 32642])
            ("company-grab-line" function (:arguments ("regexp" "expression")) nil [32644 32749])
            ("company-grab-symbol" function nil nil [32751 33026])
            ("company-grab-word" function nil nil [33028 33291])
            ("company-grab-symbol-cons" function (:arguments ("idle-begin-after-re" "max-len")) nil [33293 33740])
            ("company-in-string-or-comment" function nil nil [33742 33913])
            ("company-call-backend" function (:arguments ("args")) nil [33915 34028])
            ("company--force-sync" function (:arguments ("fun" "args" "backend")) nil [34030 34579])
            ("company-call-backend-raw" function (:arguments ("args")) nil [34581 34945])
            ("company--multi-backend-adapter" function (:arguments ("backends" "command" "args")) nil [34947 36054])
            ("company--multi-backend-adapter-candidates" function (:arguments ("backends" "prefix")) nil [36056 37166])
            ("company--merge-async" function (:arguments ("pairs" "merger")) nil [37168 38458])
            ("company--prefix-str" function (:arguments ("prefix")) nil [38460 38528])
            ("defvar-local" code nil nil [38612 38645])
            ("defvar-local" code nil nil [38647 38684])
            ("defvar-local" code nil nil [38686 38730])
            ("defvar-local" code nil nil [38732 38775])
            ("defvar-local" code nil nil [38777 38824])
            ("defvar-local" code nil nil [38826 38859])
            ("defvar-local" code nil nil [38861 38895])
            ("defvar-local" code nil nil [38897 38941])
            ("defvar-local" code nil nil [38943 39030])
            ("defvar-local" code nil nil [39032 39073])
            ("company--auto-completion" variable nil nil [39075 39219])
            ("defvar-local" code nil nil [39221 39258])
            ("defvar-local" code nil nil [39260 39292])
            ("company-timer" variable nil nil [39294 39320])
            ("company-strip-prefix" function (:arguments ("str")) nil [39322 39401])
            ("company--insert-candidate" function (:arguments ("candidate")) nil [39403 39758])
            ("company-with-candidate-inserted" function (:arguments ("candidate" "body")) nil [39760 40308])
            ("company-explicit-action-p" function nil nil [40310 40477])
            ("company-reformat" function (:arguments ("candidate")) nil [40479 40866])
            ("company--should-complete" function nil nil [40868 41275])
            ("company--should-continue" function nil nil [41277 41739])
            ("company-call-frontends" function (:arguments ("command")) nil [41741 42031])
            ("company-set-selection" function (:arguments ("selection" "force-update")) nil [42033 42532])
            ("company--update-group-lighter" function (:arguments ("candidate")) nil [42534 42988])
            ("company-apply-predicate" function (:arguments ("candidates" "predicate")) nil [42990 43161])
            ("company-update-candidates" function (:arguments ("candidates")) nil [43163 44686])
            ("company-calculate-candidates" function (:arguments ("prefix")) nil [44688 45817])
            ("company--fetch-candidates" function (:arguments ("prefix")) nil [45819 46971])
            ("company--process-candidates" function (:arguments ("candidates")) nil [46973 47383])
            ("company--strip-duplicates" function (:arguments ("candidates")) nil [47385 48083])
            ("company--transform-candidates" function (:arguments ("candidates")) nil [48085 48235])
            ("company-occurrence-weight-function" variable (:default-value (function company-occurrence-prefer-closest-above)) nil [48237 48729])
            ("company-occurrence-prefer-closest-above" function (:arguments ("pos" "match-beg" "match-end")) nil [48731 48956])
            ("company-occurrence-prefer-any-closest" function (:arguments ("pos" "_match-beg" "match-end")) nil [48958 49111])
            ("company-sort-by-occurrence" function (:arguments ("candidates")) nil [49113 50498])
            ("company--occurrence-predicate" function nil nil [50500 51005])
            ("company-sort-by-backend-importance" function (:arguments ("candidates")) nil [51007 51831])
            ("company-idle-begin" function (:arguments ("buf" "win" "tick" "pos")) nil [51833 52167])
            ("company-auto-begin" function nil nil [52169 52682])
            ("company-manual-begin" function nil nil [52684 52960])
            ("company-other-backend" function (:arguments ("backward")) nil [52962 53627])
            ("company-require-match-p" function nil nil [53629 53948])
            ("company-auto-complete-p" function (:arguments ("input")) nil [53950 54516])
            ("company--incremental-p" function nil nil [54518 54840])
            ("company--continue-failed" function (:arguments ("new-prefix")) nil [54842 55889])
            ("company--good-prefix-p" function (:arguments ("prefix")) nil [55891 56458])
            ("company--continue" function nil nil [56460 57537])
            ("company--begin-new" function nil nil [57539 59136])
            ("company--perform" function nil nil [59138 59511])
            ("company-cancel" function (:arguments ("result")) nil [59513 60625])
            ("company-abort" function nil nil [60627 60693])
            ("company-finish" function (:arguments ("result")) nil [60695 60789])
            ("company-keep" function (:arguments ("command")) nil [60791 60878])
            ("company-pre-command" function nil nil [60880 61407])
            ("company-post-command" function nil nil [61409 62664])
            ("company--begin-inhibit-commands" variable (:default-value (quote (company-abort company-complete-mouse company-complete company-complete-common company-complete-selection company-complete-number))) nil [62666 63153])
            ("company--should-begin" function nil nil [63155 63413])
            ("defvar-local" code nil nil [63497 63537])
            ("defvar-local" code nil nil [63539 63592])
            ("defvar-local" code nil nil [63594 63635])
            ("defvar-local" code nil nil [63637 63682])
            ("company-search" function (:arguments ("text" "lines")) nil [63684 63905])
            ("company-search-printing-char" function nil nil [63907 64349])
            ("company-search-repeat-forward" function (:user-visible-flag t) nil [64351 64782])
            ("company-search-repeat-backward" function (:user-visible-flag t) nil [64784 65287])
            ("company-create-match-predicate" function nil nil [65289 65681])
            ("company-filter-printing-char" function nil nil [65683 65875])
            ("company-search-kill-others" function (:user-visible-flag t) nil [65877 66136])
            ("company-search-abort" function (:user-visible-flag t) nil [66138 66349])
            ("company-search-other-char" function nil nil [66351 66494])
            ("company-search-map" variable (:default-value (let ((i 0) (keymap (make-keymap))) (if (fboundp (quote max-char)) (set-char-table-range (nth 1 keymap) (cons 256 (max-char)) (quote company-search-printing-char)) (with-no-warnings (let ((l (generic-character-list)) (table (nth 1 keymap))) (while l (set-char-table-default table (car l) (quote company-search-printing-char)) (setq l (cdr l)))))) (define-key keymap [t] (quote company-search-other-char)) (while (< i 32) (define-key keymap (make-string 1 i) (quote company-search-other-char)) (cl-incf i)) (while (< i 256) (define-key keymap (vector i) (quote company-search-printing-char)) (cl-incf i)) (let ((meta-map (make-sparse-keymap))) (define-key keymap (char-to-string meta-prefix-char) meta-map) (define-key keymap [escape] meta-map)) (define-key keymap (vector meta-prefix-char t) (quote company-search-other-char)) (define-key keymap "" (quote company-search-other-char)) (define-key keymap [escape escape escape] (quote company-search-other-char)) (define-key keymap (kbd "DEL") (quote company-search-other-char)) (define-key keymap "" (quote company-search-abort)) (define-key keymap "" (quote company-search-repeat-forward)) (define-key keymap "" (quote company-search-repeat-backward)) (define-key keymap "" (quote company-search-kill-others)) keymap)) nil [66496 68024])
            ("define-minor-mode" code nil nil [68026 68674])
            ("company-search-assert-enabled" function nil nil [68676 68843])
            ("company-search-candidates" function (:user-visible-flag t) nil [68845 69490])
            ("company-filter-map" variable (:default-value (let ((keymap (make-keymap))) (define-key keymap [remap company-search-printing-char] (quote company-filter-printing-char)) (set-keymap-parent keymap company-search-map) keymap)) nil [69492 69781])
            ("company-filter-candidates" function (:user-visible-flag t) nil [69783 70104])
            ("company-select-next" function (:user-visible-flag t) nil [70188 70360])
            ("company-select-previous" function (:user-visible-flag t) nil [70362 70542])
            ("company-select-next-or-abort" function (:user-visible-flag t) nil [70544 70809])
            ("company-select-previous-or-abort" function (:user-visible-flag t) nil [70811 71088])
            ("company-pseudo-tooltip-overlay" variable nil nil [71090 71129])
            ("company-tooltip-offset" variable nil nil [71131 71162])
            ("company--inside-tooltip-p" function (:arguments ("event-col-row" "row" "height")) nil [71164 71706])
            ("company--event-col-row" function (:arguments ("event")) nil [71708 71792])
            ("company-select-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [71794 72972])
            ("company-complete-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [72974 73149])
            ("company-complete-selection" function (:user-visible-flag t) nil [73151 73365])
            ("company-complete-common" function (:user-visible-flag t) nil [73367 73718])
            ("company-complete" function (:user-visible-flag t) nil [73720 74274])
            ("company-complete-number" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [74276 75283])
            ("company-space-strings-limit" variable
               (:constant-flag t
                :default-value 100)
                nil [75367 75409])
            ("company-space-strings" variable
               (:constant-flag t
                :default-value (let (lst) (dotimes (i company-space-strings-limit) (push (make-string (- company-space-strings-limit 1 i) 32) lst)) (apply (quote vector) lst)))
                nil [75411 75599])
            ("company-space-string" function (:arguments ("len")) nil [75601 75743])
            ("company-safe-substring" function (:arguments ("str" "from" "to")) nil [75745 76276])
            ("defvar-local" code nil nil [76360 76400])
            ("company-fetch-metadata" function nil nil [76402 76687])
            ("company-doc-buffer" function (:arguments ("string")) nil [76689 76909])
            ("company--electric-commands" variable (:default-value (quote (scroll-other-window scroll-other-window-down))) nil [76911 77060])
            ("company--electric-do" function (:arguments ("body")) nil [77062 77668])
            ("company--unread-last-input" function nil nil [77670 77822])
            ("company-show-doc-buffer" function (:user-visible-flag t) nil [77824 78275])
            ("put" code nil nil [78276 78322])
            ("company-show-location" function (:user-visible-flag t) nil [78324 79086])
            ("put" code nil nil [79087 79131])
            ("defvar-local" code nil nil [79215 79250])
            ("company-remove-callback" function (:arguments ("ignored")) nil [79252 79527])
            ("company-begin-backend" function
               (:user-visible-flag t
                :arguments ("backend" "callback"))
                nil [79529 80296])
            ("company-begin-with" function (:arguments ("candidates" "prefix-length" "require-match" "callback")) nil [80298 81206])
            ("company-version" function
               (:user-visible-flag t
                :arguments ("show-version"))
                nil [81208 81580])
            ("defvar-local" code nil nil [81664 81713])
            ("defvar-local" code nil nil [81715 81754])
            ("company-tooltip--lines-update-offset" function (:arguments ("selection" "num-lines" "limit")) nil [81756 82340])
            ("company-tooltip--simple-update-offset" function (:arguments ("selection" "_num-lines" "limit")) nil [82342 82597])
            ("company-round-tab" function (:arguments ("arg")) nil [82615 82697])
            ("company-plainify" function (:arguments ("str")) nil [82699 83226])
            ("company-fill-propertize" function (:arguments ("value" "annotation" "width" "selected" "left" "right")) nil [83228 86326])
            ("company--clean-string" function (:arguments ("str")) nil [86328 86865])
            ("company-buffer-lines" function (:arguments ("beg" "end")) nil [86880 87824])
            ("company-modify-line" function (:arguments ("old" "new" "offset")) nil [87826 87996])
            ("company--length-limit" function (:arguments ("lst" "limit")) nil [87998 88097])
            ("company--window-height" function nil nil [88099 88234])
            ("company--window-width" function nil nil [88236 88884])
            ("company--replacement-string" function (:arguments ("lines" "old" "column" "nl" "align-top")) nil [88886 90264])
            ("company--offset-line" function (:arguments ("line" "offset")) nil [90266 90372])
            ("company--create-lines" function (:arguments ("selection" "limit")) nil [90374 94008])
            ("company--scrollbar-bounds" function (:arguments ("offset" "limit" "length")) nil [94010 94273])
            ("company--scrollbar" function (:arguments ("i" "bounds")) nil [94275 94480])
            ("company--scrollpos-line" function (:arguments ("text" "width")) nil [94482 94761])
            ("company--pseudo-tooltip-height" function nil nil [94772 95233])
            ("company-pseudo-tooltip-show" function (:arguments ("row" "column" "selection")) nil [95235 96396])
            ("company-pseudo-tooltip-show-at-point" function (:arguments ("pos" "column-offset")) nil [96398 96662])
            ("company-pseudo-tooltip-edit" function (:arguments ("selection")) nil [96664 97247])
            ("company-pseudo-tooltip-hide" function nil nil [97249 97425])
            ("company-pseudo-tooltip-hide-temporarily" function nil nil [97427 97659])
            ("company-pseudo-tooltip-unhide" function nil nil [97661 98346])
            ("company-pseudo-tooltip-guard" function nil nil [98348 98789])
            ("company-pseudo-tooltip-frontend" function (:arguments ("command")) nil [98791 99973])
            ("company-pseudo-tooltip-unless-just-one-frontend" function (:arguments ("command")) nil [99975 100246])
            ("defvar-local" code nil nil [100330 100372])
            ("company-preview-show-at-point" function (:arguments ("pos")) nil [100374 101403])
            ("company-preview-hide" function nil nil [101405 101553])
            ("company-preview-frontend" function (:arguments ("command")) nil [101555 101831])
            ("company-preview-if-just-one-frontend" function (:arguments ("command")) nil [101833 102080])
            ("company--show-inline-p" function nil nil [102082 102301])
            ("defvar-local" code nil nil [102385 102425])
            ("company-echo-timer" variable nil nil [102427 102458])
            ("company-echo-delay" variable (:default-value 0.01) nil [102460 102491])
            ("company-echo-show" function (:arguments ("getter")) nil [102493 102730])
            ("company-echo-show-soon" function (:arguments ("getter")) nil [102732 102924])
            ("company-echo-show-when-idle" function (:arguments ("getter")) nil [102926 103052])
            ("company-echo-format" function nil nil [103054 104122])
            ("company-echo-strip-common-format" function nil nil [104124 104961])
            ("company-echo-hide" function nil nil [104963 105095])
            ("company-echo-frontend" function (:arguments ("command")) nil [105097 105322])
            ("company-echo-strip-common-frontend" function (:arguments ("command")) nil [105324 105575])
            ("company-echo-metadata-frontend" function (:arguments ("command")) nil [105577 105822])
            ("company" package nil nil [105824 105842]))          
      :file "company.el"
      :pointmax 105868
      :fsize 105867
      :lastmodtime '(21641 45787 0 0)
      :unmatched-syntax nil))
  :file "!root!.mylisp!company!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
