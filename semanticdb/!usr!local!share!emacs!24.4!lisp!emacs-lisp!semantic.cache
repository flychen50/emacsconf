;; Object emacs-lisp/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "emacs-lisp/"
  :tables
  (list
    (semanticdb-table "byte-run.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("macro-declaration-function" variable (:default-value (function macro-declaration-function)) nil [1239 1571])
            ("defalias" code nil nil [1573 2715])
            ("defun-declarations-alist" variable (:default-value (list (list (quote advertised-calling-convention) (function (lambda (f _args arglist when) (list (quote set-advertised-calling-convention) (list (quote quote) f) (list (quote quote) arglist) (list (quote quote) when))))) (list (quote obsolete) (function (lambda (f _args new-name when) (list (quote make-obsolete) (list (quote quote) f) (list (quote quote) new-name) (list (quote quote) when))))) (list (quote compiler-macro) (function (lambda (f args compiler-function) (\` (eval-and-compile (put (quote (\, f)) (quote compiler-macro) (\, (if (eq (car-safe compiler-function) (quote lambda)) (\` (lambda (\, (append (cadr compiler-function) args)) (\,@ (cddr compiler-function)))) (\` (function (\, compiler-function))))))))))) (list (quote doc-string) (function (lambda (f _args pos) (list (quote put) (list (quote quote) f) (quote (quote doc-string-elt)) (list (quote quote) pos))))) (list (quote indent) (function (lambda (f _args val) (list (quote put) (list (quote quote) f) (quote (quote lisp-indent-function)) (list (quote quote) val))))))) nil [2912 4524])
            ("macro-declarations-alist" variable (:default-value (cons (list (quote debug) (function (lambda (name _args spec) (list (quote progn) :autoload-end (list (quote put) (list (quote quote) name) (quote (quote edebug-form-spec)) (list (quote quote) spec)))))) defun-declarations-alist)) nil [4526 5153])
            ("put" code nil nil [5155 5188])
            ("put" code nil nil [5189 5228])
            ("defalias" code nil nil [5229 6948])
            ("defun" function (:arguments ("name" "arglist" "docstring" "body")) nil [6997 9374])
            ("fset" code nil nil [9480 9501])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [10512 10983])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [10985 11063])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [11065 11435])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [11437 12330])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [12332 13149])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [13151 13982])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [13985 15680])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [16010 16396])
            ("dont-compile" function (:arguments ("body")) nil [16398 16707])
            ("eval-when-compile" function (:arguments ("body")) nil [16950 17311])
            ("eval-and-compile" function (:arguments ("body")) nil [17313 17691])
            ("with-no-warnings" function (:arguments ("body")) nil [17693 17901])
            ("make-obsolete-variable" code nil nil [19196 19305])
            ("make-obsolete" code nil nil [19306 19397]))          
      :file "byte-run.el.gz"
      :pointmax 19425
      :fsize 5834
      :lastmodtime '(21291 53104 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "copyright.el.gz"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("copyright" customgroup (:user-visible-flag t) nil [1143 1234])
            ("copyright-limit" variable (:default-value 2000) nil [1236 1476])
            ("copyright-at-end-flag" variable nil nil [1478 1681])
            ("copyright-regexp" variable (:default-value "\\(©\\|@copyright{}\\|[Cc]opyright\\s *:?\\s *\\(?:(C)\\)?\\|[Cc]opyright\\s *:?\\s *©\\)\\s *\\(?:[^0-9
]*\\s *\\)?\\([1-9]\\([-0-9, ';/*%#
	]\\|\\s<\\|\\s>\\)*[0-9]+\\)") nil [1757 2098])
            ("copyright-names-regexp" variable nil nil [2100 2433])
            ("copyright-years-regexp" variable (:default-value "\\(\\s *\\)\\([1-9]\\([-0-9, ';/*%#
	]\\|\\s<\\|\\s>\\)*[0-9]+\\)") nil [2702 2939])
            ("copyright-year-ranges" variable nil nil [3091 3461])
            ("copyright-query" variable (:default-value (quote function)) nil [3538 3830])
            ("copyright-current-gpl-version" variable
               (:constant-flag t
                :default-value "3")
                nil [3908 4015])
            ("copyright-update" variable (:default-value t) nil [4017 4122])
            ("copyright-current-year" variable (:default-value (format-time-string "%Y")) nil [4225 4324])
            ("copyright-limit" function nil nil [4326 4512])
            ("copyright-re-search" function (:arguments ("regexp" "bound" "noerror" "count")) nil [4514 4786])
            ("copyright-start-point" function nil nil [4788 4956])
            ("copyright-offset-too-large-p" function nil nil [4958 5216])
            ("copyright-find-copyright" function nil nil [5218 6035])
            ("copyright-find-end" function nil nil [6037 6793])
            ("copyright-update-year" function (:arguments ("replace" "noquery")) nil [6795 8418])
            ("copyright-update" function
               (:user-visible-flag t
                :arguments ("arg" "interactivep"))
                nil [8435 10357])
            ("copyright-fix-years" function (:user-visible-flag t) nil [10446 13046])
            ("define-skeleton" code nil nil [13063 13426])
            ("copyright-update-directory" function
               (:user-visible-flag t
                :arguments ("directory" "match" "fix"))
                nil [13482 14171])
            ("copyright" package nil nil [14173 14193]))          
      :file "copyright.el.gz"
      :pointmax 14295
      :fsize 5085
      :lastmodtime '(21291 53104 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "cl-loaddefs.el"
      :major-mode 'emacs-lisp-mode
      :tags 
        '( ("cl-coerce" function (:prototype-flag t) nil [199 328])
            ("cl-equalp" function (:prototype-flag t) nil [330 609])
            ("cl--mapcar-many" function (:prototype-flag t) nil [611 685])
            ("cl-map" function (:prototype-flag t) nil [687 865])
            ("cl-maplist" function (:prototype-flag t) nil [867 1081])
            ("cl-mapc" function (:prototype-flag t) nil [1083 1228])
            ("cl-mapl" function (:prototype-flag t) nil [1230 1372])
            ("cl-mapcan" function (:prototype-flag t) nil [1374 1522])
            ("cl-mapcon" function (:prototype-flag t) nil [1524 1669])
            ("cl-some" function (:prototype-flag t) nil [1671 1863])
            ("cl-every" function (:prototype-flag t) nil [1865 1998])
            ("cl-notany" function (:prototype-flag t) nil [2000 2135])
            ("cl-notevery" function (:prototype-flag t) nil [2137 2273])
            ("cl--map-keymap-recursively" function (:prototype-flag t) nil [2275 2381])
            ("cl--map-intervals" function (:prototype-flag t) nil [2383 2493])
            ("cl--map-overlays" function (:prototype-flag t) nil [2495 2605])
            ("cl--set-frame-visible-p" function (:prototype-flag t) nil [2607 2683])
            ("cl-gcd" function (:prototype-flag t) nil [2685 2797])
            ("cl-lcm" function (:prototype-flag t) nil [2799 2909])
            ("cl-isqrt" function (:prototype-flag t) nil [2911 3011])
            ("cl-floor" function (:prototype-flag t) nil [3013 3205])
            ("cl-ceiling" function (:prototype-flag t) nil [3207 3405])
            ("cl-truncate" function (:prototype-flag t) nil [3407 3614])
            ("cl-round" function (:prototype-flag t) nil [3616 3818])
            ("cl-mod" function (:prototype-flag t) nil [3820 3930])
            ("cl-rem" function (:prototype-flag t) nil [3932 4042])
            ("cl-signum" function (:prototype-flag t) nil [4044 4151])
            ("cl-random" function (:prototype-flag t) nil [4153 4347])
            ("cl-make-random-state" function (:prototype-flag t) nil [4349 4571])
            ("cl-random-state-p" function (:prototype-flag t) nil [4573 4684])
            ("cl-float-limits" function (:prototype-flag t) nil [4686 5057])
            ("cl-subseq" function (:prototype-flag t) nil [5059 5298])
            ("cl-concatenate" function (:prototype-flag t) nil [5300 5440])
            ("cl-revappend" function (:prototype-flag t) nil [5442 5538])
            ("cl-nreconc" function (:prototype-flag t) nil [5540 5634])
            ("cl-list-length" function (:prototype-flag t) nil [5636 5756])
            ("cl-tailp" function (:prototype-flag t) nil [5758 5863])
            ("cl-get" function (:prototype-flag t) nil [5865 6015])
            ("put" code nil nil [6035 6089])
            ("cl-getf" function (:prototype-flag t) nil [6092 6304])
            ("cl--set-getf" function (:prototype-flag t) nil [6306 6375])
            ("cl--do-remf" function (:prototype-flag t) nil [6377 6441])
            ("cl-remprop" function (:prototype-flag t) nil [6443 6575])
            ("cl-prettyexpand" function (:prototype-flag t) nil [6577 6814])
            ("cl--compiler-macro-list*" function (:prototype-flag t) nil [6947 7035])
            ("cl--compiler-macro-cXXr" function (:prototype-flag t) nil [7037 7109])
            ("cl-gensym" function (:prototype-flag t) nil [7111 7277])
            ("cl-gentemp" function (:prototype-flag t) nil [7279 7463])
            ("cl-defun" function (:prototype-flag t) nil [7465 7703])
            ("put" code nil nil [7705 7739])
            ("put" code nil nil [7741 7781])
            ("cl-defmacro" function (:prototype-flag t) nil [7783 8024])
            ("put" code nil nil [8026 8063])
            ("put" code nil nil [8065 8108])
            ("cl-function" function (:prototype-flag t) nil [8110 8308])
            ("cl-destructuring-bind" function (:prototype-flag t) nil [8310 8458])
            ("put" code nil nil [8460 8513])
            ("cl-eval-when" function (:prototype-flag t) nil [8515 8842])
            ("put" code nil nil [8844 8888])
            ("cl-load-time-value" function (:prototype-flag t) nil [8890 9092])
            ("cl-case" function (:prototype-flag t) nil [9094 9605])
            ("put" code nil nil [9607 9646])
            ("cl-ecase" function (:prototype-flag t) nil [9648 9801])
            ("put" code nil nil [9803 9843])
            ("cl-typecase" function (:prototype-flag t) nil [9845 10239])
            ("put" code nil nil [10241 10284])
            ("cl-etypecase" function (:prototype-flag t) nil [10286 10444])
            ("put" code nil nil [10446 10490])
            ("cl-block" function (:prototype-flag t) nil [10492 11061])
            ("put" code nil nil [11063 11103])
            ("cl-return" function (:prototype-flag t) nil [11105 11256])
            ("cl-return-from" function (:prototype-flag t) nil [11258 11631])
            ("put" code nil nil [11633 11679])
            ("cl-loop" function (:prototype-flag t) nil [11681 12846])
            ("cl-do" function (:prototype-flag t) nil [12848 12973])
            ("put" code nil nil [12975 13012])
            ("cl-do*" function (:prototype-flag t) nil [13014 13141])
            ("put" code nil nil [13143 13181])
            ("cl-dolist" function (:prototype-flag t) nil [13183 13449])
            ("put" code nil nil [13451 13492])
            ("cl-dotimes" function (:prototype-flag t) nil [13494 13752])
            ("put" code nil nil [13754 13796])
            ("cl-tagbody" function (:prototype-flag t) nil [13798 14443])
            ("cl-do-symbols" function (:prototype-flag t) nil [14445 14639])
            ("put" code nil nil [14641 14686])
            ("cl-do-all-symbols" function (:prototype-flag t) nil [14688 14818])
            ("put" code nil nil [14820 14869])
            ("cl-psetq" function (:prototype-flag t) nil [14871 15113])
            ("cl-progv" function (:prototype-flag t) nil [15115 15593])
            ("put" code nil nil [15595 15635])
            ("cl-flet" function (:prototype-flag t) nil [15637 15809])
            ("put" code nil nil [15811 15850])
            ("cl-flet*" function (:prototype-flag t) nil [15852 16032])
            ("put" code nil nil [16034 16074])
            ("cl-labels" function (:prototype-flag t) nil [16076 16331])
            ("put" code nil nil [16333 16374])
            ("cl-macrolet" function (:prototype-flag t) nil [16376 16558])
            ("put" code nil nil [16560 16603])
            ("cl-symbol-macrolet" function (:prototype-flag t) nil [16605 16866])
            ("put" code nil nil [16868 16918])
            ("cl-multiple-value-bind" function (:prototype-flag t) nil [16920 17367])
            ("put" code nil nil [17369 17423])
            ("cl-multiple-value-setq" function (:prototype-flag t) nil [17425 17827])
            ("put" code nil nil [17829 17883])
            ("cl-locally" function (:prototype-flag t) nil [17885 17968])
            ("cl-the" function (:prototype-flag t) nil [17970 18088])
            ("put" code nil nil [18090 18128])
            ("cl-declare" function (:prototype-flag t) nil [18130 18387])
            ("cl-psetf" function (:prototype-flag t) nil [18389 18632])
            ("cl-remf" function (:prototype-flag t) nil [18634 18864])
            ("cl-shiftf" function (:prototype-flag t) nil [18866 19098])
            ("cl-rotatef" function (:prototype-flag t) nil [19100 19337])
            ("cl-letf" function (:prototype-flag t) nil [19339 19909])
            ("put" code nil nil [19911 19950])
            ("cl-letf*" function (:prototype-flag t) nil [19952 20184])
            ("put" code nil nil [20186 20226])
            ("cl-callf" function (:prototype-flag t) nil [20228 20445])
            ("put" code nil nil [20447 20487])
            ("cl-callf2" function (:prototype-flag t) nil [20489 20675])
            ("put" code nil nil [20677 20718])
            ("cl-defstruct" function (:prototype-flag t) nil [20720 21614])
            ("put" code nil nil [21616 21654])
            ("put" code nil nil [21656 21700])
            ("cl-deftype" function (:prototype-flag t) nil [21702 21878])
            ("put" code nil nil [21880 21916])
            ("put" code nil nil [21918 21960])
            ("cl-typep" function (:prototype-flag t) nil [21962 22102])
            ("put" code nil nil [22122 22180])
            ("cl-check-type" function (:prototype-flag t) nil [22183 22375])
            ("cl-assert" function (:prototype-flag t) nil [22377 22784])
            ("cl-define-compiler-macro" function (:prototype-flag t) nil [22786 23509])
            ("put" code nil nil [23511 23567])
            ("cl-compiler-macroexpand" function (:prototype-flag t) nil [23569 23856])
            ("cl-defsubst" function (:prototype-flag t) nil [23858 24230])
            ("put" code nil nil [24232 24275])
            ("cl--compiler-macro-adjoin" function (:prototype-flag t) nil [24277 24367])
            ("cl-reduce" function (:prototype-flag t) nil [24497 24683])
            ("cl-fill" function (:prototype-flag t) nil [24685 24830])
            ("cl-replace" function (:prototype-flag t) nil [24832 25064])
            ("cl-remove" function (:prototype-flag t) nil [25066 25364])
            ("cl-remove-if" function (:prototype-flag t) nil [25366 25663])
            ("cl-remove-if-not" function (:prototype-flag t) nil [25665 25970])
            ("cl-delete" function (:prototype-flag t) nil [25972 26240])
            ("cl-delete-if" function (:prototype-flag t) nil [26242 26509])
            ("cl-delete-if-not" function (:prototype-flag t) nil [26511 26786])
            ("cl-remove-duplicates" function (:prototype-flag t) nil [26788 26994])
            ("cl-delete-duplicates" function (:prototype-flag t) nil [26996 27200])
            ("cl-substitute" function (:prototype-flag t) nil [27202 27499])
            ("cl-substitute-if" function (:prototype-flag t) nil [27501 27818])
            ("cl-substitute-if-not" function (:prototype-flag t) nil [27820 28145])
            ("cl-nsubstitute" function (:prototype-flag t) nil [28147 28415])
            ("cl-nsubstitute-if" function (:prototype-flag t) nil [28417 28705])
            ("cl-nsubstitute-if-not" function (:prototype-flag t) nil [28707 29003])
            ("cl-find" function (:prototype-flag t) nil [29005 29234])
            ("cl-find-if" function (:prototype-flag t) nil [29236 29464])
            ("cl-find-if-not" function (:prototype-flag t) nil [29466 29702])
            ("cl-position" function (:prototype-flag t) nil [29704 29950])
            ("cl-position-if" function (:prototype-flag t) nil [29952 30197])
            ("cl-position-if-not" function (:prototype-flag t) nil [30199 30452])
            ("cl-count" function (:prototype-flag t) nil [30454 30633])
            ("cl-count-if" function (:prototype-flag t) nil [30635 30813])
            ("cl-count-if-not" function (:prototype-flag t) nil [30815 31001])
            ("cl-mismatch" function (:prototype-flag t) nil [31003 31369])
            ("cl-search" function (:prototype-flag t) nil [31371 31675])
            ("cl-sort" function (:prototype-flag t) nil [31677 31904])
            ("cl-stable-sort" function (:prototype-flag t) nil [31906 32147])
            ("cl-merge" function (:prototype-flag t) nil [32149 32474])
            ("cl-member" function (:prototype-flag t) nil [32476 32686])
            ("put" code nil nil [32706 32766])
            ("cl-member-if" function (:prototype-flag t) nil [32769 32978])
            ("cl-member-if-not" function (:prototype-flag t) nil [32980 33197])
            ("cl--adjoin" function (:prototype-flag t) nil [33199 33280])
            ("cl-assoc" function (:prototype-flag t) nil [33282 33454])
            ("put" code nil nil [33474 33532])
            ("cl-assoc-if" function (:prototype-flag t) nil [33535 33706])
            ("cl-assoc-if-not" function (:prototype-flag t) nil [33708 33890])
            ("cl-rassoc" function (:prototype-flag t) nil [33892 34065])
            ("cl-rassoc-if" function (:prototype-flag t) nil [34067 34239])
            ("cl-rassoc-if-not" function (:prototype-flag t) nil [34241 34424])
            ("cl-union" function (:prototype-flag t) nil [34426 34804])
            ("cl-nunion" function (:prototype-flag t) nil [34806 35150])
            ("cl-intersection" function (:prototype-flag t) nil [35152 35543])
            ("cl-nintersection" function (:prototype-flag t) nil [35545 35902])
            ("cl-set-difference" function (:prototype-flag t) nil [35904 36294])
            ("cl-nset-difference" function (:prototype-flag t) nil [36296 36652])
            ("cl-set-exclusive-or" function (:prototype-flag t) nil [36654 37054])
            ("cl-nset-exclusive-or" function (:prototype-flag t) nil [37056 37422])
            ("cl-subsetp" function (:prototype-flag t) nil [37424 37646])
            ("cl-subst-if" function (:prototype-flag t) nil [37648 37906])
            ("cl-subst-if-not" function (:prototype-flag t) nil [37908 38174])
            ("cl-nsubst" function (:prototype-flag t) nil [38176 38445])
            ("cl-nsubst-if" function (:prototype-flag t) nil [38447 38714])
            ("cl-nsubst-if-not" function (:prototype-flag t) nil [38716 38991])
            ("cl-sublis" function (:prototype-flag t) nil [38993 39244])
            ("cl-nsublis" function (:prototype-flag t) nil [39246 39499])
            ("cl-tree-equal" function (:prototype-flag t) nil [39501 39747])
            ("cl-loaddefs" package nil nil [39758 39780]))          
      :file "cl-loaddefs.el"
      :pointmax 39929
      :fsize 39928
      :lastmodtime '(21569 15457 0 0)
      :unmatched-syntax '((close-paren 33532 . 33533) (symbol 33457 . 33473) (open-paren 33456 . 33457) (close-paren 32766 . 32767) (symbol 32689 . 32705) (open-paren 32688 . 32689) (close-paren 22180 . 22181) (symbol 22105 . 22121) (open-paren 22104 . 22105) (close-paren 6089 . 6090) (symbol 6018 . 6034) (open-paren 6017 . 6018))))
  :file "!usr!local!share!emacs!24.4!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
