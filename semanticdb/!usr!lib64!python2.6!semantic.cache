;; Object python2.6/
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "python2.6/"
  :tables
  (list
    (semanticdb-table "os.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"OS routines for Mac, NT, or Posix depending on what system we're on.

This exports:
  - all functions from posix, nt, os2, or ce, e.g. unlink, stat, etc.
  - os.path is one of the modules posixpath, or ntpath
  - os.name is 'posix', 'nt', 'os2', 'ce' or 'riscos'
  - os.curdir is a string representing the current directory ('.' or ':')
  - os.pardir is a string representing the parent directory ('..' or '::')
  - os.sep is the (or a most common) pathname separator ('/' or ':' or '\\\\')
  - os.extsep is the extension separator ('.' or '/')
  - os.altsep is the alternate pathname separator (None or '/')
  - os.pathsep is the component separator used in $PATH etc
  - os.linesep is the line separator in text files ('\\r' or '\\n' or '\\r\\n')
  - os.defpath is the default search path for executables
  - os.devnull is the file path of the null device ('/dev/null', etc.)

Programs that import and use 'os' stand a better chance of being
portable between different platforms.  Of course, they must then
only use functions that are defined by all platforms (e.g., unlink
and opendir), and leave all pathname manipulation to os.path
(e.g., split and join).
\"\"\"" code nil nil [1 1163])
            ("errno" include nil nil [1169 1186])
            ("sys" include nil nil [1169 1186])
            ("_names" variable nil nil [1188 1221])
            ("__all__" variable nil nil [1271 1446])
            ("_get_exports_list" function (:arguments 
              ( ("module" variable nil (reparse-symbol function_parameters) [1470 1476]))              ) nil [1448 1606])
            ("if" code nil nil [1607 3137])
            ("sys" variable nil nil [3138 3167])
            ("" code nil nil [3188 3256])
            ("del" code nil nil [3258 3268])
            ("SEEK_SET" variable nil nil [3390 3402])
            ("SEEK_CUR" variable nil nil [3403 3415])
            ("SEEK_END" variable nil nil [3416 3428])
            ("makedirs" function
               (:documentation "makedirs(path [, mode=0777])

    Super-mkdir; create a leaf directory and all intermediate ones.
    Works like mkdir, except that any intermediate path segment (not
    just the rightmost) will be created if it does not exist.  This is
    recursive.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3538 3542])
                    ("mode" variable nil (reparse-symbol function_parameters) [3544 3548]))                  )
                nil [3525 4277])
            ("removedirs" function
               (:documentation "removedirs(path)

    Super-rmdir; remove a leaf directory and all empty intermediate
    ones.  Works like rmdir except that, if the leaf directory is
    successfully removed, directories corresponding to rightmost path
    segments will be pruned away until either the whole path is
    consumed or an error occurs.  Errors during this latter phase are
    ignored -- they generally mean that a directory was not empty.

    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4293 4297]))                  )
                nil [4278 4984])
            ("renames" function
               (:documentation "renames(old, new)

    Super-rename; create directories as necessary and delete any left
    empty.  Works like rename, except creation of any intermediate
    directories needed to make the new pathname good is attempted
    first.  After the rename, directories corresponding to rightmost
    path segments of the old name will be pruned way until either the
    whole path is consumed or a nonempty directory is found.

    Note: this function can fail with the new directory structure made
    if you lack permissions needed to unlink the leaf directory or
    file.

    "
                :arguments 
                  ( ("old" variable nil (reparse-symbol function_parameters) [4997 5000])
                    ("new" variable nil (reparse-symbol function_parameters) [5002 5005]))                  )
                nil [4985 5856])
            ("__all__" code nil nil [5857 5910])
            ("walk" function
               (:documentation "Directory tree generator.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), yields a 3-tuple

        dirpath, dirnames, filenames

    dirpath is a string, the path to the directory.  dirnames is a list of
    the names of the subdirectories in dirpath (excluding '.' and '..').
    filenames is a list of the names of the non-directory files in dirpath.
    Note that the names in the lists are just names, with no path components.
    To get a full path (which begins with top) to a file or directory in
    dirpath, do os.path.join(dirpath, name).

    If optional arg 'topdown' is true or not specified, the triple for a
    directory is generated before the triples for any of its subdirectories
    (directories are generated top down).  If topdown is false, the triple
    for a directory is generated after the triples for all of its
    subdirectories (directories are generated bottom up).

    When topdown is true, the caller can modify the dirnames list in-place
    (e.g., via del or slice assignment), and walk will only recurse into the
    subdirectories whose names remain in dirnames; this can be used to prune
    the search, or to impose a specific order of visiting.  Modifying
    dirnames when topdown is false is ineffective, since the directories in
    dirnames have already been generated by the time dirnames itself is
    generated.

    By default errors from the os.listdir() call are ignored.  If
    optional arg 'onerror' is specified, it should be a function; it
    will be called with one argument, an os.error instance.  It can
    report the error to continue with the walk, or raise the exception
    to abort the walk.  Note that the filename is available as the
    filename attribute of the exception object.

    By default, os.walk does not follow symbolic links to subdirectories on
    systems that support them.  In order to get this functionality, set the
    optional argument 'followlinks' to true.

    Caution:  if you pass a relative pathname for top, don't change the
    current working directory between resumptions of walk.  walk never
    changes the current directory, and assumes that the client doesn't
    either.

    Example:

    import os
    from os.path import join, getsize
    for root, dirs, files in os.walk('python/Lib/email'):
        print root, \"consumes\",
        print sum([getsize(join(root, name)) for name in files]),
        print \"bytes in\", len(files), \"non-directory files\"
        if 'CVS' in dirs:
            dirs.remove('CVS')  # don't visit CVS directories
    "
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [5921 5924])
                    ("topdown" variable nil (reparse-symbol function_parameters) [5926 5933])
                    ("onerror" variable nil (reparse-symbol function_parameters) [5940 5947])
                    ("followlinks" variable nil (reparse-symbol function_parameters) [5954 5965]))                  )
                nil [5912 9664])
            ("__all__" code nil nil [9665 9687])
            ("try" code nil nil [9729 9781])
            ("execl" function
               (:documentation "execl(file, *args)

    Execute the executable file with argument list args, replacing the
    current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9792 9796])
                    ("args" variable nil (reparse-symbol function_parameters) [9798 9803]))                  )
                nil [9782 9951])
            ("execle" function
               (:documentation "execle(file, *args, env)

    Execute the executable file with argument list args and
    environment env, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [9963 9967])
                    ("args" variable nil (reparse-symbol function_parameters) [9969 9974]))                  )
                nil [9952 10178])
            ("execlp" function
               (:documentation "execlp(file, *args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10190 10194])
                    ("args" variable nil (reparse-symbol function_parameters) [10196 10201]))                  )
                nil [10179 10387])
            ("execlpe" function
               (:documentation "execlpe(file, *args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env, replacing the current
    process. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10400 10404])
                    ("args" variable nil (reparse-symbol function_parameters) [10406 10411]))                  )
                nil [10388 10657])
            ("execvp" function
               (:documentation "execvp(file, args)

    Execute the executable file (which is searched for along $PATH)
    with argument list args, replacing the current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10669 10673])
                    ("args" variable nil (reparse-symbol function_parameters) [10675 10679]))                  )
                nil [10658 10910])
            ("execvpe" function
               (:documentation "execvpe(file, args, env)

    Execute the executable file (which is searched for along $PATH)
    with argument list args and environment env , replacing the
    current process.
    args may be a list or tuple of strings. "
                :arguments 
                  ( ("file" variable nil (reparse-symbol function_parameters) [10923 10927])
                    ("args" variable nil (reparse-symbol function_parameters) [10929 10933])
                    ("env" variable nil (reparse-symbol function_parameters) [10935 10938]))                  )
                nil [10911 11205])
            ("__all__" code nil nil [11206 11278])
            ("_execvpe" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11293 11297])
                ("args" variable nil (reparse-symbol function_parameters) [11299 11303])
                ("env" variable nil (reparse-symbol function_parameters) [11305 11308]))              ) nil [11280 12148])
            ("try" code nil nil [12210 16419])
            ("getenv" function
               (:documentation "Get an environment variable, return None if it doesn't exist.
    The optional second argument can specify an alternate default."
                :arguments 
                  ( ("key" variable nil (reparse-symbol function_parameters) [16431 16434])
                    ("default" variable nil (reparse-symbol function_parameters) [16436 16443]))                  )
                nil [16420 16627])
            ("__all__" code nil nil [16627 16651])
            ("_exists" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [16665 16669]))              ) nil [16653 16763])
            ("if" code nil nil [16807 19710])
            ("if" code nil nil [19711 20708])
            ("if" code nil nil [20710 21816])
            ("if" code nil nil [21850 25116])
            ("copy_reg" include nil nil [25117 25145])
            ("_make_stat_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25169 25172])
                ("dict" variable nil (reparse-symbol function_parameters) [25174 25178]))              ) nil [25147 25215])
            ("_pickle_stat_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25240 25242]))              ) nil [25216 25317])
            ("try" code nil nil [25318 25452])
            ("_make_statvfs_result" function (:arguments 
              ( ("tup" variable nil (reparse-symbol function_parameters) [25478 25481])
                ("dict" variable nil (reparse-symbol function_parameters) [25483 25487]))              ) nil [25453 25527])
            ("_pickle_statvfs_result" function (:arguments 
              ( ("sr" variable nil (reparse-symbol function_parameters) [25555 25557]))              ) nil [25528 25635])
            ("try" code nil nil [25636 25803])
            ("if" code nil nil [25804 26339]))          
      :file "os.py"
      :pointmax 26339
      :fsize 26338
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "re.py"
      :major-mode 'python-mode
      :tags 
        '( ("r\"\"\"Support for regular expressions (RE).

This module provides regular expression matching operations similar to
those found in Perl.  It supports both 8-bit and Unicode strings; both
the pattern and the strings being processed can contain null bytes and
characters outside the US ASCII range.

Regular expressions can contain both special and ordinary characters.
Most ordinary characters, like \"A\", \"a\", or \"0\", are the simplest
regular expressions; they simply match themselves.  You can
concatenate ordinary characters, so last matches the string 'last'.

The special characters are:
    \".\"      Matches any character except a newline.
    \"^\"      Matches the start of the string.
    \"$\"      Matches the end of the string or just before the newline at
             the end of the string.
    \"*\"      Matches 0 or more (greedy) repetitions of the preceding RE.
             Greedy means that it will match as many repetitions as possible.
    \"+\"      Matches 1 or more (greedy) repetitions of the preceding RE.
    \"?\"      Matches 0 or 1 (greedy) of the preceding RE.
    *?,+?,?? Non-greedy versions of the previous three special characters.
    {m,n}    Matches from m to n repetitions of the preceding RE.
    {m,n}?   Non-greedy version of the above.
    \"\\\\\"     Either escapes special characters or signals a special sequence.
    []       Indicates a set of characters.
             A \"^\" as the first character indicates a complementing set.
    \"|\"      A|B, creates an RE that will match either A or B.
    (...)    Matches the RE inside the parentheses.
             The contents can be retrieved or matched later in the string.
    (?iLmsux) Set the I, L, M, S, U, or X flag for the RE (see below).
    (?:...)  Non-grouping version of regular parentheses.
    (?P<name>...) The substring matched by the group is accessible by name.
    (?P=name)     Matches the text matched earlier by the group named name.
    (?#...)  A comment; ignored.
    (?=...)  Matches if ... matches next, but doesn't consume the string.
    (?!...)  Matches if ... doesn't match next.
    (?<=...) Matches if preceded by ... (must be fixed length).
    (?<!...) Matches if not preceded by ... (must be fixed length).
    (?(id/name)yes|no) Matches yes pattern if the group with id/name matched,
                       the (optional) no pattern otherwise.

The special sequences consist of \"\\\\\" and a character from the list
below.  If the ordinary character is not on the list, then the
resulting RE will match the second character.
    \\number  Matches the contents of the group of the same number.
    \\A       Matches only at the start of the string.
    \\Z       Matches only at the end of the string.
    \\b       Matches the empty string, but only at the start or end of a word.
    \\B       Matches the empty string, but not at the start or end of a word.
    \\d       Matches any decimal digit; equivalent to the set [0-9].
    \\D       Matches any non-digit character; equivalent to the set [^0-9].
    \\s       Matches any whitespace character; equivalent to [ \\t\\n\\r\\f\\v].
    \\S       Matches any non-whitespace character; equiv. to [^ \\t\\n\\r\\f\\v].
    \\w       Matches any alphanumeric character; equivalent to [a-zA-Z0-9_].
             With LOCALE, it will match the set [0-9_] plus characters defined
             as letters for the current locale.
    \\W       Matches the complement of \\w.
    \\\\       Matches a literal backslash.

This module exports the following functions:
    match    Match a regular expression pattern to the beginning of a string.
    search   Search a string for the presence of a pattern.
    sub      Substitute occurrences of a pattern found in a string.
    subn     Same as sub, but also return the number of substitutions made.
    split    Split a string by the occurrences of a pattern.
    findall  Find all occurrences of a pattern in a string.
    finditer Return an iterator yielding a match object for each match.
    compile  Compile a pattern into a RegexObject.
    purge    Clear the regular expression cache.
    escape   Backslash all non-alphanumerics in a string.

Some of the functions in this module takes flags as optional parameters:
    I  IGNORECASE  Perform case-insensitive matching.
    L  LOCALE      Make \\w, \\W, \\b, \\B, dependent on the current locale.
    M  MULTILINE   \"^\" matches the beginning of lines (after a newline)
                   as well as the string.
                   \"$\" matches the end of lines (before a newline) as well
                   as the end of the string.
    S  DOTALL      \".\" matches any character at all, including the newline.
    X  VERBOSE     Ignore whitespace and comments for nicer looking RE's.
    U  UNICODE     Make \\w, \\W, \\b, \\B, dependent on the Unicode locale.

This module also defines an exception 'error'.

\"\"\"" code nil nil [501 5342])
            ("sys" include nil nil [5344 5354])
            ("sre_compile" include nil nil [5355 5373])
            ("sre_parse" include nil nil [5374 5390])
            ("__all__" variable nil nil [5409 5637])
            ("__version__" variable nil nil [5639 5660])
            ("I" variable nil nil [5670 5718])
            ("L" variable nil nil [5733 5773])
            ("U" variable nil nil [5804 5846])
            ("M" variable nil nil [5871 5917])
            ("S" variable nil nil [5950 5990])
            ("X" variable nil nil [6016 6058])
            ("T" variable nil nil [6146 6190])
            ("DEBUG" variable nil nil [6214 6248])
            ("error" variable nil nil [6299 6324])
            ("match" function
               (:documentation "Try to apply the pattern at the start of the string, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6427 6434])
                    ("string" variable nil (reparse-symbol function_parameters) [6436 6442])
                    ("flags" variable nil (reparse-symbol function_parameters) [6444 6449]))                  )
                nil [6417 6628])
            ("search" function
               (:documentation "Scan through string looking for a match to the pattern, returning
    a match object, or None if no match was found."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6640 6647])
                    ("string" variable nil (reparse-symbol function_parameters) [6649 6655])
                    ("flags" variable nil (reparse-symbol function_parameters) [6657 6662]))                  )
                nil [6629 6845])
            ("sub" function
               (:documentation "Return the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in string by the
    replacement repl.  repl can be either a string or a callable;
    if a string, backslash escapes in it are processed.  If it is
    a callable, it's passed the match object and must return
    a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [6854 6861])
                    ("repl" variable nil (reparse-symbol function_parameters) [6863 6867])
                    ("string" variable nil (reparse-symbol function_parameters) [6869 6875])
                    ("count" variable nil (reparse-symbol function_parameters) [6877 6882]))                  )
                nil [6846 7301])
            ("subn" function
               (:documentation "Return a 2-tuple containing (new_string, number).
    new_string is the string obtained by replacing the leftmost
    non-overlapping occurrences of the pattern in the source
    string by the replacement repl.  number is the number of
    substitutions that were made. repl can be either a string or a
    callable; if a string, backslash escapes in it are processed.
    If it is a callable, it's passed the match object and must
    return a replacement string to be used."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7311 7318])
                    ("repl" variable nil (reparse-symbol function_parameters) [7320 7324])
                    ("string" variable nil (reparse-symbol function_parameters) [7326 7332])
                    ("count" variable nil (reparse-symbol function_parameters) [7334 7339]))                  )
                nil [7302 7888])
            ("split" function
               (:documentation "Split the source string by the occurrences of the pattern,
    returning a list containing the resulting substrings."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [7899 7906])
                    ("string" variable nil (reparse-symbol function_parameters) [7908 7914])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [7916 7924]))                  )
                nil [7889 8112])
            ("findall" function
               (:documentation "Return a list of all non-overlapping matches in the string.

    If one or more groups are present in the pattern, return a
    list of groups; this will be a list of tuples if the pattern
    has more than one group.

    Empty matches are included in the result."
                :arguments 
                  ( ("pattern" variable nil (reparse-symbol function_parameters) [8125 8132])
                    ("string" variable nil (reparse-symbol function_parameters) [8134 8140])
                    ("flags" variable nil (reparse-symbol function_parameters) [8142 8147]))                  )
                nil [8113 8479])
            ("if" code nil nil [8480 8839])
            ("compile" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [8852 8859])
                ("flags" variable nil (reparse-symbol function_parameters) [8861 8866]))              ) nil [8840 8979])
            ("purge" function nil nil [8980 9077])
            ("template" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9091 9098])
                ("flags" variable nil (reparse-symbol function_parameters) [9100 9105]))              ) nil [9078 9209])
            ("_alphanum" variable nil nil [9210 9224])
            ("for" code nil nil [9225 9322])
            ("del" code nil nil [9322 9327])
            ("escape" function (:arguments 
              ( ("pattern" variable nil (reparse-symbol function_parameters) [9340 9347]))              ) nil [9329 12967]))          
      :file "re.py"
      :pointmax 12967
      :fsize 12966
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "mimetypes.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Guess the MIME type of a file.

This module defines two useful functions:

guess_type(url, strict=1) -- guess the MIME type and encoding of a URL.

guess_extension(type, strict=1) -- guess the extension for a given MIME type.

It also contains the following, for tuning the behavior:

Data:

knownfiles -- list of files to parse
inited -- flag set when init() has been called
suffix_map -- dictionary mapping suffixes to suffixes
encodings_map -- dictionary mapping suffixes to encodings
types_map -- dictionary mapping suffixes to types

Functions:

init([files]) -- parse a list of files, default knownfiles
read_mime_types(file) -- parse one file, return a dictionary or None
\"\"\"" code nil nil [1 686])
            ("os" include nil nil [688 697])
            ("posixpath" include nil nil [698 714])
            ("urllib" include nil nil [715 728])
            ("__all__" variable nil nil [730 842])
            ("knownfiles" variable nil nil [844 1329])
            ("inited" variable nil nil [1331 1345])
            ("_db" variable nil nil [1346 1356])
            ("MimeTypes" type
               (:documentation "MIME-types datastore.

    This datastore can handle information from mime.types-style files
    and supports basic determination of MIME type from a filename or
    URL, and can guess a reasonable extension given a MIME type.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [1678 1712])
                            ("self" variable nil (reparse-symbol indented_block_body) [1720 1761])
                            ("self" variable nil (reparse-symbol indented_block_body) [1770 1805])
                            ("self" variable nil (reparse-symbol indented_block_body) [1814 1839])
                            ("self" variable nil (reparse-symbol indented_block_body) [1880 1909])
                            ("for" code nil (reparse-symbol indented_block_body) [1918 1999])
                            ("for" code nil (reparse-symbol indented_block_body) [2007 2092])
                            ("for" code nil (reparse-symbol indented_block_body) [2100 2159]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1636 1640])
                            ("filenames" variable nil (reparse-symbol function_parameters) [1642 1651])
                            ("strict" variable nil (reparse-symbol function_parameters) [1656 1662]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1623 2159])
                    ("add_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2177 2181])
                            ("type" variable nil (reparse-symbol function_parameters) [2183 2187])
                            ("ext" variable nil (reparse-symbol function_parameters) [2189 2192])
                            ("strict" variable nil (reparse-symbol function_parameters) [2194 2200]))                          
                        :documentation "Add a mapping between a type and an extension.

        When the extension is already known, the new
        type will replace the old one. When the type
        is already known the extension will be added
        to the list of known extensions.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [2164 2779])
                    ("guess_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2799 2803])
                            ("url" variable nil (reparse-symbol function_parameters) [2805 2808])
                            ("strict" variable nil (reparse-symbol function_parameters) [2810 2816]))                          
                        :documentation "Guess the type of a file based on its URL.

        Return value is a tuple (type, encoding) where type is None if
        the type can't be guessed (no or unknown suffix) or a string
        of the form type/subtype, usable for a MIME Content-type
        header; and encoding is None for no encoding or the name of
        the program used to encode (e.g. compress or gzip).  The
        mappings are table driven.  Encoding suffixes are case
        sensitive; type suffixes are first tried case sensitive, then
        case insensitive.

        The suffixes .tgz, .taz and .tz (case sensitive!) are all
        mapped to '.tar.gz'.  (This is table-driven too, using the
        dictionary suffix_map.)

        Optional `strict' argument when False adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [2784 5335])
                    ("guess_all_extensions" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5365 5369])
                            ("type" variable nil (reparse-symbol function_parameters) [5371 5375])
                            ("strict" variable nil (reparse-symbol function_parameters) [5377 5383]))                          
                        :documentation "Guess the extensions for a file based on its MIME type.

        Return value is a list of strings giving the possible filename
        extensions, including the leading dot ('.').  The extension is not
        guaranteed to have been associated with any particular data stream,
        but would be mapped to the MIME type `type' by guess_type().

        Optional `strict' argument when false adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [5340 6159])
                    ("guess_extension" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6184 6188])
                            ("type" variable nil (reparse-symbol function_parameters) [6190 6194])
                            ("strict" variable nil (reparse-symbol function_parameters) [6196 6202]))                          
                        :documentation "Guess the extension for a file based on its MIME type.

        Return value is a string giving a filename extension,
        including the leading dot ('.').  The extension is not
        guaranteed to have been associated with any particular data
        stream, but would be mapped to the MIME type `type' by
        guess_type().  If no extension can be guessed for `type', None
        is returned.

        Optional `strict' argument when false adds a bunch of commonly found,
        but non-standard types.
        ")
                        (reparse-symbol indented_block_body) [6164 6889])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6903 6907])
                            ("filename" variable nil (reparse-symbol function_parameters) [6909 6917])
                            ("strict" variable nil (reparse-symbol function_parameters) [6919 6925]))                          
                        :documentation "
        Read a single mime.types-format file, specified by pathname.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [6894 7242])
                    ("readfp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7258 7262])
                            ("fp" variable nil (reparse-symbol function_parameters) [7264 7266])
                            ("strict" variable nil (reparse-symbol function_parameters) [7268 7274]))                          
                        :documentation "
        Read a single mime.types-format file.

        If strict is true, information will be added to
        list of standard types, else to the list of non-standard
        types.
        ")
                        (reparse-symbol indented_block_body) [7247 7948]))                  
                :type "class")
                nil [1359 7948])
            ("guess_type" function
               (:documentation "Guess the type of a file based on its URL.

    Return value is a tuple (type, encoding) where type is None if the
    type can't be guessed (no or unknown suffix) or a string of the
    form type/subtype, usable for a MIME Content-type header; and
    encoding is None for no encoding or the name of the program used
    to encode (e.g. compress or gzip).  The mappings are table
    driven.  Encoding suffixes are case sensitive; type suffixes are
    first tried case sensitive, then case insensitive.

    The suffixes .tgz, .taz and .tz (case sensitive!) are all mapped
    to \".tar.gz\".  (This is table-driven too, using the dictionary
    suffix_map).

    Optional `strict' argument when false adds a bunch of commonly found, but
    non-standard types.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [7964 7967])
                    ("strict" variable nil (reparse-symbol function_parameters) [7969 7975]))                  )
                nil [7949 8834])
            ("guess_all_extensions" function
               (:documentation "Guess the extensions for a file based on its MIME type.

    Return value is a list of strings giving the possible filename
    extensions, including the leading dot ('.').  The extension is not
    guaranteed to have been associated with any particular data
    stream, but would be mapped to the MIME type `type' by
    guess_type().  If no extension can be guessed for `type', None
    is returned.

    Optional `strict' argument when false adds a bunch of commonly found,
    but non-standard types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [8861 8865])
                    ("strict" variable nil (reparse-symbol function_parameters) [8867 8873]))                  )
                nil [8836 9486])
            ("guess_extension" function
               (:documentation "Guess the extension for a file based on its MIME type.

    Return value is a string giving a filename extension, including the
    leading dot ('.').  The extension is not guaranteed to have been
    associated with any particular data stream, but would be mapped to the
    MIME type `type' by guess_type().  If no extension can be guessed for
    `type', None is returned.

    Optional `strict' argument when false adds a bunch of commonly found,
    but non-standard types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [9507 9511])
                    ("strict" variable nil (reparse-symbol function_parameters) [9513 9519]))                  )
                nil [9487 10101])
            ("add_type" function
               (:documentation "Add a mapping between a type and an extension.

    When the extension is already known, the new
    type will replace the old one. When the type
    is already known the extension will be added
    to the list of known extensions.

    If strict is true, information will be added to
    list of standard types, else to the list of non-standard
    types.
    "
                :arguments 
                  ( ("type" variable nil (reparse-symbol function_parameters) [10115 10119])
                    ("ext" variable nil (reparse-symbol function_parameters) [10121 10124])
                    ("strict" variable nil (reparse-symbol function_parameters) [10126 10132]))                  )
                nil [10102 10590])
            ("init" function (:arguments 
              ( ("files" variable nil (reparse-symbol function_parameters) [10601 10606]))              ) nil [10592 11157])
            ("read_mime_types" function (:arguments 
              ( ("file" variable nil (reparse-symbol function_parameters) [11179 11183]))              ) nil [11159 11332])
            ("_default_mime_types" function nil nil [11334 17465])
            ("_default_mime_types" code nil nil [17467 17488])
            ("if" code nil nil [17491 18823]))          
      :file "mimetypes.py"
      :pointmax 18823
      :fsize 18822
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "urllib.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Open an arbitrary URL.

See the following document for more info on URLs:
\"Names and Addresses, URIs, URLs, URNs, URCs\", at
http://www.w3.org/pub/WWW/Addressing/Overview.html

See also the HTTP spec (from which the error codes are derived):
\"HTTP - Hypertext Transfer Protocol\", at
http://www.w3.org/pub/WWW/Protocols/

Related standards and specs:
- RFC1808: the \"relative URL\" spec. (authoritative status)
- RFC1738 - the \"URL standard\". (authoritative status)
- RFC1630 - the \"URI spec\". (informational status)

The object returned by URLopener().open(file) will differ per
protocol.  All you know is that is has methods read(), readline(),
readlines(), fileno(), close() and info().  The read*(), fileno()
and close() methods work like those of open files.
The info() method returns a mimetools.Message object which can be
used to query various info about the object, if available.
(mimetools.Message objects are queried with the getheader() method.)
\"\"\"" code nil nil [1 962])
            ("string" include nil nil [964 977])
            ("socket" include nil nil [978 991])
            ("os" include nil nil [992 1001])
            ("time" include nil nil [1002 1013])
            ("sys" include nil nil [1014 1024])
            ("urlparse" include nil nil [1025 1065])
            ("__all__" variable nil nil [1067 1517])
            ("__version__" variable nil nil [1519 1539])
            ("MAXFTPCACHE" variable nil nil [1589 1605])
            ("if" code nil nil [1682 2333])
            ("_urlopener" variable nil nil [2597 2614])
            ("urlopen" function
               (:documentation "Create a file-like object for the specified URL to read from."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [2627 2630])
                    ("data" variable nil (reparse-symbol function_parameters) [2632 2636])
                    ("proxies" variable nil (reparse-symbol function_parameters) [2643 2650]))                  )
                nil [2615 3214])
            ("urlretrieve" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [3230 3233])
                ("filename" variable nil (reparse-symbol function_parameters) [3235 3243])
                ("reporthook" variable nil (reparse-symbol function_parameters) [3250 3260])
                ("data" variable nil (reparse-symbol function_parameters) [3267 3271]))              ) nil [3214 3426])
            ("urlcleanup" function nil nil [3426 3535])
            ("try" code nil nil [3552 3629])
            ("ContentTooShortError" type
               (:superclasses ("IOError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("IOError" code nil (reparse-symbol indented_block_body) [3787 3818])
                            ("self" variable nil (reparse-symbol indented_block_body) [3827 3849]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3754 3758])
                            ("message" variable nil (reparse-symbol function_parameters) [3760 3767])
                            ("content" variable nil (reparse-symbol function_parameters) [3769 3776]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3741 3850]))                  
                :type "class")
                nil [3700 3850])
            ("ftpcache" variable nil nil [3851 3864])
            ("URLopener" type
               (:documentation "Class to open URLs.
    This is a class rather than just a subroutine because we may need
    more than one set of global protocol-specific options.
    Note -- this is a base class for those who don't want the
    automatic handling of errors type 302 (relocated) and 401
    (authorization needed)."
                :members 
                  ( ("__tempfiles" variable nil (reparse-symbol indented_block_body) [4198 4216])
                    ("version" code nil (reparse-symbol indented_block_body) [4222 4264])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [4338 4393])
                            ("assert" code nil (reparse-symbol indented_block_body) [4401 4464])
                            ("self" variable nil (reparse-symbol indented_block_body) [4473 4495])
                            ("self" variable nil (reparse-symbol indented_block_body) [4504 4540])
                            ("self" variable nil (reparse-symbol indented_block_body) [4549 4587])
                            ("self" variable nil (reparse-symbol indented_block_body) [4596 4644])
                            ("self" variable nil (reparse-symbol indented_block_body) [4653 4674])
                            ("self" variable nil (reparse-symbol indented_block_body) [4683 4708])
                            ("self" variable nil (reparse-symbol indented_block_body) [4733 4754])
                            ("self" variable nil (reparse-symbol indented_block_body) [5075 5099]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4301 4305])
                            ("proxies" variable nil (reparse-symbol function_parameters) [4307 4314])
                            ("x509" variable nil (reparse-symbol function_parameters) [4321 4327]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4288 5100])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5336 5340]))                          )
                        (reparse-symbol indented_block_body) [5324 5364])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5379 5383]))                          )
                        (reparse-symbol indented_block_body) [5369 5409])
                    ("cleanup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5426 5430]))                          )
                        (reparse-symbol indented_block_body) [5414 5878])
                    ("addheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5897 5901])
                            ("args" variable nil (reparse-symbol function_parameters) [5903 5908]))                          
                        :documentation "Add a header to be used by the HTTP interface only
        e.g. u.addheader('Accept', 'sound/basic')")
                        (reparse-symbol indented_block_body) [5883 6063])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6102 6106])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [6108 6115])
                            ("data" variable nil (reparse-symbol function_parameters) [6117 6121]))                          
                        :documentation "Use URLopener().open(file) instead of open(file, 'r').")
                        (reparse-symbol indented_block_body) [6093 7545])
                    ("open_unknown" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7567 7571])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7573 7580])
                            ("data" variable nil (reparse-symbol function_parameters) [7582 7586]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7550 7758])
                    ("open_unknown_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7786 7790])
                            ("proxy" variable nil (reparse-symbol function_parameters) [7792 7797])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [7799 7806])
                            ("data" variable nil (reparse-symbol function_parameters) [7808 7812]))                          
                        :documentation "Overridable interface to open unknown URL type.")
                        (reparse-symbol indented_block_body) [7763 7996])
                    ("retrieve" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8039 8043])
                            ("url" variable nil (reparse-symbol function_parameters) [8045 8048])
                            ("filename" variable nil (reparse-symbol function_parameters) [8050 8058])
                            ("reporthook" variable nil (reparse-symbol function_parameters) [8065 8075])
                            ("data" variable nil (reparse-symbol function_parameters) [8082 8086]))                          
                        :documentation "retrieve(url) returns (filename, headers) for a local object
        or (tempfilename, headers) for a remote object.")
                        (reparse-symbol indented_block_body) [8026 10503])
                    ("open_http" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10594 10598])
                            ("url" variable nil (reparse-symbol function_parameters) [10600 10603])
                            ("data" variable nil (reparse-symbol function_parameters) [10605 10609]))                          
                        :documentation "Use HTTP protocol.")
                        (reparse-symbol indented_block_body) [10580 13508])
                    ("http_error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13528 13532])
                            ("url" variable nil (reparse-symbol function_parameters) [13534 13537])
                            ("fp" variable nil (reparse-symbol function_parameters) [13539 13541])
                            ("errcode" variable nil (reparse-symbol function_parameters) [13543 13550])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [13552 13558])
                            ("headers" variable nil (reparse-symbol function_parameters) [13560 13567])
                            ("data" variable nil (reparse-symbol function_parameters) [13569 13573]))                          
                        :documentation "Handle http errors.
        Derived class can override this, or provide specific handlers
        named http_error_DDD where DDD is the 3-digit error code.")
                        (reparse-symbol indented_block_body) [13513 14230])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14258 14262])
                            ("url" variable nil (reparse-symbol function_parameters) [14264 14267])
                            ("fp" variable nil (reparse-symbol function_parameters) [14269 14271])
                            ("errcode" variable nil (reparse-symbol function_parameters) [14273 14280])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [14282 14288])
                            ("headers" variable nil (reparse-symbol function_parameters) [14290 14297]))                          
                        :documentation "Default error handler: close the connection and raise IOError.")
                        (reparse-symbol indented_block_body) [14235 14485])
                    ("if" code nil (reparse-symbol indented_block_body) [14490 17773])
                    ("open_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17792 17796])
                            ("url" variable nil (reparse-symbol function_parameters) [17798 17801]))                          
                        :documentation "Use local file or FTP depending on form of URL.")
                        (reparse-symbol indented_block_body) [17778 18189])
                    ("open_local_file" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18214 18218])
                            ("url" variable nil (reparse-symbol function_parameters) [18220 18223]))                          
                        :documentation "Use local file.")
                        (reparse-symbol indented_block_body) [18194 19586])
                    ("open_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19604 19608])
                            ("url" variable nil (reparse-symbol function_parameters) [19610 19613]))                          
                        :documentation "Use FTP protocol.")
                        (reparse-symbol indented_block_body) [19591 22067])
                    ("open_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22086 22090])
                            ("url" variable nil (reparse-symbol function_parameters) [22092 22095])
                            ("data" variable nil (reparse-symbol function_parameters) [22097 22101]))                          
                        :documentation "Use \"data\" URL.")
                        (reparse-symbol indented_block_body) [22072 23759]))                  
                :type "class")
                nil [3865 23759])
            ("FancyURLopener" type
               (:documentation "Derived class with handlers for errors we can handle (perhaps)."
                :superclasses ("URLopener")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("URLopener" code nil (reparse-symbol indented_block_body) [23918 23959])
                            ("self" variable nil (reparse-symbol indented_block_body) [23968 23988])
                            ("self" variable nil (reparse-symbol indented_block_body) [23997 24011])
                            ("self" variable nil (reparse-symbol indented_block_body) [24020 24038]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23886 23890])
                            ("args" variable nil (reparse-symbol function_parameters) [23892 23897])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [23899 23907]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [23873 24039])
                    ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24067 24071])
                            ("url" variable nil (reparse-symbol function_parameters) [24073 24076])
                            ("fp" variable nil (reparse-symbol function_parameters) [24078 24080])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24082 24089])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24091 24097])
                            ("headers" variable nil (reparse-symbol function_parameters) [24099 24106]))                          
                        :documentation "Default error handling -- don't raise an exception.")
                        (reparse-symbol indented_block_body) [24044 24238])
                    ("http_error_302" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24262 24266])
                            ("url" variable nil (reparse-symbol function_parameters) [24268 24271])
                            ("fp" variable nil (reparse-symbol function_parameters) [24273 24275])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24277 24284])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24286 24292])
                            ("headers" variable nil (reparse-symbol function_parameters) [24294 24301])
                            ("data" variable nil (reparse-symbol function_parameters) [24303 24307]))                          
                        :documentation "Error 302 -- relocated (temporarily).")
                        (reparse-symbol indented_block_body) [24243 24914])
                    ("redirect_internal" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24941 24945])
                            ("url" variable nil (reparse-symbol function_parameters) [24947 24950])
                            ("fp" variable nil (reparse-symbol function_parameters) [24952 24954])
                            ("errcode" variable nil (reparse-symbol function_parameters) [24956 24963])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [24965 24971])
                            ("headers" variable nil (reparse-symbol function_parameters) [24973 24980])
                            ("data" variable nil (reparse-symbol function_parameters) [24982 24986]))                          )
                        (reparse-symbol indented_block_body) [24919 25883])
                    ("http_error_301" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25907 25911])
                            ("url" variable nil (reparse-symbol function_parameters) [25913 25916])
                            ("fp" variable nil (reparse-symbol function_parameters) [25918 25920])
                            ("errcode" variable nil (reparse-symbol function_parameters) [25922 25929])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [25931 25937])
                            ("headers" variable nil (reparse-symbol function_parameters) [25939 25946])
                            ("data" variable nil (reparse-symbol function_parameters) [25948 25952]))                          
                        :documentation "Error 301 -- also relocated (permanently).")
                        (reparse-symbol indented_block_body) [25888 26093])
                    ("http_error_303" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26117 26121])
                            ("url" variable nil (reparse-symbol function_parameters) [26123 26126])
                            ("fp" variable nil (reparse-symbol function_parameters) [26128 26130])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26132 26139])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26141 26147])
                            ("headers" variable nil (reparse-symbol function_parameters) [26149 26156])
                            ("data" variable nil (reparse-symbol function_parameters) [26158 26162]))                          
                        :documentation "Error 303 -- also relocated (essentially identical to 302).")
                        (reparse-symbol indented_block_body) [26098 26320])
                    ("http_error_307" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26344 26348])
                            ("url" variable nil (reparse-symbol function_parameters) [26350 26353])
                            ("fp" variable nil (reparse-symbol function_parameters) [26355 26357])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26359 26366])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26368 26374])
                            ("headers" variable nil (reparse-symbol function_parameters) [26376 26383])
                            ("data" variable nil (reparse-symbol function_parameters) [26385 26389]))                          
                        :documentation "Error 307 -- relocated, but turn POST into error.")
                        (reparse-symbol indented_block_body) [26325 26658])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26682 26686])
                            ("url" variable nil (reparse-symbol function_parameters) [26688 26691])
                            ("fp" variable nil (reparse-symbol function_parameters) [26693 26695])
                            ("errcode" variable nil (reparse-symbol function_parameters) [26697 26704])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [26706 26712])
                            ("headers" variable nil (reparse-symbol function_parameters) [26714 26721])
                            ("data" variable nil (reparse-symbol function_parameters) [26723 26727]))                          
                        :documentation "Error 401 -- authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [26663 27690])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27714 27718])
                            ("url" variable nil (reparse-symbol function_parameters) [27720 27723])
                            ("fp" variable nil (reparse-symbol function_parameters) [27725 27727])
                            ("errcode" variable nil (reparse-symbol function_parameters) [27729 27736])
                            ("errmsg" variable nil (reparse-symbol function_parameters) [27738 27744])
                            ("headers" variable nil (reparse-symbol function_parameters) [27746 27753])
                            ("data" variable nil (reparse-symbol function_parameters) [27755 27759]))                          
                        :documentation "Error 407 -- proxy authentication required.
        This function supports Basic authentication only.")
                        (reparse-symbol indented_block_body) [27695 28738])
                    ("retry_proxy_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28775 28779])
                            ("url" variable nil (reparse-symbol function_parameters) [28781 28784])
                            ("realm" variable nil (reparse-symbol function_parameters) [28786 28791])
                            ("data" variable nil (reparse-symbol function_parameters) [28793 28797]))                          )
                        (reparse-symbol indented_block_body) [28743 29487])
                    ("retry_proxy_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29525 29529])
                            ("url" variable nil (reparse-symbol function_parameters) [29531 29534])
                            ("realm" variable nil (reparse-symbol function_parameters) [29536 29541])
                            ("data" variable nil (reparse-symbol function_parameters) [29543 29547]))                          )
                        (reparse-symbol indented_block_body) [29492 30241])
                    ("retry_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30272 30276])
                            ("url" variable nil (reparse-symbol function_parameters) [30278 30281])
                            ("realm" variable nil (reparse-symbol function_parameters) [30283 30288])
                            ("data" variable nil (reparse-symbol function_parameters) [30290 30294]))                          )
                        (reparse-symbol indented_block_body) [30246 30746])
                    ("retry_https_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30778 30782])
                            ("url" variable nil (reparse-symbol function_parameters) [30784 30787])
                            ("realm" variable nil (reparse-symbol function_parameters) [30789 30794])
                            ("data" variable nil (reparse-symbol function_parameters) [30796 30800]))                          )
                        (reparse-symbol indented_block_body) [30751 31253])
                    ("get_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31278 31282])
                            ("host" variable nil (reparse-symbol function_parameters) [31284 31288])
                            ("realm" variable nil (reparse-symbol function_parameters) [31290 31295])
                            ("clear_cache" variable nil (reparse-symbol function_parameters) [31297 31308]))                          )
                        (reparse-symbol indented_block_body) [31258 31675])
                    ("prompt_user_passwd" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31703 31707])
                            ("host" variable nil (reparse-symbol function_parameters) [31709 31713])
                            ("realm" variable nil (reparse-symbol function_parameters) [31715 31720]))                          
                        :documentation "Override this in a GUI environment!")
                        (reparse-symbol indented_block_body) [31680 32179]))                  
                :type "class")
                nil [23761 32179])
            ("_localhost" variable nil nil [32202 32219])
            ("localhost" function (:documentation "Return the IP address of the magic hostname 'localhost'.") nil [32220 32430])
            ("_thishost" variable nil nil [32431 32447])
            ("thishost" function (:documentation "Return the IP address of the current host.") nil [32448 32648])
            ("_ftperrors" variable nil nil [32649 32666])
            ("ftperrors" function (:documentation "Return the set of errors raised by the FTP class.") nil [32667 32876])
            ("_noheaders" variable nil nil [32877 32894])
            ("noheaders" function (:documentation "Return an empty mimetools.Message object.") nil [32895 33298])
            ("ftpwrapper" type
               (:documentation "Class used by open_ftp() for cache of open FTP connections."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [33529 33545])
                            ("self" variable nil (reparse-symbol indented_block_body) [33554 33574])
                            ("self" variable nil (reparse-symbol indented_block_body) [33583 33599])
                            ("self" variable nil (reparse-symbol indented_block_body) [33608 33624])
                            ("self" variable nil (reparse-symbol indented_block_body) [33633 33649])
                            ("self" variable nil (reparse-symbol indented_block_body) [33658 33680])
                            ("self" code nil (reparse-symbol indented_block_body) [33689 33700]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33425 33429])
                            ("user" variable nil (reparse-symbol function_parameters) [33431 33435])
                            ("passwd" variable nil (reparse-symbol function_parameters) [33437 33443])
                            ("host" variable nil (reparse-symbol function_parameters) [33445 33449])
                            ("port" variable nil (reparse-symbol function_parameters) [33451 33455])
                            ("dirs" variable nil (reparse-symbol function_parameters) [33457 33461])
                            ("timeout" variable nil (reparse-symbol function_parameters) [33480 33487]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [33412 33701])
                    ("init" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33715 33719]))                          )
                        (reparse-symbol indented_block_body) [33706 33966])
                    ("retrfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33984 33988])
                            ("file" variable nil (reparse-symbol function_parameters) [33990 33994])
                            ("type" variable nil (reparse-symbol function_parameters) [33996 34000]))                          )
                        (reparse-symbol indented_block_body) [33971 35509])
                    ("endtransfer" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35529 35533]))                          )
                        (reparse-symbol indented_block_body) [35513 35693])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35708 35712]))                          )
                        (reparse-symbol indented_block_body) [35698 35829]))                  
                :type "class")
                nil [33319 35829])
            ("addbase" type
               (:documentation "Base class for addinfo and addclosehook."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [35933 35945])
                            ("self" variable nil (reparse-symbol indented_block_body) [35954 35978])
                            ("self" variable nil (reparse-symbol indented_block_body) [35987 36019])
                            ("if" code nil (reparse-symbol indented_block_body) [36028 36097])
                            ("if" code nil (reparse-symbol indented_block_body) [36105 36230])
                            ("if" code nil (reparse-symbol indented_block_body) [36238 36398]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35914 35918])
                            ("fp" variable nil (reparse-symbol function_parameters) [35920 35922]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35901 36398])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36416 36420]))                          )
                        (reparse-symbol indented_block_body) [36403 36557])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36572 36576]))                          )
                        (reparse-symbol indented_block_body) [36562 36749]))                  
                :type "class")
                nil [35830 36749])
            ("addclosehook" type
               (:documentation "Class to add a close hook to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [36891 36917])
                            ("self" variable nil (reparse-symbol indented_block_body) [36926 36952])
                            ("self" variable nil (reparse-symbol indented_block_body) [36961 36985]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36850 36854])
                            ("fp" variable nil (reparse-symbol function_parameters) [36856 36858])
                            ("closehook" variable nil (reparse-symbol function_parameters) [36860 36869])
                            ("hookargs" variable nil (reparse-symbol function_parameters) [36871 36880]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [36837 36986])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37001 37005]))                          )
                        (reparse-symbol indented_block_body) [36991 37173]))                  
                :type "class")
                nil [36750 37173])
            ("addinfo" type
               (:documentation "class to add an info() method to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37301 37327])
                            ("self" variable nil (reparse-symbol indented_block_body) [37336 37358]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37273 37277])
                            ("fp" variable nil (reparse-symbol function_parameters) [37279 37281])
                            ("headers" variable nil (reparse-symbol function_parameters) [37283 37290]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37260 37359])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37373 37377]))                          )
                        (reparse-symbol indented_block_body) [37364 37408]))                  
                :type "class")
                nil [37174 37408])
            ("addinfourl" type
               (:documentation "class to add info() and geturl() methods to an open file."
                :superclasses ("addbase")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("addbase" code nil (reparse-symbol indented_block_body) [37566 37592])
                            ("self" variable nil (reparse-symbol indented_block_body) [37601 37623])
                            ("self" variable nil (reparse-symbol indented_block_body) [37632 37646])
                            ("self" variable nil (reparse-symbol indented_block_body) [37655 37671]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37522 37526])
                            ("fp" variable nil (reparse-symbol function_parameters) [37528 37530])
                            ("headers" variable nil (reparse-symbol function_parameters) [37532 37539])
                            ("url" variable nil (reparse-symbol function_parameters) [37541 37544])
                            ("code" variable nil (reparse-symbol function_parameters) [37546 37550]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [37509 37672])
                    ("info" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37686 37690]))                          )
                        (reparse-symbol indented_block_body) [37677 37721])
                    ("getcode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37738 37742]))                          )
                        (reparse-symbol indented_block_body) [37726 37770])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37786 37790]))                          )
                        (reparse-symbol indented_block_body) [37775 37817]))                  
                :type "class")
                nil [37409 37817])
            ("try" code nil nil [38556 38700])
            ("toBytes" function
               (:documentation "toBytes(u\"URL\") --> 'URL'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [38713 38716]))                  )
                nil [38701 39084])
            ("unwrap" function
               (:documentation "unwrap('<URL:type://host/path>') --> 'type://host/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39096 39099]))                  )
                nil [39085 39329])
            ("_typeprog" variable nil nil [39330 39346])
            ("splittype" function
               (:documentation "splittype('type:opaquestring') --> 'type', 'opaquestring'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39361 39364]))                  )
                nil [39347 39700])
            ("_hostprog" variable nil nil [39701 39717])
            ("splithost" function
               (:documentation "splithost('//host[:port]/path') --> 'host[:port]', '/path'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [39732 39735]))                  )
                nil [39718 40018])
            ("_userprog" variable nil nil [40019 40035])
            ("splituser" function
               (:documentation "splituser('user[:passwd]@host[:port]') --> 'user[:passwd]', 'host[:port]'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [40050 40054]))                  )
                nil [40036 40363])
            ("_passwdprog" variable nil nil [40364 40382])
            ("splitpasswd" function
               (:documentation "splitpasswd('user:passwd') -> 'user', 'passwd'."
                :arguments 
                  ( ("user" variable nil (reparse-symbol function_parameters) [40399 40403]))                  )
                nil [40383 40682])
            ("_portprog" variable nil nil [40726 40742])
            ("splitport" function
               (:documentation "splitport('host:port') --> 'host', 'port'."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [40757 40761]))                  )
                nil [40743 41028])
            ("_nportprog" variable nil nil [41029 41046])
            ("splitnport" function
               (:documentation "Split host and port, returning numeric port.
    Return given default port if no ':' found; defaults to -1.
    Return numerical port if a valid number are found after ':'.
    Return None if ':' but not a valid number."
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [41062 41066])
                    ("defport" variable nil (reparse-symbol function_parameters) [41068 41075]))                  )
                nil [41047 41716])
            ("_queryprog" variable nil nil [41717 41734])
            ("splitquery" function
               (:documentation "splitquery('/path?query') --> '/path', 'query'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [41750 41753]))                  )
                nil [41735 42027])
            ("_tagprog" variable nil nil [42028 42043])
            ("splittag" function
               (:documentation "splittag('/path#tag') --> '/path', 'tag'."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42057 42060]))                  )
                nil [42044 42319])
            ("splitattr" function
               (:documentation "splitattr('/path;attr1=value1;attr2=value2;...') ->
        '/path', ['attr1=value1', 'attr2=value2', ...]."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [42334 42337]))                  )
                nil [42320 42516])
            ("_valueprog" variable nil nil [42517 42534])
            ("splitvalue" function
               (:documentation "splitvalue('attr=value') --> 'attr', 'value'."
                :arguments 
                  ( ("attr" variable nil (reparse-symbol function_parameters) [42550 42554]))                  )
                nil [42535 42827])
            ("_hexdig" variable nil nil [42828 42862])
            ("_hextochr" variable nil nil [42863 42938])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [42952 42953]))                  )
                nil [42940 43319])
            ("unquote_plus" function
               (:documentation "unquote('%7e/abc+def') -> '~/abc def'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43337 43338]))                  )
                nil [43320 43439])
            ("always_safe" variable nil nil [43440 43562])
            ("_safemaps" variable nil nil [43563 43577])
            ("quote" function
               (:documentation "quote('abc def') -> 'abc%20def'

    Each part of a URL, e.g. the path info, the query, etc., has a
    different set of reserved characters that must be quoted.

    RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax lists
    the following reserved characters.

    reserved    = \";\" | \"/\" | \"?\" | \":\" | \"@\" | \"&\" | \"=\" | \"+\" |
                  \"$\" | \",\"

    Each of these characters is reserved in some component of a URL,
    but not necessarily in all of them.

    By default, the quote function is intended for quoting the path
    section of a URL.  Thus, it will not encode '/'.  This character
    is reserved, but in typical usage the quote function is being
    called on a path where the existing slash characters are used as
    reserved characters.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43589 43590])
                    ("safe" variable nil (reparse-symbol function_parameters) [43592 43596]))                  )
                nil [43579 44765])
            ("quote_plus" function
               (:documentation "Quote the query fragment of a URL; replacing ' ' with '+'"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [44781 44782])
                    ("safe" variable nil (reparse-symbol function_parameters) [44784 44788]))                  )
                nil [44766 44975])
            ("urlencode" function
               (:documentation "Encode a sequence of two-element tuples or dictionary into a URL query string.

    If any values in the query arg are sequences and doseq is true, each
    sequence element is converted to a separate parameter.

    If the query arg is a sequence of two-element tuples, the order of the
    parameters in the output will match the order of parameters in the
    input.
    "
                :arguments 
                  ( ("query" variable nil (reparse-symbol function_parameters) [44990 44995])
                    ("doseq" variable nil (reparse-symbol function_parameters) [44996 45001]))                  )
                nil [44976 47406])
            ("getproxies_environment" function (:documentation "Return a dictionary of scheme -> proxy server URL mappings.

    Scan the environment for variables named <scheme>_proxy;
    this seems to be the standard convention.  If you need a
    different way, you can pass a proxies dictionary to the
    [Fancy]URLopener constructor.

    ") nil [47424 47937])
            ("proxy_bypass_environment" function
               (:documentation "Test if proxies should not be used for a particular host.

    Checks the environment for a variable named no_proxy, which should
    be a list of DNS suffixes separated by commas, or '*' for all hosts.
    "
                :arguments 
                  ( ("host" variable nil (reparse-symbol function_parameters) [47967 47971]))                  )
                nil [47938 48649])
            ("if" code nil nil [48651 56411])
            ("test1" function nil nil [56450 56740])
            ("reporthook" function (:arguments 
              ( ("blocknum" variable nil (reparse-symbol function_parameters) [56757 56765])
                ("blocksize" variable nil (reparse-symbol function_parameters) [56767 56776])
                ("totalsize" variable nil (reparse-symbol function_parameters) [56778 56787]))              ) nil [56742 56932])
            ("test" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [56957 56961]))              ) nil [56948 57916])
            ("main" function nil nil [57917 58585])
            ("if" code nil nil [58626 58664]))          
      :file "urllib.py"
      :pointmax 58664
      :fsize 58663
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "urllib2.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"An extensible library for opening URLs using a variety of protocols

The simplest way to use this module is to call the urlopen function,
which accepts a string containing a URL or a Request object (described
below).  It opens the URL and returns the results as file-like
object; the returned object has some extra methods described below.

The OpenerDirector manages a collection of Handler objects that do
all the actual work.  Each Handler implements a particular protocol or
option.  The OpenerDirector is a composite object that invokes the
Handlers needed to open the requested URL.  For example, the
HTTPHandler performs HTTP GET and POST requests and deals with
non-error returns.  The HTTPRedirectHandler automatically deals with
HTTP 301, 302, 303 and 307 redirect errors, and the HTTPDigestAuthHandler
deals with digest authentication.

urlopen(url, data=None) -- Basic usage is the same as original
urllib.  pass the url and optionally data to post to an HTTP URL, and
get a file-like object back.  One difference is that you can also pass
a Request instance instead of URL.  Raises a URLError (subclass of
IOError); for HTTP errors, raises an HTTPError, which can also be
treated as a valid response.

build_opener -- Function that creates a new OpenerDirector instance.
Will install the default handlers.  Accepts one or more Handlers as
arguments, either instances or Handler classes that it will
instantiate.  If one of the argument is a subclass of the default
handler, the argument will be installed instead of the default.

install_opener -- Installs a new opener as the default opener.

objects of interest:

OpenerDirector -- Sets up the User Agent as the Python-urllib client and manages
the Handler classes, while dealing with requests and responses.

Request -- An object that encapsulates the state of a request.  The
state can be as simple as the URL.  It can also include extra HTTP
headers, e.g. a User-Agent.

BaseHandler --

exceptions:
URLError -- A subclass of IOError, individual protocols have their own
specific subclass.

HTTPError -- Also a valid HTTP response, so you can treat an HTTP error
as an exceptional event or valid response.

internals:
BaseHandler and parent
_call_chain conventions

Example usage:

import urllib2

# set up authentication info
authinfo = urllib2.HTTPBasicAuthHandler()
authinfo.add_password(realm='PDQ Application',
                      uri='https://mahler:8092/site-updates.py',
                      user='klem',
                      passwd='geheim$parole')

proxy_support = urllib2.ProxyHandler({\"http\" : \"http://ahad-haam:3128\"})

# build a new opener that adds authentication and caching FTP handlers
opener = urllib2.build_opener(proxy_support, authinfo, urllib2.CacheFTPHandler)

# install it
urllib2.install_opener(opener)

f = urllib2.urlopen('http://www.python.org/')


\"\"\"" code nil nil [1 2856])
            ("base64" include nil nil [3473 3486])
            ("hashlib" include nil nil [3487 3501])
            ("httplib" include nil nil [3502 3516])
            ("mimetools" include nil nil [3517 3533])
            ("os" include nil nil [3534 3543])
            ("posixpath" include nil nil [3544 3560])
            ("random" include nil nil [3561 3574])
            ("re" include nil nil [3575 3584])
            ("socket" include nil nil [3585 3598])
            ("sys" include nil nil [3599 3609])
            ("time" include nil nil [3610 3621])
            ("urlparse" include nil nil [3622 3637])
            ("bisect" include nil nil [3638 3651])
            ("try" code nil nil [3653 3747])
            ("" code nil nil [3767 3905])
            ("urllib" include nil nil [3968 4036])
            ("__version__" variable nil nil [4071 4100])
            ("_opener" variable nil nil [4102 4116])
            ("urlopen" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [4129 4132])
                ("data" variable nil (reparse-symbol function_parameters) [4134 4138])
                ("timeout" variable nil (reparse-symbol function_parameters) [4145 4152]))              ) nil [4117 4306])
            ("install_opener" function (:arguments 
              ( ("opener" variable nil (reparse-symbol function_parameters) [4326 4332]))              ) nil [4307 4375])
            ("URLError" type
               (:superclasses ("IOError")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4912 4931])
                            ("self" variable nil (reparse-symbol indented_block_body) [4940 4960]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4889 4893])
                            ("reason" variable nil (reparse-symbol function_parameters) [4895 4901]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4876 4961])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4978 4982]))                          )
                        (reparse-symbol indented_block_body) [4966 5035]))                  
                :type "class")
                nil [4498 5035])
            ("HTTPError" type
               (:documentation "Raised when HTTP error occurs, but also acts like non-error return"
                :superclasses ("URLError" "addinfourl")
                :members 
                  ( ("__super_init" variable nil (reparse-symbol indented_block_body) [5156 5190])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5250 5266])
                            ("self" variable nil (reparse-symbol indented_block_body) [5275 5289])
                            ("self" variable nil (reparse-symbol indented_block_body) [5298 5314])
                            ("self" variable nil (reparse-symbol indented_block_body) [5323 5335])
                            ("self" variable nil (reparse-symbol indented_block_body) [5344 5363])
                            ("if" code nil (reparse-symbol indented_block_body) [5620 5690]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5209 5213])
                            ("url" variable nil (reparse-symbol function_parameters) [5215 5218])
                            ("code" variable nil (reparse-symbol function_parameters) [5220 5224])
                            ("msg" variable nil (reparse-symbol function_parameters) [5226 5229])
                            ("hdrs" variable nil (reparse-symbol function_parameters) [5231 5235])
                            ("fp" variable nil (reparse-symbol function_parameters) [5237 5239]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5196 5690])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5707 5711]))                          )
                        (reparse-symbol indented_block_body) [5695 5773]))                  
                :type "class")
                nil [5036 5773])
            ("_cut_port_re" variable nil nil [5801 5836])
            ("request_host" function
               (:documentation "Return request-host, as defined by RFC 2965.

    Variation from RFC: returned value is lowercased, for convenient
    comparison.

    "
                :arguments 
                  ( ("request" variable nil (reparse-symbol function_parameters) [5854 5861]))                  )
                nil [5837 6242])
            ("Request" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [6444 6473])
                            ("self" variable nil (reparse-symbol indented_block_body) [6482 6498])
                            ("self" variable nil (reparse-symbol indented_block_body) [6572 6588])
                            ("self" variable nil (reparse-symbol indented_block_body) [6597 6613])
                            ("self" variable nil (reparse-symbol indented_block_body) [6622 6646])
                            ("self" variable nil (reparse-symbol indented_block_body) [6655 6671])
                            ("self" variable nil (reparse-symbol indented_block_body) [6680 6697])
                            ("for" code nil (reparse-symbol indented_block_body) [6706 6781])
                            ("self" variable nil (reparse-symbol indented_block_body) [6789 6816])
                            ("if" code nil (reparse-symbol indented_block_body) [6825 6902])
                            ("self" variable nil (reparse-symbol indented_block_body) [6910 6948])
                            ("self" variable nil (reparse-symbol indented_block_body) [6957 6989]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6276 6280])
                            ("url" variable nil (reparse-symbol function_parameters) [6282 6285])
                            ("data" variable nil (reparse-symbol function_parameters) [6287 6291])
                            ("headers" variable nil (reparse-symbol function_parameters) [6298 6305])
                            ("origin_req_host" variable nil (reparse-symbol function_parameters) [6327 6342])
                            ("unverifiable" variable nil (reparse-symbol function_parameters) [6349 6361]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6263 6990])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7011 7015])
                            ("attr" variable nil (reparse-symbol function_parameters) [7017 7021]))                          )
                        (reparse-symbol indented_block_body) [6995 7504])
                    ("get_method" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7524 7528]))                          )
                        (reparse-symbol indented_block_body) [7509 7624])
                    ("add_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7683 7687])
                            ("data" variable nil (reparse-symbol function_parameters) [7689 7693]))                          )
                        (reparse-symbol indented_block_body) [7670 7721])
                    ("has_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7739 7743]))                          )
                        (reparse-symbol indented_block_body) [7726 7783])
                    ("get_data" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7801 7805]))                          )
                        (reparse-symbol indented_block_body) [7788 7833])
                    ("get_full_url" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7855 7859]))                          )
                        (reparse-symbol indented_block_body) [7838 7893])
                    ("get_type" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7911 7915]))                          )
                        (reparse-symbol indented_block_body) [7898 8148])
                    ("get_host" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8166 8170]))                          )
                        (reparse-symbol indented_block_body) [8153 8365])
                    ("get_selector" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8387 8391]))                          )
                        (reparse-symbol indented_block_body) [8370 8423])
                    ("set_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8442 8446])
                            ("host" variable nil (reparse-symbol function_parameters) [8448 8452])
                            ("type" variable nil (reparse-symbol function_parameters) [8454 8458]))                          )
                        (reparse-symbol indented_block_body) [8428 8675])
                    ("has_proxy" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8694 8698]))                          )
                        (reparse-symbol indented_block_body) [8680 8749])
                    ("get_origin_req_host" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8778 8782]))                          )
                        (reparse-symbol indented_block_body) [8754 8821])
                    ("is_unverifiable" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8846 8850]))                          )
                        (reparse-symbol indented_block_body) [8826 8886])
                    ("add_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8906 8910])
                            ("key" variable nil (reparse-symbol function_parameters) [8912 8915])
                            ("val" variable nil (reparse-symbol function_parameters) [8917 8920]))                          )
                        (reparse-symbol indented_block_body) [8891 9019])
                    ("add_unredirected_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9052 9056])
                            ("key" variable nil (reparse-symbol function_parameters) [9058 9061])
                            ("val" variable nil (reparse-symbol function_parameters) [9063 9066]))                          )
                        (reparse-symbol indented_block_body) [9024 9176])
                    ("has_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9196 9200])
                            ("header_name" variable nil (reparse-symbol function_parameters) [9202 9213]))                          )
                        (reparse-symbol indented_block_body) [9181 9318])
                    ("get_header" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9338 9342])
                            ("header_name" variable nil (reparse-symbol function_parameters) [9344 9355])
                            ("default" variable nil (reparse-symbol function_parameters) [9357 9364]))                          )
                        (reparse-symbol indented_block_body) [9323 9492])
                    ("header_items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9514 9518]))                          )
                        (reparse-symbol indented_block_body) [9497 9628]))                  
                :type "class")
                nil [6243 9628])
            ("OpenerDirector" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("client_version" code nil (reparse-symbol indented_block_body) [9683 9732])
                            ("self" variable nil (reparse-symbol indented_block_body) [9741 9791])
                            ("self" variable nil (reparse-symbol indented_block_body) [9841 9859])
                            ("self" variable nil (reparse-symbol indented_block_body) [9868 9889])
                            ("self" variable nil (reparse-symbol indented_block_body) [9898 9920])
                            ("self" variable nil (reparse-symbol indented_block_body) [9929 9955])
                            ("self" variable nil (reparse-symbol indented_block_body) [9964 9989]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9668 9672]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9655 9990])
                    ("add_handler" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10011 10015])
                            ("handler" variable nil (reparse-symbol function_parameters) [10017 10024]))                          )
                        (reparse-symbol indented_block_body) [9995 11672])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11687 11691]))                          )
                        (reparse-symbol indented_block_body) [11677 11758])
                    ("_call_chain" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11779 11783])
                            ("chain" variable nil (reparse-symbol function_parameters) [11785 11790])
                            ("kind" variable nil (reparse-symbol function_parameters) [11792 11796])
                            ("meth_name" variable nil (reparse-symbol function_parameters) [11798 11807])
                            ("args" variable nil (reparse-symbol function_parameters) [11809 11814]))                          )
                        (reparse-symbol indented_block_body) [11763 12236])
                    ("open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12250 12254])
                            ("fullurl" variable nil (reparse-symbol function_parameters) [12256 12263])
                            ("data" variable nil (reparse-symbol function_parameters) [12265 12269])
                            ("timeout" variable nil (reparse-symbol function_parameters) [12276 12283]))                          )
                        (reparse-symbol indented_block_body) [12241 13130])
                    ("_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13145 13149])
                            ("req" variable nil (reparse-symbol function_parameters) [13151 13154])
                            ("data" variable nil (reparse-symbol function_parameters) [13156 13160]))                          )
                        (reparse-symbol indented_block_body) [13135 13647])
                    ("error" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13662 13666])
                            ("proto" variable nil (reparse-symbol function_parameters) [13668 13673])
                            ("args" variable nil (reparse-symbol function_parameters) [13675 13680]))                          )
                        (reparse-symbol indented_block_body) [13652 14381]))                  
                :type "class")
                nil [9629 14381])
            ("build_opener" function
               (:documentation "Create an opener object from a list of handlers.

    The opener will use several default handlers, including support
    for HTTP, FTP and when applicable, HTTPS.

    If any of the handlers passed as arguments are subclasses of the
    default handlers, the default handlers will not be used.
    "
                :arguments 
                  ( ("handlers" variable nil (reparse-symbol function_parameters) [14569 14578]))                  )
                nil [14552 15836])
            ("BaseHandler" type
               (:members 
                  ( ("handler_order" variable nil (reparse-symbol indented_block_body) [15860 15879])
                    ("add_parent" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15900 15904])
                            ("parent" variable nil (reparse-symbol function_parameters) [15906 15912]))                          )
                        (reparse-symbol indented_block_body) [15885 15944])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15959 15963]))                          )
                        (reparse-symbol indented_block_body) [15949 16029])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16045 16049])
                            ("other" variable nil (reparse-symbol function_parameters) [16051 16056]))                          )
                        (reparse-symbol indented_block_body) [16034 16390]))                  
                :type "class")
                nil [15837 16390])
            ("HTTPErrorProcessor" type
               (:documentation "Process HTTP error responses."
                :superclasses ("BaseHandler")
                :members 
                  ( ("handler_order" variable nil (reparse-symbol indented_block_body) [16475 16495])
                    ("http_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16549 16553])
                            ("request" variable nil (reparse-symbol function_parameters) [16555 16562])
                            ("response" variable nil (reparse-symbol function_parameters) [16564 16572]))                          )
                        (reparse-symbol indented_block_body) [16531 16953])
                    ("https_response" variable nil (reparse-symbol indented_block_body) [16958 16988]))                  
                :type "class")
                nil [16392 16989])
            ("HTTPDefaultErrorHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("http_error_default" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17061 17065])
                            ("req" variable nil (reparse-symbol function_parameters) [17067 17070])
                            ("fp" variable nil (reparse-symbol function_parameters) [17072 17074])
                            ("code" variable nil (reparse-symbol function_parameters) [17076 17080])
                            ("msg" variable nil (reparse-symbol function_parameters) [17082 17085])
                            ("hdrs" variable nil (reparse-symbol function_parameters) [17087 17091]))                          )
                        (reparse-symbol indented_block_body) [17038 17159]))                  
                :type "class")
                nil [16990 17159])
            ("HTTPRedirectHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("max_repeats" variable nil (reparse-symbol indented_block_body) [17324 17339])
                    ("max_redirections" variable nil (reparse-symbol indented_block_body) [17445 17466])
                    ("redirect_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17493 17497])
                            ("req" variable nil (reparse-symbol function_parameters) [17499 17502])
                            ("fp" variable nil (reparse-symbol function_parameters) [17504 17506])
                            ("code" variable nil (reparse-symbol function_parameters) [17508 17512])
                            ("msg" variable nil (reparse-symbol function_parameters) [17514 17517])
                            ("headers" variable nil (reparse-symbol function_parameters) [17519 17526])
                            ("newurl" variable nil (reparse-symbol function_parameters) [17528 17534]))                          
                        :documentation "Return a Request or None in response to a redirect.

        This is called by the http_error_30x methods when a
        redirection response is received.  If a redirection should
        take place, return a new Request to allow http_error_30x to
        perform the redirect.  Otherwise, raise HTTPError if no-one
        else should try to handle this url.  Return None if you can't
        but another Handler might.
        ")
                        (reparse-symbol indented_block_body) [17472 19017])
                    ("http_error_302" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19277 19281])
                            ("req" variable nil (reparse-symbol function_parameters) [19283 19286])
                            ("fp" variable nil (reparse-symbol function_parameters) [19288 19290])
                            ("code" variable nil (reparse-symbol function_parameters) [19292 19296])
                            ("msg" variable nil (reparse-symbol function_parameters) [19298 19301])
                            ("headers" variable nil (reparse-symbol function_parameters) [19303 19310]))                          )
                        (reparse-symbol indented_block_body) [19258 21534])
                    ("http_error_301" variable nil (reparse-symbol indented_block_body) [21539 21604])
                    ("inf_msg" variable nil (reparse-symbol indented_block_body) [21610 21773]))                  
                :type "class")
                nil [17160 21774])
            ("_parse_proxy" function
               (:documentation "Return (scheme, user, password, host/port) given a URL or an authority.

    If a URL is supplied, it must have an authority (host:port) component.
    According to RFC 3986, having an authority component means the URL must
    have two slashes after the scheme:

    >>> _parse_proxy('file:/ftp.example.com/')
    Traceback (most recent call last):
    ValueError: proxy URL with no authority: 'file:/ftp.example.com/'

    The first three items of the returned tuple may be None.

    Examples of authority parsing:

    >>> _parse_proxy('proxy.example.com')
    (None, None, None, 'proxy.example.com')
    >>> _parse_proxy('proxy.example.com:3128')
    (None, None, None, 'proxy.example.com:3128')

    The authority component may optionally include userinfo (assumed to be
    username:password):

    >>> _parse_proxy('joe:password@proxy.example.com')
    (None, 'joe', 'password', 'proxy.example.com')
    >>> _parse_proxy('joe:password@proxy.example.com:3128')
    (None, 'joe', 'password', 'proxy.example.com:3128')

    Same examples, but with URLs instead:

    >>> _parse_proxy('http://proxy.example.com/')
    ('http', None, None, 'proxy.example.com')
    >>> _parse_proxy('http://proxy.example.com:3128/')
    ('http', None, None, 'proxy.example.com:3128')
    >>> _parse_proxy('http://joe:password@proxy.example.com/')
    ('http', 'joe', 'password', 'proxy.example.com')
    >>> _parse_proxy('http://joe:password@proxy.example.com:3128')
    ('http', 'joe', 'password', 'proxy.example.com:3128')

    Everything after the authority is ignored:

    >>> _parse_proxy('ftp://joe:password@proxy.example.com/rubbish:3128')
    ('ftp', 'joe', 'password', 'proxy.example.com')

    Test for no trailing '/' case:

    >>> _parse_proxy('http://joe:password@proxy.example.com')
    ('http', 'joe', 'password', 'proxy.example.com')

    "
                :arguments 
                  ( ("proxy" variable nil (reparse-symbol function_parameters) [21793 21798]))                  )
                nil [21776 24389])
            ("ProxyHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("handler_order" variable nil (reparse-symbol indented_block_body) [24458 24477])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [24525 24580])
                            ("assert" code nil (reparse-symbol indented_block_body) [24588 24651])
                            ("self" variable nil (reparse-symbol indented_block_body) [24660 24682])
                            ("for" code nil (reparse-symbol indented_block_body) [24691 24887]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24496 24500])
                            ("proxies" variable nil (reparse-symbol function_parameters) [24502 24509]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [24483 24887])
                    ("proxy_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24907 24911])
                            ("req" variable nil (reparse-symbol function_parameters) [24913 24916])
                            ("proxy" variable nil (reparse-symbol function_parameters) [24918 24923])
                            ("type" variable nil (reparse-symbol function_parameters) [24925 24929]))                          )
                        (reparse-symbol indented_block_body) [24892 26065]))                  
                :type "class")
                nil [24390 26065])
            ("HTTPPasswordMgr" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [26122 26138]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26107 26111]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [26094 26139])
                    ("add_password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26161 26165])
                            ("realm" variable nil (reparse-symbol function_parameters) [26167 26172])
                            ("uri" variable nil (reparse-symbol function_parameters) [26174 26177])
                            ("user" variable nil (reparse-symbol function_parameters) [26179 26183])
                            ("passwd" variable nil (reparse-symbol function_parameters) [26185 26191]))                          )
                        (reparse-symbol indented_block_body) [26144 26581])
                    ("find_user_password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26609 26613])
                            ("realm" variable nil (reparse-symbol function_parameters) [26615 26620])
                            ("authuri" variable nil (reparse-symbol function_parameters) [26622 26629]))                          )
                        (reparse-symbol indented_block_body) [26586 27002])
                    ("reduce_uri" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27022 27026])
                            ("uri" variable nil (reparse-symbol function_parameters) [27028 27031])
                            ("default_port" variable nil (reparse-symbol function_parameters) [27033 27045]))                          
                        :documentation "Accept authority or URI and extract only the authority and path.")
                        (reparse-symbol indented_block_body) [27007 27816])
                    ("is_suburi" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27835 27839])
                            ("base" variable nil (reparse-symbol function_parameters) [27841 27845])
                            ("test" variable nil (reparse-symbol function_parameters) [27847 27851]))                          
                        :documentation "Check if test is below base in a URI tree

        Both args must be URIs in reduced form.
        ")
                        (reparse-symbol indented_block_body) [27821 28218]))                  
                :type "class")
                nil [26066 28218])
            ("HTTPPasswordMgrWithDefaultRealm" type
               (:superclasses ("HTTPPasswordMgr")
                :members 
                  ( ("find_user_password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28304 28308])
                            ("realm" variable nil (reparse-symbol function_parameters) [28310 28315])
                            ("authuri" variable nil (reparse-symbol function_parameters) [28317 28324]))                          )
                        (reparse-symbol indented_block_body) [28281 28603]))                  
                :type "class")
                nil [28220 28603])
            ("AbstractBasicAuthHandler" type
               (:members 
                  ( ("rx" variable nil (reparse-symbol indented_block_body) [28886 28984])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [29202 29272])
                            ("self" variable nil (reparse-symbol indented_block_body) [29280 29306])
                            ("self" variable nil (reparse-symbol indented_block_body) [29315 29359])
                            ("self" variable nil (reparse-symbol indented_block_body) [29368 29384]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29168 29172])
                            ("password_mgr" variable nil (reparse-symbol function_parameters) [29174 29186]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [29155 29385])
                    ("reset_retry_count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29412 29416]))                          )
                        (reparse-symbol indented_block_body) [29390 29444])
                    ("http_error_auth_reqed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29475 29479])
                            ("authreq" variable nil (reparse-symbol function_parameters) [29481 29488])
                            ("host" variable nil (reparse-symbol function_parameters) [29490 29494])
                            ("req" variable nil (reparse-symbol function_parameters) [29496 29499])
                            ("headers" variable nil (reparse-symbol function_parameters) [29501 29508]))                          )
                        (reparse-symbol indented_block_body) [29449 30222])
                    ("retry_http_basic_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30253 30257])
                            ("host" variable nil (reparse-symbol function_parameters) [30259 30263])
                            ("req" variable nil (reparse-symbol function_parameters) [30265 30268])
                            ("realm" variable nil (reparse-symbol function_parameters) [30270 30275]))                          )
                        (reparse-symbol indented_block_body) [30227 30725]))                  
                :type "class")
                nil [28605 30725])
            ("HTTPBasicAuthHandler" type
               (:superclasses ("AbstractBasicAuthHandler" "BaseHandler")
                :members 
                  ( ("auth_header" variable nil (reparse-symbol indented_block_body) [30799 30828])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30853 30857])
                            ("req" variable nil (reparse-symbol function_parameters) [30859 30862])
                            ("fp" variable nil (reparse-symbol function_parameters) [30864 30866])
                            ("code" variable nil (reparse-symbol function_parameters) [30868 30872])
                            ("msg" variable nil (reparse-symbol function_parameters) [30874 30877])
                            ("headers" variable nil (reparse-symbol function_parameters) [30879 30886]))                          )
                        (reparse-symbol indented_block_body) [30834 31110]))                  
                :type "class")
                nil [30727 31110])
            ("ProxyBasicAuthHandler" type
               (:superclasses ("AbstractBasicAuthHandler" "BaseHandler")
                :members 
                  ( ("auth_header" variable nil (reparse-symbol indented_block_body) [31185 31220])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31245 31249])
                            ("req" variable nil (reparse-symbol function_parameters) [31251 31254])
                            ("fp" variable nil (reparse-symbol function_parameters) [31256 31258])
                            ("code" variable nil (reparse-symbol function_parameters) [31260 31264])
                            ("msg" variable nil (reparse-symbol function_parameters) [31266 31269])
                            ("headers" variable nil (reparse-symbol function_parameters) [31271 31278]))                          )
                        (reparse-symbol indented_block_body) [31226 31760]))                  
                :type "class")
                nil [31112 31760])
            ("randombytes" function
               (:documentation "Return n random bytes."
                :arguments 
                  ( ("n" variable nil (reparse-symbol function_parameters) [31778 31779]))                  )
                nil [31762 32249])
            ("AbstractDigestAuthHandler" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [32666 32724])
                            ("self" variable nil (reparse-symbol indented_block_body) [32732 32752])
                            ("self" variable nil (reparse-symbol indented_block_body) [32761 32805])
                            ("self" variable nil (reparse-symbol indented_block_body) [32814 32830])
                            ("self" variable nil (reparse-symbol indented_block_body) [32839 32859])
                            ("self" variable nil (reparse-symbol indented_block_body) [32868 32890]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32638 32642])
                            ("passwd" variable nil (reparse-symbol function_parameters) [32644 32650]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [32625 32891])
                    ("reset_retry_count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32918 32922]))                          )
                        (reparse-symbol indented_block_body) [32896 32950])
                    ("http_error_auth_reqed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [32981 32985])
                            ("auth_header" variable nil (reparse-symbol function_parameters) [32987 32998])
                            ("host" variable nil (reparse-symbol function_parameters) [33000 33004])
                            ("req" variable nil (reparse-symbol function_parameters) [33006 33009])
                            ("headers" variable nil (reparse-symbol function_parameters) [33011 33018]))                          )
                        (reparse-symbol indented_block_body) [32955 33754])
                    ("retry_http_digest_auth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33786 33790])
                            ("req" variable nil (reparse-symbol function_parameters) [33792 33795])
                            ("auth" variable nil (reparse-symbol function_parameters) [33797 33801]))                          )
                        (reparse-symbol indented_block_body) [33759 34267])
                    ("get_cnonce" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34287 34291])
                            ("nonce" variable nil (reparse-symbol function_parameters) [34293 34298]))                          )
                        (reparse-symbol indented_block_body) [34272 34819])
                    ("get_authorization" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [34846 34850])
                            ("req" variable nil (reparse-symbol function_parameters) [34852 34855])
                            ("chal" variable nil (reparse-symbol function_parameters) [34857 34861]))                          )
                        (reparse-symbol indented_block_body) [34824 36972])
                    ("get_algorithm_impls" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37001 37005])
                            ("algorithm" variable nil (reparse-symbol function_parameters) [37007 37016]))                          )
                        (reparse-symbol indented_block_body) [36977 37456])
                    ("get_entity_digest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37483 37487])
                            ("data" variable nil (reparse-symbol function_parameters) [37489 37493])
                            ("chal" variable nil (reparse-symbol function_parameters) [37495 37499]))                          )
                        (reparse-symbol indented_block_body) [37461 37556]))                  
                :type "class")
                nil [32250 37556])
            ("HTTPDigestAuthHandler" type
               (:documentation "An authentication protocol defined by RFC 2069

    Digest authentication improves on basic authentication because it
    does not transmit passwords in the clear.
    "
                :superclasses ("BaseHandler" "AbstractDigestAuthHandler")
                :members 
                  ( ("auth_header" variable nil (reparse-symbol indented_block_body) [37811 37840])
                    ("handler_order" variable nil (reparse-symbol indented_block_body) [37845 37864])
                    ("http_error_401" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37910 37914])
                            ("req" variable nil (reparse-symbol function_parameters) [37916 37919])
                            ("fp" variable nil (reparse-symbol function_parameters) [37921 37923])
                            ("code" variable nil (reparse-symbol function_parameters) [37925 37929])
                            ("msg" variable nil (reparse-symbol function_parameters) [37931 37934])
                            ("headers" variable nil (reparse-symbol function_parameters) [37936 37943]))                          )
                        (reparse-symbol indented_block_body) [37891 38182]))                  
                :type "class")
                nil [37558 38182])
            ("ProxyDigestAuthHandler" type
               (:superclasses ("BaseHandler" "AbstractDigestAuthHandler")
                :members 
                  ( ("auth_header" variable nil (reparse-symbol indented_block_body) [38259 38294])
                    ("handler_order" variable nil (reparse-symbol indented_block_body) [38299 38318])
                    ("http_error_407" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38364 38368])
                            ("req" variable nil (reparse-symbol function_parameters) [38370 38373])
                            ("fp" variable nil (reparse-symbol function_parameters) [38375 38377])
                            ("code" variable nil (reparse-symbol function_parameters) [38379 38383])
                            ("msg" variable nil (reparse-symbol function_parameters) [38385 38388])
                            ("headers" variable nil (reparse-symbol function_parameters) [38390 38397]))                          )
                        (reparse-symbol indented_block_body) [38345 38612]))                  
                :type "class")
                nil [38184 38612])
            ("AbstractHTTPHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [38700 38729]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38671 38675])
                            ("debuglevel" variable nil (reparse-symbol function_parameters) [38677 38687]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [38658 38730])
                    ("set_http_debuglevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38759 38763])
                            ("level" variable nil (reparse-symbol function_parameters) [38765 38770]))                          )
                        (reparse-symbol indented_block_body) [38735 38806])
                    ("do_request_" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [38827 38831])
                            ("request" variable nil (reparse-symbol function_parameters) [38833 38840]))                          )
                        (reparse-symbol indented_block_body) [38811 39868])
                    ("do_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [39885 39889])
                            ("http_class" variable nil (reparse-symbol function_parameters) [39891 39901])
                            ("req" variable nil (reparse-symbol function_parameters) [39903 39906]))                          
                        :documentation "Return an addinfourl object for the request, using http_class.

        http_class must implement the HTTPConnection API from httplib.
        The addinfourl return value is a file-like object.  It also
        has methods and attributes including:
            - info(): return a mimetools.Message object for the headers
            - geturl(): return the original request URL
            - code: HTTP status code
        ")
                        (reparse-symbol indented_block_body) [39873 42481]))                  
                :type "class")
                nil [38613 42481])
            ("HTTPHandler" type
               (:superclasses ("AbstractHTTPHandler")
                :members 
                  ( ("http_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42542 42546])
                            ("req" variable nil (reparse-symbol function_parameters) [42548 42551]))                          )
                        (reparse-symbol indented_block_body) [42528 42611])
                    ("http_request" variable nil (reparse-symbol indented_block_body) [42616 42662]))                  
                :type "class")
                nil [42483 42663])
            ("if" code nil nil [42664 42894])
            ("HTTPCookieProcessor" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("cookielib" include nil (reparse-symbol indented_block_body) [42983 42999])
                            ("if" code nil (reparse-symbol indented_block_body) [43008 43076])
                            ("self" variable nil (reparse-symbol indented_block_body) [43084 43110]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42952 42956])
                            ("cookiejar" variable nil (reparse-symbol function_parameters) [42958 42967]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [42939 43111])
                    ("http_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43133 43137])
                            ("request" variable nil (reparse-symbol function_parameters) [43139 43146]))                          )
                        (reparse-symbol indented_block_body) [43116 43222])
                    ("http_response" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43245 43249])
                            ("request" variable nil (reparse-symbol function_parameters) [43251 43258])
                            ("response" variable nil (reparse-symbol function_parameters) [43260 43268]))                          )
                        (reparse-symbol indented_block_body) [43227 43353])
                    ("https_request" variable nil (reparse-symbol indented_block_body) [43358 43386])
                    ("https_response" variable nil (reparse-symbol indented_block_body) [43391 43421]))                  
                :type "class")
                nil [42895 43422])
            ("UnknownHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("unknown_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43479 43483])
                            ("req" variable nil (reparse-symbol function_parameters) [43485 43488]))                          )
                        (reparse-symbol indented_block_body) [43462 43575]))                  
                :type "class")
                nil [43423 43575])
            ("parse_keqv_list" function
               (:documentation "Parse list of key=value strings where keys are not duplicated."
                :arguments 
                  ( ("l" variable nil (reparse-symbol function_parameters) [43596 43597]))                  )
                nil [43576 43845])
            ("parse_http_list" function
               (:documentation "Parse lists as described by RFC 2068 Section 2.

    In particular, parse comma-separated lists where the elements of
    the list may include quoted-strings.  A quoted-string could
    contain a comma.  A non-quoted string could have quotes in the
    middle.  Neither commas nor quotes count if they are escaped.
    Only double-quotes count, not single-quotes.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [43866 43867]))                  )
                nil [43846 46958])
            ("FTPHandler" type
               (:superclasses ("BaseHandler")
                :members 
                  ( ("ftp_open" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [47007 47011])
                            ("req" variable nil (reparse-symbol function_parameters) [47013 47016]))                          )
                        (reparse-symbol indented_block_body) [46994 48877])
                    ("connect_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [48898 48902])
                            ("user" variable nil (reparse-symbol function_parameters) [48904 48908])
                            ("passwd" variable nil (reparse-symbol function_parameters) [48910 48916])
                            ("host" variable nil (reparse-symbol function_parameters) [48918 48922])
                            ("port" variable nil (reparse-symbol function_parameters) [48924 48928])
                            ("dirs" variable nil (reparse-symbol function_parameters) [48930 48934])
                            ("timeout" variable nil (reparse-symbol function_parameters) [48936 48943]))                          )
                        (reparse-symbol indented_block_body) [48882 49064]))                  
                :type "class")
                nil [46959 49064])
            ("CacheFTPHandler" type
               (:superclasses ("FTPHandler")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [49242 49257])
                            ("self" variable nil (reparse-symbol indented_block_body) [49266 49283])
                            ("self" variable nil (reparse-symbol indented_block_body) [49292 49308])
                            ("self" variable nil (reparse-symbol indented_block_body) [49317 49332])
                            ("self" variable nil (reparse-symbol indented_block_body) [49341 49360]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49227 49231]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [49214 49361])
                    ("setTimeout" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49381 49385])
                            ("t" variable nil (reparse-symbol function_parameters) [49387 49388]))                          )
                        (reparse-symbol indented_block_body) [49366 49414])
                    ("setMaxConns" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49435 49439])
                            ("m" variable nil (reparse-symbol function_parameters) [49441 49442]))                          )
                        (reparse-symbol indented_block_body) [49419 49472])
                    ("connect_ftp" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49493 49497])
                            ("user" variable nil (reparse-symbol function_parameters) [49499 49503])
                            ("passwd" variable nil (reparse-symbol function_parameters) [49505 49511])
                            ("host" variable nil (reparse-symbol function_parameters) [49513 49517])
                            ("port" variable nil (reparse-symbol function_parameters) [49519 49523])
                            ("dirs" variable nil (reparse-symbol function_parameters) [49525 49529])
                            ("timeout" variable nil (reparse-symbol function_parameters) [49531 49538]))                          )
                        (reparse-symbol indented_block_body) [49477 49895])
                    ("check_cache" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [49916 49920]))                          )
                        (reparse-symbol indented_block_body) [49900 50573]))                  
                :type "class")
                nil [49065 50573]))          
      :file "urllib2.py"
      :pointmax 50573
      :fsize 50572
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax '((INDENT_BLOCK 46877 . 46909) (NEWLINE 46800 . 46801) (COLON 46799 . 46800)))
    (semanticdb-table "copy_reg.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Helper to provide extensibility for pickle/cPickle.

This is only useful to add pickle support for extension types defined in
C, not for instances of user-defined classes.
\"\"\"" code nil nil [1 179])
            ("types" include nil nil [181 222])
            ("__all__" variable nil nil [224 332])
            ("dispatch_table" variable nil nil [334 353])
            ("pickle" function (:arguments 
              ( ("ob_type" variable nil (reparse-symbol function_parameters) [366 373])
                ("pickle_function" variable nil (reparse-symbol function_parameters) [375 390])
                ("constructor_ob" variable nil (reparse-symbol function_parameters) [392 406]))              ) nil [355 886])
            ("constructor" function (:arguments 
              ( ("object" variable nil (reparse-symbol function_parameters) [903 909]))              ) nil [887 1009])
            ("try" code nil nil [1068 1233])
            ("_reconstructor" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [1295 1298])
                ("base" variable nil (reparse-symbol function_parameters) [1300 1304])
                ("state" variable nil (reparse-symbol function_parameters) [1306 1311]))              ) nil [1276 1518])
            ("_HEAPTYPE" code nil nil [1519 1535])
            ("_reduce_ex" function
               (:parent "dummy"
                :arguments 
                  ( ("self" variable nil (reparse-symbol function_parameters) [1614 1618])
                    ("proto" variable nil (reparse-symbol function_parameters) [1620 1625]))                  )
                nil [1599 2561])
            ("__newobj__" function (:arguments 
              ( ("cls" variable nil (reparse-symbol function_parameters) [2616 2619])
                ("args" variable nil (reparse-symbol function_parameters) [2621 2626]))              ) nil [2601 2664])
            ("_slotnames" function
               (:documentation "Return a list of slot names for a given class.

    This needs to find slots defined by the class and its bases, so we
    can't simply return the __slots__ attribute.  We must walk down
    the Method Resolution Order and concatenate the __slots__ of each
    class found there.  (This assumes classes don't modify their
    __slots__ attribute to misrepresent their slots after the class is
    defined.)
    "
                :arguments 
                  ( ("cls" variable nil (reparse-symbol function_parameters) [2680 2683]))                  )
                nil [2665 4346])
            ("_extension_registry" variable nil nil [4828 4852])
            ("_inverted_registry" variable nil nil [4882 4905])
            ("_extension_cache" variable nil nil [4936 4957])
            ("add_extension" function
               (:documentation "Register an extension code."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5132 5138])
                    ("name" variable nil (reparse-symbol function_parameters) [5140 5144])
                    ("code" variable nil (reparse-symbol function_parameters) [5146 5150]))                  )
                nil [5114 5861])
            ("remove_extension" function
               (:documentation "Unregister an extension code.  For testing only."
                :arguments 
                  ( ("module" variable nil (reparse-symbol function_parameters) [5883 5889])
                    ("name" variable nil (reparse-symbol function_parameters) [5891 5895])
                    ("code" variable nil (reparse-symbol function_parameters) [5897 5901]))                  )
                nil [5862 6321])
            ("clear_extension_cache" function nil nil [6322 6380]))          
      :file "copy_reg.py"
      :pointmax 6801
      :fsize 6800
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sre_compile.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [225 262])
            ("sys" include nil nil [264 280])
            ("_sre" include nil nil [264 280])
            ("sre_parse" include nil nil [281 297])
            ("sre_constants" include nil nil [298 325])
            ("assert" code nil nil [327 376])
            ("if" code nil nil [378 453])
            ("_identityfunction" function (:arguments 
              ( ("x" variable nil (reparse-symbol function_parameters) [476 477]))              ) nil [454 493])
            ("set" function (:arguments 
              ( ("seq" variable nil (reparse-symbol function_parameters) [502 505]))              ) nil [494 573])
            ("_LITERAL_CODES" variable nil nil [574 618])
            ("_REPEATING_CODES" variable nil nil [619 675])
            ("_SUCCESS_CODES" variable nil nil [676 716])
            ("_ASSERT_CODES" variable nil nil [717 758])
            ("_compile" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [773 777])
                ("pattern" variable nil (reparse-symbol function_parameters) [779 786])
                ("flags" variable nil (reparse-symbol function_parameters) [788 793]))              ) nil [760 6092])
            ("_compile_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [6114 6121])
                ("flags" variable nil (reparse-symbol function_parameters) [6123 6128])
                ("code" variable nil (reparse-symbol function_parameters) [6130 6134])
                ("fixup" variable nil (reparse-symbol function_parameters) [6136 6141]))              ) nil [6093 6999])
            ("_optimize_charset" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [7022 7029])
                ("fixup" variable nil (reparse-symbol function_parameters) [7031 7036]))              ) nil [7000 8417])
            ("_mk_bitmap" function (:arguments 
              ( ("bits" variable nil (reparse-symbol function_parameters) [8433 8437]))              ) nil [8418 8749])
            ("_optimize_unicode" function (:arguments 
              ( ("charset" variable nil (reparse-symbol function_parameters) [10092 10099])
                ("fixup" variable nil (reparse-symbol function_parameters) [10101 10106]))              ) nil [10070 11661])
            ("_simple" function (:arguments 
              ( ("av" variable nil (reparse-symbol function_parameters) [11674 11676]))              ) nil [11662 11882])
            ("_compile_info" function (:arguments 
              ( ("code" variable nil (reparse-symbol function_parameters) [11901 11905])
                ("pattern" variable nil (reparse-symbol function_parameters) [11907 11914])
                ("flags" variable nil (reparse-symbol function_parameters) [11916 11921]))              ) nil [11883 15281])
            ("try" code nil nil [15282 15403])
            ("isstring" function (:arguments 
              ( ("obj" variable nil (reparse-symbol function_parameters) [15417 15420]))              ) nil [15404 15517])
            ("_code" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15528 15529])
                ("flags" variable nil (reparse-symbol function_parameters) [15531 15536]))              ) nil [15518 15763])
            ("compile" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [15776 15777])
                ("flags" variable nil (reparse-symbol function_parameters) [15779 15784]))              ) nil [15764 16508]))          
      :file "sre_compile.py"
      :pointmax 16508
      :fsize 16507
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sre_parse.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [240 277])
            ("sys" include nil nil [345 355])
            ("sre_constants" include nil nil [357 384])
            ("set" function (:arguments 
              ( ("seq" variable nil (reparse-symbol function_parameters) [394 397]))              ) nil [386 465])
            ("SPECIAL_CHARS" variable nil nil [466 497])
            ("REPEAT_CHARS" variable nil nil [498 519])
            ("DIGITS" variable nil nil [521 547])
            ("OCTDIGITS" variable nil nil [549 576])
            ("HEXDIGITS" variable nil nil [577 618])
            ("WHITESPACE" variable nil nil [620 651])
            ("ESCAPES" variable nil nil [653 929])
            ("CATEGORIES" variable nil nil [931 1407])
            ("FLAGS" variable nil nil [1409 1651])
            ("Pattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [1763 1777])
                            ("self" variable nil (reparse-symbol indented_block_body) [1786 1800])
                            ("self" variable nil (reparse-symbol indented_block_body) [1809 1824])
                            ("self" variable nil (reparse-symbol indented_block_body) [1833 1852]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1748 1752]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [1735 1853])
                    ("opengroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1871 1875])
                            ("name" variable nil (reparse-symbol function_parameters) [1877 1881]))                          )
                        (reparse-symbol indented_block_body) [1857 2294])
                    ("closegroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2313 2317])
                            ("gid" variable nil (reparse-symbol function_parameters) [2319 2322]))                          )
                        (reparse-symbol indented_block_body) [2298 2355])
                    ("checkgroup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2374 2378])
                            ("gid" variable nil (reparse-symbol function_parameters) [2380 2383]))                          )
                        (reparse-symbol indented_block_body) [2359 2444]))                  
                :type "class")
                nil [1653 2444])
            ("SubPattern" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2556 2578])
                            ("if" code nil (reparse-symbol indented_block_body) [2587 2626])
                            ("self" variable nil (reparse-symbol indented_block_body) [2634 2650])
                            ("self" variable nil (reparse-symbol indented_block_body) [2659 2676]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2521 2525])
                            ("pattern" variable nil (reparse-symbol function_parameters) [2527 2534])
                            ("data" variable nil (reparse-symbol function_parameters) [2536 2540]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2508 2677])
                    ("dump" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2690 2694])
                            ("level" variable nil (reparse-symbol function_parameters) [2696 2701]))                          )
                        (reparse-symbol indented_block_body) [2681 3637])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3654 3658]))                          )
                        (reparse-symbol indented_block_body) [3641 3692])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3708 3712]))                          )
                        (reparse-symbol indented_block_body) [3696 3745])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3765 3769])
                            ("index" variable nil (reparse-symbol function_parameters) [3771 3776]))                          )
                        (reparse-symbol indented_block_body) [3749 3808])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3828 3832])
                            ("index" variable nil (reparse-symbol function_parameters) [3834 3839]))                          )
                        (reparse-symbol indented_block_body) [3812 3973])
                    ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3993 3997])
                            ("index" variable nil (reparse-symbol function_parameters) [3999 4004])
                            ("code" variable nil (reparse-symbol function_parameters) [4006 4010]))                          )
                        (reparse-symbol indented_block_body) [3977 4045])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4060 4064])
                            ("index" variable nil (reparse-symbol function_parameters) [4066 4071])
                            ("code" variable nil (reparse-symbol function_parameters) [4073 4077]))                          )
                        (reparse-symbol indented_block_body) [4049 4118])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4133 4137])
                            ("code" variable nil (reparse-symbol function_parameters) [4139 4143]))                          )
                        (reparse-symbol indented_block_body) [4122 4177])
                    ("getwidth" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4194 4198]))                          )
                        (reparse-symbol indented_block_body) [4181 5420]))                  
                :type "class")
                nil [2445 5420])
            ("Tokenizer" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [5478 5498])
                            ("self" variable nil (reparse-symbol indented_block_body) [5507 5521])
                            ("self" code nil (reparse-symbol indented_block_body) [5530 5543]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5455 5459])
                            ("string" variable nil (reparse-symbol function_parameters) [5461 5467]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [5442 5544])
                    ("raise" code nil (reparse-symbol indented_block_body) [7795 7841]))                  
                :type "class")
                nil [5421 7842])
            ("_escape" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [7855 7861])
                ("escape" variable nil (reparse-symbol function_parameters) [7863 7869])
                ("state" variable nil (reparse-symbol function_parameters) [7871 7876]))              ) nil [7843 9535])
            ("_parse_sub" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [9551 9557])
                ("state" variable nil (reparse-symbol function_parameters) [9559 9564])
                ("nested" variable nil (reparse-symbol function_parameters) [9566 9572]))              ) nil [9536 11161])
            ("_parse_sub_cond" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11182 11188])
                ("state" variable nil (reparse-symbol function_parameters) [11190 11195])
                ("condgroup" variable nil (reparse-symbol function_parameters) [11197 11206]))              ) nil [11162 11680])
            ("_PATTERNENDERS" variable nil nil [11681 11707])
            ("_ASSERTCHARS" variable nil nil [11708 11733])
            ("_LOOKBEHINDASSERTCHARS" variable nil nil [11734 11768])
            ("_REPEATCODES" variable nil nil [11769 11813])
            ("_parse" function (:arguments 
              ( ("source" variable nil (reparse-symbol function_parameters) [11826 11832])
                ("state" variable nil (reparse-symbol function_parameters) [11834 11839]))              ) nil [11815 26473])
            ("expand_template" function (:arguments 
              ( ("template" variable nil (reparse-symbol function_parameters) [26494 26502])
                ("match" variable nil (reparse-symbol function_parameters) [26504 26509]))              ) nil [26474 26879]))          
      :file "sre_parse.py"
      :pointmax 26879
      :fsize 26878
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax '((ASSIGN 26186 . 26187) (INDENT_BLOCK 7778 . 7791) (NEWLINE 7777 . 7778) (COLON 7776 . 7777)))
    (semanticdb-table "posixpath.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Common operations on Posix pathnames.

Instead of importing this module directly, import os and refer to
this module as os.path.  The \"os.path\" name is an alias for this
module on Posix systems; on other systems (e.g. Mac, Windows),
os.path provides the same operations in a manner specific to that
platform, and is an alias to another module (e.g. macpath, ntpath).

Some of this can actually be useful on non-Posix systems too, e.g.
for manipulation of the pathname component of URLs.
\"\"\"" code nil nil [1 494])
            ("os" include nil nil [496 505])
            ("stat" include nil nil [506 517])
            ("genericpath" include nil nil [518 536])
            ("warnings" include nil nil [537 552])
            ("genericpath" include nil nil [553 578])
            ("__all__" variable nil nil [580 1068])
            ("curdir" variable nil nil [1130 1142])
            ("pardir" variable nil nil [1143 1156])
            ("extsep" variable nil nil [1157 1169])
            ("sep" variable nil nil [1170 1179])
            ("pathsep" variable nil nil [1180 1193])
            ("defpath" variable nil nil [1194 1220])
            ("altsep" variable nil nil [1221 1234])
            ("devnull" variable nil nil [1235 1256])
            ("normcase" function
               (:documentation "Normalize case of pathname.  Has no effect under Posix"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1536 1537]))                  )
                nil [1523 1618])
            ("isabs" function
               (:documentation "Test whether a path is absolute"
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1717 1718]))                  )
                nil [1707 1792])
            ("join" function
               (:documentation "Join two or more pathname components, inserting '/' as needed.
    If any component is an absolute path, all previous path components
    will be discarded."
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1943 1944])
                    ("p" variable nil (reparse-symbol function_parameters) [1946 1948]))                  )
                nil [1934 2326])
            ("split" function
               (:documentation "Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is
    everything after the final slash.  Either part may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [2582 2583]))                  )
                nil [2572 2873])
            ("splitext" function (:arguments 
              ( ("p" variable nil (reparse-symbol function_parameters) [3094 3095]))              ) nil [3081 3155])
            ("splitext" variable nil nil [3155 3203])
            ("splitdrive" function
               (:documentation "Split a pathname into drive and path. On Posix, drive is always
    empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3358 3359]))                  )
                nil [3343 3464])
            ("basename" function
               (:documentation "Returns the final component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3549 3550]))                  )
                nil [3536 3647])
            ("dirname" function
               (:documentation "Returns the directory component of a pathname"
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [3730 3731]))                  )
                nil [3718 3919])
            ("islink" function
               (:documentation "Test whether a path is a symbolic link"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [4035 4039]))                  )
                nil [4024 4224])
            ("lexists" function
               (:documentation "Test whether a path exists.  Returns True for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [4295 4299]))                  )
                nil [4283 4475])
            ("samefile" function
               (:documentation "Test whether two pathnames reference the same actual file"
                :arguments 
                  ( ("f1" variable nil (reparse-symbol function_parameters) [4545 4547])
                    ("f2" variable nil (reparse-symbol function_parameters) [4549 4551]))                  )
                nil [4532 4692])
            ("sameopenfile" function
               (:documentation "Test whether two open file objects reference the same file"
                :arguments 
                  ( ("fp1" variable nil (reparse-symbol function_parameters) [4813 4816])
                    ("fp2" variable nil (reparse-symbol function_parameters) [4818 4821]))                  )
                nil [4796 4967])
            ("samestat" function
               (:documentation "Test whether two stat buffers reference the same file"
                :arguments 
                  ( ("s1" variable nil (reparse-symbol function_parameters) [5071 5073])
                    ("s2" variable nil (reparse-symbol function_parameters) [5075 5077]))                  )
                nil [5058 5218])
            ("ismount" function
               (:documentation "Test whether a path is a mount point"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [5336 5340]))                  )
                nil [5324 5913])
            ("walk" function
               (:documentation "Directory tree walk with callback function.

    For each directory in the directory tree rooted at top (including top
    itself, but excluding '.' and '..'), call func(arg, dirname, fnames).
    dirname is the name of the directory, and fnames a list of the names of
    the files and subdirectories in dirname (excluding '.' and '..').  func
    may modify the fnames list in-place (e.g. via del or slice assignment),
    and walk will only recurse into the subdirectories whose names remain in
    fnames; this can be used to implement a filter, or to impose a specific
    order of visiting.  No semantics are defined for, or required of, arg,
    beyond that arg is always passed to func.  It can be used, e.g., to pass
    a filename pattern, or a mutable object designed to accumulate
    statistics.  Passing None for arg is common."
                :arguments 
                  ( ("top" variable nil (reparse-symbol function_parameters) [6311 6314])
                    ("func" variable nil (reparse-symbol function_parameters) [6316 6320])
                    ("arg" variable nil (reparse-symbol function_parameters) [6322 6325]))                  )
                nil [6302 7613])
            ("expanduser" function
               (:documentation "Expand ~ and ~user constructions.  If user or $HOME is unknown,
    do nothing."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [8104 8108]))                  )
                nil [8089 8749])
            ("_varprog" variable nil nil [8910 8925])
            ("expandvars" function
               (:documentation "Expand shell variables of form $var and ${var}.  Unknown variables
    are left unchanged."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [8942 8946]))                  )
                nil [8927 9646])
            ("normpath" function
               (:documentation "Normalize path, eliminating double slashes, etc."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [9834 9838]))                  )
                nil [9821 10788])
            ("abspath" function
               (:documentation "Return an absolute path."
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [10802 10806]))                  )
                nil [10790 11038])
            ("realpath" function
               (:documentation "Return the canonical path of the specified filename, eliminating any
symbolic links encountered in the path."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [11140 11148]))                  )
                nil [11127 11902])
            ("_resolve_link" function
               (:documentation "Internal helper function.  Takes a path and follows symlinks
    until we either arrive at something that isn't a symlink, or
    encounter a path we've seen before (meaning that there's a loop).
    "
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [11922 11926]))                  )
                nil [11904 12601])
            ("supports_unicode_filenames" variable nil nil [12602 12636])
            ("relpath" function
               (:documentation "Return a relative version of a path"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [12650 12654])
                    ("start" variable nil (reparse-symbol function_parameters) [12656 12661]))                  )
                nil [12638 13120]))          
      :file "posixpath.py"
      :pointmax 13120
      :fsize 13119
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax '((NAME 9948 . 9953) (IF 9974 . 9976) (ELSE 10003 . 10007)))
    (semanticdb-table "string.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"A collection of string operations (most are no longer used).

Warning: most of the code you see here isn't normally used nowadays.
Beginning with Python 1.6, many of these functions are implemented as
methods on the standard string object. They used to be implemented by
a built-in module called strop, but strop is now obsolete itself.

Public module variables:

whitespace -- a string containing all characters considered whitespace
lowercase -- a string containing all characters considered lowercase letters
uppercase -- a string containing all characters considered uppercase letters
letters -- a string containing all characters considered letters
digits -- a string containing all characters considered decimal digits
hexdigits -- a string containing all characters considered hexadecimal digits
octdigits -- a string containing all characters considered octal digits
punctuation -- a string containing all characters considered punctuation
printable -- a string containing all characters considered printable

\"\"\"" code nil nil [1 1025])
            ("whitespace" variable nil nil [1083 1109])
            ("lowercase" variable nil nil [1110 1150])
            ("uppercase" variable nil nil [1151 1191])
            ("letters" code nil nil [1192 1223])
            ("ascii_lowercase" variable nil nil [1224 1251])
            ("ascii_uppercase" variable nil nil [1252 1279])
            ("ascii_letters" code nil nil [1280 1329])
            ("digits" variable nil nil [1330 1351])
            ("hexdigits" code nil nil [1352 1392])
            ("octdigits" variable nil nil [1393 1415])
            ("punctuation" variable nil nil [1416 1468])
            ("printable" code nil nil [1469 1524])
            ("l" variable nil nil [1603 1628])
            ("_idmap" variable nil nil [1629 1653])
            ("del" code nil nil [1654 1659])
            ("capwords" function
               (:documentation "capwords(s [,sep]) -> string

    Split the argument into words using split, capitalize each
    word using capitalize, and join the capitalized words using
    join.  If the optional second argument sep is absent or None,
    runs of whitespace characters are replaced by a single space
    and leading and trailing whitespace are removed, otherwise
    sep is used to split and join the words.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1797 1798])
                    ("sep" variable nil (reparse-symbol function_parameters) [1800 1803]))                  )
                nil [1784 2290])
            ("_idmapL" variable nil nil [2325 2339])
            ("maketrans" function
               (:documentation "maketrans(frm, to) -> string

    Return a translation table (a string of 256 bytes long)
    suitable for use in string.translate.  The strings frm and to
    must be of the same length.

    "
                :arguments 
                  ( ("fromstr" variable nil (reparse-symbol function_parameters) [2354 2361])
                    ("tostr" variable nil (reparse-symbol function_parameters) [2363 2368]))                  )
                nil [2340 2890])
            ("re" include nil nil [2962 2978])
            ("_multimap" type
               (:documentation "Helper class for combining multiple mappings.

    Used by .{safe_,}substitute() to combine the mapping and keyword
    arguments.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3195 3218])
                            ("self" variable nil (reparse-symbol indented_block_body) [3227 3254]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3160 3164])
                            ("primary" variable nil (reparse-symbol function_parameters) [3166 3173])
                            ("secondary" variable nil (reparse-symbol function_parameters) [3175 3184]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3147 3255])
                    ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3276 3280])
                            ("key" variable nil (reparse-symbol function_parameters) [3282 3285]))                          )
                        (reparse-symbol indented_block_body) [3260 3404]))                  
                :type "class")
                nil [2980 3404])
            ("_TemplateMetaclass" type
               (:superclasses ("type")
                :members 
                  ( ("pattern" variable nil (reparse-symbol indented_block_body) [3442 3762])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3813 3870])
                            ("if" code nil (reparse-symbol indented_block_body) [3879 4113])
                            ("cls" variable nil (reparse-symbol indented_block_body) [4121 4185]))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3781 3784])
                            ("name" variable nil (reparse-symbol function_parameters) [3786 3790])
                            ("bases" variable nil (reparse-symbol function_parameters) [3792 3797])
                            ("dct" variable nil (reparse-symbol function_parameters) [3799 3802]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3768 4186]))                  
                :type "class")
                nil [3406 4186])
            ("Template" type
               (:documentation "A string class for supporting $-substitutions."
                :members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [4265 4299])
                    ("delimiter" variable nil (reparse-symbol indented_block_body) [4305 4320])
                    ("idpattern" variable nil (reparse-symbol indented_block_body) [4325 4356])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [4400 4424]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4375 4379])
                            ("template" variable nil (reparse-symbol function_parameters) [4381 4389]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4362 4425])
                    ("_invalid" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4510 4514])
                            ("mo" variable nil (reparse-symbol function_parameters) [4516 4518]))                          )
                        (reparse-symbol indented_block_body) [4497 4884])
                    ("substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4904 4908])
                            ("args" variable nil (reparse-symbol function_parameters) [4910 4915])
                            ("kws" variable nil (reparse-symbol function_parameters) [4917 4922]))                          )
                        (reparse-symbol indented_block_body) [4889 5933])
                    ("safe_substitute" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5958 5962])
                            ("args" variable nil (reparse-symbol function_parameters) [5964 5969])
                            ("kws" variable nil (reparse-symbol function_parameters) [5971 5976]))                          )
                        (reparse-symbol indented_block_body) [5938 7244]))                  
                :type "class")
                nil [4188 7244])
            ("index_error" variable nil nil [7475 7499])
            ("atoi_error" variable nil nil [7500 7523])
            ("atof_error" variable nil nil [7524 7547])
            ("atol_error" variable nil nil [7548 7571])
            ("lower" function
               (:documentation "lower(s) -> string

    Return a copy of the string s converted to lowercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7626 7627]))                  )
                nil [7616 7745])
            ("upper" function
               (:documentation "upper(s) -> string

    Return a copy of the string s converted to uppercase.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7799 7800]))                  )
                nil [7789 7918])
            ("swapcase" function
               (:documentation "swapcase(s) -> string

    Return a copy of the string s with upper case characters
    converted to lowercase and vice versa.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [7973 7974]))                  )
                nil [7960 8144])
            ("strip" function
               (:documentation "strip(s [,chars]) -> string

    Return a copy of the string s with leading and trailing
    whitespace removed.
    If chars is given and not None, remove characters in chars instead.
    If chars is unicode, S will be converted to unicode before stripping.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8200 8201])
                    ("chars" variable nil (reparse-symbol function_parameters) [8203 8208]))                  )
                nil [8190 8517])
            ("lstrip" function
               (:documentation "lstrip(s [,chars]) -> string

    Return a copy of the string s with leading whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8561 8562])
                    ("chars" variable nil (reparse-symbol function_parameters) [8564 8569]))                  )
                nil [8550 8789])
            ("rstrip" function
               (:documentation "rstrip(s [,chars]) -> string

    Return a copy of the string s with trailing whitespace removed.
    If chars is given and not None, remove characters in chars instead.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8834 8835])
                    ("chars" variable nil (reparse-symbol function_parameters) [8837 8842]))                  )
                nil [8823 9063])
            ("split" function
               (:documentation "split(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string.  If maxsplit is given, splits at no more than
    maxsplit places (resulting in at most maxsplit+1 words).  If sep
    is not specified or is None, any whitespace string is a separator.

    (split and splitfields are synonymous)

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9133 9134])
                    ("sep" variable nil (reparse-symbol function_parameters) [9136 9139])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9146 9154]))                  )
                nil [9123 9575])
            ("splitfields" variable nil nil [9575 9594])
            ("rsplit" function
               (:documentation "rsplit(s [,sep [,maxsplit]]) -> list of strings

    Return a list of the words in the string s, using sep as the
    delimiter string, starting at the end of the string and working
    to the front.  If maxsplit is given, at most maxsplit splits are
    done. If sep is not specified or is None, any whitespace string
    is a separator.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [9665 9666])
                    ("sep" variable nil (reparse-symbol function_parameters) [9668 9671])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [9678 9686]))                  )
                nil [9654 10081])
            ("join" function
               (:documentation "join(list [,sep]) -> string

    Return a string composed of the words in list, with
    intervening occurrences of sep.  The default separator is a
    single space.

    (joinfields and join are synonymous)

    "
                :arguments 
                  ( ("words" variable nil (reparse-symbol function_parameters) [10129 10134])
                    ("sep" variable nil (reparse-symbol function_parameters) [10136 10139]))                  )
                nil [10120 10400])
            ("joinfields" variable nil nil [10400 10417])
            ("index" function
               (:documentation "index(s, sub [,start [,end]]) -> int

    Like find but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10476 10477])
                    ("args" variable nil (reparse-symbol function_parameters) [10479 10484]))                  )
                nil [10466 10636])
            ("rindex" function
               (:documentation "rindex(s, sub [,start [,end]]) -> int

    Like rfind but raises ValueError when the substring is not found.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10700 10701])
                    ("args" variable nil (reparse-symbol function_parameters) [10703 10708]))                  )
                nil [10689 10863])
            ("count" function
               (:documentation "count(s, sub[, start[,end]]) -> int

    Return the number of occurrences of substring sub in string
    s[start:end].  Optional arguments start and end are
    interpreted as in slice notation.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10923 10924])
                    ("args" variable nil (reparse-symbol function_parameters) [10926 10931]))                  )
                nil [10913 11171])
            ("find" function
               (:documentation "find(s, sub [,start [,end]]) -> in

    Return the lowest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11222 11223])
                    ("args" variable nil (reparse-symbol function_parameters) [11225 11230]))                  )
                nil [11213 11528])
            ("rfind" function
               (:documentation "rfind(s, sub [,start [,end]]) -> int

    Return the highest index in s where substring sub is found,
    such that sub is contained within s[start,end].  Optional
    arguments start and end are interpreted as in slice notation.

    Return -1 on failure.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11585 11586])
                    ("args" variable nil (reparse-symbol function_parameters) [11588 11593]))                  )
                nil [11575 11895])
            ("_float" variable nil nil [11917 11931])
            ("_int" variable nil nil [11932 11942])
            ("_long" variable nil nil [11943 11955])
            ("atof" function
               (:documentation "atof(s) -> float

    Return the floating point number represented by the string s.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [11992 11993]))                  )
                nil [11983 12117])
            ("atoi" function
               (:documentation "atoi(s [,base]) -> int

    Return the integer represented by the string s in the given
    base, which defaults to 10.  The string s must consist of one
    or more digits, possibly preceded by a sign.  If base is 0, it
    is chosen from the leading characters of s, 0 for octal, 0x or
    0X for hexadecimal.  If base is 16, a preceding 0x or 0X is
    accepted.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12156 12157])
                    ("base" variable nil (reparse-symbol function_parameters) [12160 12164]))                  )
                nil [12147 12577])
            ("atol" function
               (:documentation "atol(s [,base]) -> long

    Return the long integer represented by the string s in the
    given base, which defaults to 10.  The string s must consist
    of one or more digits, possibly preceded by a sign.  If base
    is 0, it is chosen from the leading characters of s, 0 for
    octal, 0x or 0X for hexadecimal.  If base is 16, a preceding
    0x or 0X is accepted.  A trailing L or l is not accepted,
    unless base is 0.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [12621 12622])
                    ("base" variable nil (reparse-symbol function_parameters) [12624 12628]))                  )
                nil [12612 13106])
            ("ljust" function
               (:documentation "ljust(s, width[, fillchar]) -> string

    Return a left-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13142 13143])
                    ("width" variable nil (reparse-symbol function_parameters) [13145 13150])
                    ("args" variable nil (reparse-symbol function_parameters) [13152 13157]))                  )
                nil [13132 13449])
            ("rjust" function
               (:documentation "rjust(s, width[, fillchar]) -> string

    Return a right-justified version of s, in a field of the
    specified width, padded with spaces as needed.  The string is
    never truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13485 13486])
                    ("width" variable nil (reparse-symbol function_parameters) [13488 13493])
                    ("args" variable nil (reparse-symbol function_parameters) [13495 13500]))                  )
                nil [13475 13793])
            ("center" function
               (:documentation "center(s, width[, fillchar]) -> string

    Return a center version of s, in a field of the specified
    width. padded with spaces as needed.  The string is never
    truncated.  If specified the fillchar is used instead of spaces.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [13823 13824])
                    ("width" variable nil (reparse-symbol function_parameters) [13826 13831])
                    ("args" variable nil (reparse-symbol function_parameters) [13833 13838]))                  )
                nil [13812 14124])
            ("zfill" function
               (:documentation "zfill(x, width) -> string

    Pad a numeric string x with zeros on the left, to fill a field
    of the specified width.  The string x is never truncated.

    "
                :arguments 
                  ( ("x" variable nil (reparse-symbol function_parameters) [14336 14337])
                    ("width" variable nil (reparse-symbol function_parameters) [14339 14344]))                  )
                nil [14326 14603])
            ("expandtabs" function
               (:documentation "expandtabs(s [,tabsize]) -> string

    Return a copy of the string s with all tab characters replaced
    by the appropriate number of spaces, depending on the current
    column, and the tabsize (default 8).

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [14718 14719])
                    ("tabsize" variable nil (reparse-symbol function_parameters) [14721 14728]))                  )
                nil [14703 14992])
            ("translate" function
               (:documentation "translate(s,table [,deletions]) -> string

    Return a copy of the string s, where all characters occurring
    in the optional argument deletions are removed, and the
    remaining characters have been mapped through the given
    translation table, which must be a string of length 256.  The
    deletions argument is not allowed for Unicode strings.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15054 15055])
                    ("table" variable nil (reparse-symbol function_parameters) [15057 15062])
                    ("deletions" variable nil (reparse-symbol function_parameters) [15064 15073]))                  )
                nil [15040 15803])
            ("capitalize" function
               (:documentation "capitalize(s) -> string

    Return a copy of the string s with only its first character
    capitalized.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [15873 15874]))                  )
                nil [15858 16025])
            ("replace" function
               (:documentation "replace (str, old, new[, maxsplit]) -> string

    Return a copy of string str with all occurrences of substring
    old replaced by new. If the optional argument maxsplit is
    given, only the first maxsplit occurrences are replaced.

    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [16071 16072])
                    ("old" variable nil (reparse-symbol function_parameters) [16074 16077])
                    ("new" variable nil (reparse-symbol function_parameters) [16079 16082])
                    ("maxsplit" variable nil (reparse-symbol function_parameters) [16084 16092]))                  )
                nil [16059 16391])
            ("try" code nil nil [16633 16838])
            ("Formatter" type
               (:superclasses ("object")
                :members 
                  ( ("format" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17284 17288])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17290 17303])
                            ("args" variable nil (reparse-symbol function_parameters) [17305 17310])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17312 17320]))                          )
                        (reparse-symbol indented_block_body) [17273 17380])
                    ("vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17397 17401])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17403 17416])
                            ("args" variable nil (reparse-symbol function_parameters) [17418 17422])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17424 17430]))                          )
                        (reparse-symbol indented_block_body) [17385 17611])
                    ("_vformat" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17629 17633])
                            ("format_string" variable nil (reparse-symbol function_parameters) [17635 17648])
                            ("args" variable nil (reparse-symbol function_parameters) [17650 17654])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [17656 17662])
                            ("used_args" variable nil (reparse-symbol function_parameters) [17664 17673])
                            ("recursion_depth" variable nil (reparse-symbol function_parameters) [17675 17690]))                          )
                        (reparse-symbol indented_block_body) [17616 18920])
                    ("get_value" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18940 18944])
                            ("key" variable nil (reparse-symbol function_parameters) [18946 18949])
                            ("args" variable nil (reparse-symbol function_parameters) [18951 18955])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [18957 18963]))                          )
                        (reparse-symbol indented_block_body) [18926 19081])
                    ("check_unused_args" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19109 19113])
                            ("used_args" variable nil (reparse-symbol function_parameters) [19115 19124])
                            ("args" variable nil (reparse-symbol function_parameters) [19126 19130])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [19132 19138]))                          )
                        (reparse-symbol indented_block_body) [19087 19154])
                    ("format_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19177 19181])
                            ("value" variable nil (reparse-symbol function_parameters) [19183 19188])
                            ("format_spec" variable nil (reparse-symbol function_parameters) [19190 19201]))                          )
                        (reparse-symbol indented_block_body) [19160 19246])
                    ("convert_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19270 19274])
                            ("value" variable nil (reparse-symbol function_parameters) [19276 19281])
                            ("conversion" variable nil (reparse-symbol function_parameters) [19283 19293]))                          )
                        (reparse-symbol indented_block_body) [19252 19610])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [19985 19989])
                            ("format_string" variable nil (reparse-symbol function_parameters) [19991 20004]))                          )
                        (reparse-symbol indented_block_body) [19975 20056])
                    ("get_field" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20333 20337])
                            ("field_name" variable nil (reparse-symbol function_parameters) [20339 20349])
                            ("args" variable nil (reparse-symbol function_parameters) [20351 20355])
                            ("kwargs" variable nil (reparse-symbol function_parameters) [20357 20363]))                          )
                        (reparse-symbol indented_block_body) [20319 20746]))                  
                :type "class")
                nil [17244 20746]))          
      :file "string.py"
      :pointmax 20746
      :fsize 20745
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "socket.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"\\
This module provides socket operations and some related functions.
On Unix, it supports IP (Internet Protocol) and Unix domain sockets.
On other systems, it only supports IP. Functions specific for a
socket are available as methods of the socket object.

Functions:

socket() -- create a new socket object
socketpair() -- create a pair of new socket objects [*]
fromfd() -- create a socket object from an open file descriptor [*]
gethostname() -- return the current hostname
gethostbyname() -- map a hostname to its IP number
gethostbyaddr() -- map an IP number or hostname to DNS info
getservbyname() -- map a service name and a protocol name to a port number
getprotobyname() -- map a protocol name (e.g. 'tcp') to a number
ntohs(), ntohl() -- convert 16, 32 bit int from network to host byte order
htons(), htonl() -- convert 16, 32 bit int from host to network byte order
inet_aton() -- convert IP addr string (123.45.67.89) to 32-bit packed format
inet_ntoa() -- convert 32-bit packed format IP to string (123.45.67.89)
ssl() -- secure socket layer support (only available if configured)
socket.getdefaulttimeout() -- get the default timeout value
socket.setdefaulttimeout() -- set the default timeout value
create_connection() -- connects to an address, with an optional timeout

 [*] not available on all platforms!

Special objects:

SocketType -- type object for socket objects
error -- exception raised for I/O errors
has_ipv6 -- boolean value indicating if IPv6 is supported

Integer constants:

AF_INET, AF_UNIX -- socket domains (first argument to socket() call)
SOCK_STREAM, SOCK_DGRAM, SOCK_RAW -- socket types (second argument)

Many other constants may be defined; these may be used in calls to
the setsockopt() and getsockopt() methods.
\"\"\"" code nil nil [94 1857])
            ("_socket" include nil nil [1859 1873])
            ("_socket" include nil nil [1874 1895])
            ("try" code nil nil [1897 2839])
            ("warnings" include nil nil [2840 2864])
            ("sys" include nil nil [2840 2864])
            ("os" include nil nil [2840 2864])
            ("try" code nil nil [2866 2960])
            ("try" code nil nil [2961 3020])
            ("EBADF" variable nil nil [3020 3054])
            ("EINTR" variable nil nil [3055 3089])
            ("__all__" variable nil nil [3091 3133])
            ("__all__" code nil nil [3134 3179])
            ("_realsocket" variable nil nil [3182 3202])
            ("if" code nil nil [3222 4118])
            ("getfqdn" function
               (:documentation "Get fully qualified domain name from name.

    An empty argument is interpreted as meaning the local host.

    First the hostname returned by gethostbyaddr() is checked, then
    possibly existing aliases. In case no FQDN is available, hostname
    from gethostname() is returned.
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [4133 4137]))                  )
                nil [4121 4812])
            ("_socketmethods" variable nil nil [4814 5025])
            ("if" code nil nil [5027 5096])
            ("if" code nil nil [5097 5180])
            ("_delegate_methods" variable nil nil [5291 5400])
            ("_closedsocket" type
               (:superclasses ("object")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [5435 5449])
                    ("_dummy" function (:arguments 
                      ( ("args" variable nil (reparse-symbol function_parameters) [5465 5470]))                      ) (reparse-symbol indented_block_body) [5454 5523])
                    ("send" variable nil (reparse-symbol indented_block_body) [5586 5654])
                    ("__getattr__" variable nil (reparse-symbol indented_block_body) [5659 5679]))                  
                :type "class")
                nil [5402 5680])
            ("_socketobject" type
               (:superclasses ("object")
                :members 
                  ( ("__doc__" variable nil (reparse-symbol indented_block_body) [5920 5949])
                    ("__slots__" code nil (reparse-symbol indented_block_body) [5955 6017])
                    ("__init__" function
                       (:suite 
                          ( ("if" code nil (reparse-symbol indented_block_body) [6106 6177])
                            ("self" variable nil (reparse-symbol indented_block_body) [6185 6203])
                            ("for" code nil (reparse-symbol indented_block_body) [6212 6303]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6036 6040])
                            ("family" variable nil (reparse-symbol function_parameters) [6042 6048])
                            ("type" variable nil (reparse-symbol function_parameters) [6058 6062])
                            ("proto" variable nil (reparse-symbol function_parameters) [6076 6081])
                            ("_sock" variable nil (reparse-symbol function_parameters) [6085 6090]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [6023 6303])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6318 6322]))                          )
                        (reparse-symbol indented_block_body) [6308 6478])
                    ("close" variable nil (reparse-symbol indented_block_body) [6482 6523])
                    ("accept" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6540 6544]))                          )
                        (reparse-symbol indented_block_body) [6529 6635])
                    ("accept" variable nil (reparse-symbol indented_block_body) [6639 6682])
                    ("dup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6696 6700]))                          
                        :documentation "dup() -> socket object

        Return a new socket object connected to the same system resource.")
                        (reparse-symbol indented_block_body) [6688 6862])
                    ("makefile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6880 6884])
                            ("mode" variable nil (reparse-symbol function_parameters) [6886 6890])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [6896 6903]))                          
                        :documentation "makefile([mode[, bufsize]]) -> file object

        Return a regular file object corresponding to the socket.  The mode
        and bufsize arguments are as for the built-in open() function.")
                        (reparse-symbol indented_block_body) [6867 7168])
                    ("family" variable nil (reparse-symbol indented_block_body) [7173 7247])
                    ("type" variable nil (reparse-symbol indented_block_body) [7252 7320])
                    ("proto" variable nil (reparse-symbol indented_block_body) [7325 7399])
                    ("_s" variable nil (reparse-symbol indented_block_body) [7405 7516])
                    ("for" code nil (reparse-symbol indented_block_body) [7521 7582])
                    ("del" code nil (reparse-symbol indented_block_body) [7586 7596]))                  
                :type "class")
                nil [5886 7597])
            ("socket" variable nil nil [7598 7633])
            ("_exception_was_EINTR" function (:arguments 
              ( ("exc" variable nil (reparse-symbol function_parameters) [7660 7663]))              ) nil [7635 7759])
            ("_fileobject" type
               (:documentation "Faux file object attached to a socket object."
                :superclasses ("object")
                :members 
                  ( ("default_bufsize" variable nil (reparse-symbol indented_block_body) [7848 7870])
                    ("name" variable nil (reparse-symbol indented_block_body) [7875 7892])
                    ("__slots__" variable nil (reparse-symbol indented_block_body) [7898 8105])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [8181 8198])
                            ("self" variable nil (reparse-symbol indented_block_body) [8207 8223])
                            ("if" code nil (reparse-symbol indented_block_body) [8268 8327])
                            ("self" variable nil (reparse-symbol indented_block_body) [8335 8357])
                            ("self" variable nil (reparse-symbol indented_block_body) [8366 8388])
                            ("if" code nil (reparse-symbol indented_block_body) [8615 8791])
                            ("self" variable nil (reparse-symbol indented_block_body) [8799 8823])
                            ("self" variable nil (reparse-symbol indented_block_body) [9112 9135])
                            ("self" variable nil (reparse-symbol indented_block_body) [9144 9159])
                            ("self" variable nil (reparse-symbol indented_block_body) [9188 9206])
                            ("self" variable nil (reparse-symbol indented_block_body) [9215 9234]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8124 8128])
                            ("sock" variable nil (reparse-symbol function_parameters) [8130 8134])
                            ("mode" variable nil (reparse-symbol function_parameters) [8136 8140])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [8147 8154])
                            ("close" variable nil (reparse-symbol function_parameters) [8159 8164]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [8111 9235])
                    ("_getclosed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9255 9259]))                          )
                        (reparse-symbol indented_block_body) [9240 9296])
                    ("closed" variable nil (reparse-symbol indented_block_body) [9300 9363])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9379 9383]))                          )
                        (reparse-symbol indented_block_body) [9369 9565])
                    ("__del__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9582 9586]))                          )
                        (reparse-symbol indented_block_body) [9570 9719])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9734 9738]))                          )
                        (reparse-symbol indented_block_body) [9724 10697])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10713 10717]))                          )
                        (reparse-symbol indented_block_body) [10702 10755])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10770 10774])
                            ("data" variable nil (reparse-symbol function_parameters) [10776 10780]))                          )
                        (reparse-symbol indented_block_body) [10760 11125])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11145 11149])
                            ("list" variable nil (reparse-symbol function_parameters) [11151 11155]))                          )
                        (reparse-symbol indented_block_body) [11130 11506])
                    ("_get_wbuf_len" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11529 11533]))                          )
                        (reparse-symbol indented_block_body) [11511 11566])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11580 11584])
                            ("size" variable nil (reparse-symbol function_parameters) [11586 11590]))                          )
                        (reparse-symbol indented_block_body) [11571 14548])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14566 14570])
                            ("size" variable nil (reparse-symbol function_parameters) [14572 14576]))                          )
                        (reparse-symbol indented_block_body) [14553 18586])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18605 18609])
                            ("sizehint" variable nil (reparse-symbol function_parameters) [18611 18619]))                          )
                        (reparse-symbol indented_block_body) [18591 18912])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18956 18960]))                          )
                        (reparse-symbol indented_block_body) [18943 18983])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18997 19001]))                          )
                        (reparse-symbol indented_block_body) [18988 19108]))                  
                :type "class")
                nil [7760 19108])
            ("_GLOBAL_DEFAULT_TIMEOUT" variable nil nil [19109 19143])
            ("create_connection" function
               (:documentation "Connect to *address* and return the socket object.

    Convenience function.  Connect to *address* (a 2-tuple ``(host,
    port)``) and return the socket object.  Passing the optional
    *timeout* parameter will set the timeout on the socket instance
    before attempting to connect.  If no *timeout* is supplied, the
    global default timeout setting returned by :func:`getdefaulttimeout`
    is used.
    "
                :arguments 
                  ( ("address" variable nil (reparse-symbol function_parameters) [19167 19174])
                    ("timeout" variable nil (reparse-symbol function_parameters) [19176 19183]))                  )
                nil [19145 20150]))          
      :file "socket.py"
      :pointmax 20150
      :fsize 20149
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "urlparse.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Parse (absolute and relative) URLs.

urlparse module is based upon the following RFC specifications.

RFC 3986 (STD66): \"Uniform Resource Identifiers\" by T. Berners-Lee, R. Fielding
and L.  Masinter, January 2005.

RFC 2396:  \"Uniform Resource Identifiers (URI)\": Generic Syntax by T.
Berners-Lee, R. Fielding, and L. Masinter, August 1998.

RFC 2368: \"The mailto URL scheme\", by P.Hoffman , L Masinter, J. Zwinski, July 1998.

RFC 1808: \"Relative Uniform Resource Locators\", by R. Fielding, UC Irvine, June
1995.

RFC 1738: \"Uniform Resource Locators (URL)\" by T. Berners-Lee, L. Masinter, M.
McCahill, December 1994

RFC 3986 is considered the current standard and any future changes to
urlparse module should conform with it.  The urlparse module is
currently not entirely compliant with this RFC due to defacto
scenarios for parsing, and for backward compatibility purposes, some
parsing quirks from older RFCs are retained. The testcases in
test_urlparse.py provides a good indicator of parsing behavior.

\"\"\"" code nil nil [1 1018])
            ("__all__" variable nil nil [1020 1142])
            ("uses_relative" variable nil nil [1202 1375])
            ("uses_netloc" variable nil nil [1376 1627])
            ("non_hierarchical" variable nil nil [1628 1752])
            ("uses_params" variable nil nil [1753 1908])
            ("uses_query" variable nil nil [1909 2031])
            ("uses_fragment" variable nil nil [2032 2189])
            ("scheme_chars" variable nil nil [2226 2367])
            ("MAX_CACHE_SIZE" variable nil nil [2369 2388])
            ("_parse_cache" variable nil nil [2389 2406])
            ("clear_cache" function (:documentation "Clear the parse cache.") nil [2408 2485])
            ("ResultMixin" type
               (:documentation "Shared methods for the parsed result objects."
                :superclasses ("object")
                :members 
                  ( ("username" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2602 2606]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2575 2845])
                    ("password" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2877 2881]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2850 3088])
                    ("hostname" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3120 3124]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3093 3337])
                    ("port" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3365 3369]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [3342 3595]))                  
                :type "class")
                nil [2487 3595])
            ("collections" include nil nil [3596 3630])
            ("SplitResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [3733 3747])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3764 3768]))                          )
                        (reparse-symbol indented_block_body) [3753 3803]))                  
                :type "class")
                nil [3632 3803])
            ("ParseResult" type
               (:superclasses ("ResultMixin")
                :members 
                  ( ("__slots__" variable nil (reparse-symbol indented_block_body) [3913 3927])
                    ("geturl" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3944 3948]))                          )
                        (reparse-symbol indented_block_body) [3933 3983]))                  
                :type "class")
                nil [3805 3983])
            ("urlparse" function
               (:documentation "Parse a URL into 6 components:
    <scheme>://<netloc>/<path>;<params>?<query>#<fragment>
    Return a 6-tuple: (scheme, netloc, path, params, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [3998 4001])
                    ("scheme" variable nil (reparse-symbol function_parameters) [4003 4009])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [4014 4029]))                  )
                nil [3985 4623])
            ("_splitparams" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [4641 4644]))              ) nil [4624 4820])
            ("_splitnetloc" function (:arguments 
              ( ("url" variable nil (reparse-symbol function_parameters) [4838 4841])
                ("start" variable nil (reparse-symbol function_parameters) [4843 4848]))              ) nil [4821 5269])
            ("urlsplit" function
               (:documentation "Parse a URL into 5 components:
    <scheme>://<netloc>/<path>?<query>#<fragment>
    Return a 5-tuple: (scheme, netloc, path, query, fragment).
    Note that we don't break the components up in smaller bits
    (e.g. netloc is a single string) and we don't expand % escapes."
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [5283 5286])
                    ("scheme" variable nil (reparse-symbol function_parameters) [5288 5294])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [5299 5314]))                  )
                nil [5270 6960])
            ("urlunparse" function
               (:documentation "Put a parsed URL back together again.  This may result in a
    slightly different, but equivalent URL, if the URL that was parsed
    originally had redundant delimiters, e.g. a ? with an empty query
    (the draft states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [6976 6980]))                  )
                nil [6961 7415])
            ("urlunsplit" function
               (:documentation "Combine the elements of a tuple as returned by urlsplit() into a
    complete URL as a string. The data argument can be any five-item iterable.
    This may result in a slightly different, but equivalent URL, if the URL that
    was parsed originally had unnecessary delimiters (for example, a ? with an
    empty query; the RFC states that these are equivalent)."
                :arguments 
                  ( ("data" variable nil (reparse-symbol function_parameters) [7431 7435]))                  )
                nil [7416 8187])
            ("urljoin" function
               (:documentation "Join a base URL and a possibly relative URL to form an absolute
    interpretation of the latter."
                :arguments 
                  ( ("base" variable nil (reparse-symbol function_parameters) [8200 8204])
                    ("url" variable nil (reparse-symbol function_parameters) [8206 8209])
                    ("allow_fragments" variable nil (reparse-symbol function_parameters) [8211 8226]))                  )
                nil [8188 10156])
            ("urldefrag" function
               (:documentation "Removes any existing fragment from URL.

    Returns a tuple of the defragmented URL and the fragment.  If
    the URL contained no fragments, the second element is the
    empty string.
    "
                :arguments 
                  ( ("url" variable nil (reparse-symbol function_parameters) [10171 10174]))                  )
                nil [10157 10552])
            ("_hexdig" variable nil nil [10714 10748])
            ("_hextochr" variable nil nil [10749 10824])
            ("unquote" function
               (:documentation "unquote('abc%20def') -> 'abc def'."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10838 10839]))                  )
                nil [10826 11205])
            ("parse_qs" function
               (:documentation "Parse a query given as a string argument.

        Arguments:

        qs: URL-encoded query string to be parsed

        keep_blank_values: flag indicating whether blank values in
            URL encoded queries should be treated as blank strings.
            A true value indicates that blanks should be retained as
            blank strings.  The default false value indicates that
            blank values are to be ignored and treated as if they were
            not included.

        strict_parsing: flag indicating what to do with parsing errors.
            If false (the default), errors are silently ignored.
            If true, errors raise a ValueError exception.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [11219 11221])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [11223 11240])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [11244 11258]))                  )
                nil [11206 12168])
            ("parse_qsl" function
               (:documentation "Parse a query given as a string argument.

    Arguments:

    qs: URL-encoded query string to be parsed

    keep_blank_values: flag indicating whether blank values in
        URL encoded queries should be treated as blank strings.  A
        true value indicates that blanks should be retained as blank
        strings.  The default false value indicates that blank values
        are to be ignored and treated as if they were  not included.

    strict_parsing: flag indicating what to do with parsing errors. If
        false (the default), errors are silently ignored. If true,
        errors raise a ValueError exception.

    Returns a list, as G-d intended.
    "
                :arguments 
                  ( ("qs" variable nil (reparse-symbol function_parameters) [12183 12185])
                    ("keep_blank_values" variable nil (reparse-symbol function_parameters) [12187 12204])
                    ("strict_parsing" variable nil (reparse-symbol function_parameters) [12208 12222]))                  )
                nil [12169 13619]))          
      :file "urlparse.py"
      :pointmax 13619
      :fsize 13618
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax '((COMMA 3892 . 3893) (NAME 3823 . 3833) (PAREN_BLOCK 3833 . 3892) (COMMA 3712 . 3713) (NAME 3650 . 3660) (PAREN_BLOCK 3660 . 3712)))
    (semanticdb-table "base64.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"RFC 3548: Base16, Base32, Base64 Data Encodings\"\"\"" code nil nil [28 81])
            ("re" include nil nil [213 222])
            ("struct" include nil nil [223 236])
            ("binascii" include nil nil [237 252])
            ("__all__" variable nil nil [255 829])
            ("_translation" variable nil nil [831 876])
            ("EMPTYSTRING" variable nil nil [877 893])
            ("_translate" function (:arguments 
              ( ("s" variable nil (reparse-symbol function_parameters) [911 912])
                ("altchars" variable nil (reparse-symbol function_parameters) [914 922]))              ) nil [896 1070])
            ("b64encode" function
               (:documentation "Encode a string using Base64.

    s is the string to encode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies an
    alternative alphabet for the '+' and '/' characters.  This allows an
    application to e.g. generate url or filesystem safe Base64 strings.

    The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1130 1131])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1133 1141]))                  )
                nil [1116 1724])
            ("b64decode" function
               (:documentation "Decode a Base64 encoded string.

    s is the string to decode.  Optional altchars must be a string of at least
    length 2 (additional characters are ignored) which specifies the
    alternative alphabet used instead of the '+' and '/' characters.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1740 1741])
                    ("altchars" variable nil (reparse-symbol function_parameters) [1743 1751]))                  )
                nil [1726 2436])
            ("standard_b64encode" function
               (:documentation "Encode a string using the standard Base64 alphabet.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2461 2462]))                  )
                nil [2438 2621])
            ("standard_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2645 2646]))                  )
                nil [2622 2942])
            ("urlsafe_b64encode" function
               (:documentation "Encode a string using a url-safe Base64 alphabet.

    s is the string to encode.  The encoded string is returned.  The alphabet
    uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [2965 2966]))                  )
                nil [2943 3195])
            ("urlsafe_b64decode" function
               (:documentation "Decode a string encoded with the standard Base64 alphabet.

    s is the string to decode.  The decoded string is returned.  A TypeError
    is raised if the string is incorrectly padded or if there are non-alphabet
    characters present in the string.

    The alphabet uses '-' instead of '+' and '_' instead of '/'.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [3218 3219]))                  )
                nil [3196 3587])
            ("_b32alphabet" variable nil nil [3641 3978])
            ("_b32tab" variable nil nil [3980 4010])
            ("_b32tab" code nil nil [4011 4025])
            ("_b32tab" variable nil nil [4026 4059])
            ("_b32rev" variable nil nil [4060 4123])
            ("b32encode" function
               (:documentation "Encode a string using Base32.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [4140 4141]))                  )
                nil [4126 5903])
            ("b32decode" function
               (:documentation "Decode a Base32 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    RFC 3548 allows for optional mapping of the digit 0 (zero) to the letter O
    (oh), and for optional mapping of the digit 1 (one) to either the letter I
    (eye) or letter L (el).  The optional argument map01 when not None,
    specifies which letter the digit 1 should be mapped to (when map01 is not
    None, the digit 0 is always mapped to the letter O).  For security
    purposes the default is None, so that 0 and 1 are not allowed in the
    input.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [5919 5920])
                    ("casefold" variable nil (reparse-symbol function_parameters) [5922 5930])
                    ("map01" variable nil (reparse-symbol function_parameters) [5938 5943]))                  )
                nil [5905 8389])
            ("b16encode" function
               (:documentation "Encode a string using Base16.

    s is the string to encode.  The encoded string is returned.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8563 8564]))                  )
                nil [8549 8716])
            ("b16decode" function
               (:documentation "Decode a Base16 encoded string.

    s is the string to decode.  Optional casefold is a flag specifying whether
    a lowercase alphabet is acceptable as input.  For security purposes, the
    default is False.

    The decoded string is returned.  A TypeError is raised if s were
    incorrectly padded or if there are non-alphabet characters present in the
    string.
    "
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [8732 8733])
                    ("casefold" variable nil (reparse-symbol function_parameters) [8735 8743]))                  )
                nil [8718 9294])
            ("MAXLINESIZE" variable nil nil [9457 9473])
            ("MAXBINSIZE" code nil nil [9495 9526])
            ("encode" function
               (:documentation "Encode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9539 9544])
                    ("output" variable nil (reparse-symbol function_parameters) [9546 9552]))                  )
                nil [9528 9879])
            ("decode" function
               (:documentation "Decode a file."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [9892 9897])
                    ("output" variable nil (reparse-symbol function_parameters) [9899 9905]))                  )
                nil [9881 10082])
            ("encodestring" function
               (:documentation "Encode a string into multiple lines of base-64 data."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10101 10102]))                  )
                nil [10084 10342])
            ("decodestring" function
               (:documentation "Decode a string."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [10361 10362]))                  )
                nil [10344 10426])
            ("test" function (:documentation "Small test program") nil [10455 11171])
            ("test1" function nil nil [11173 11296])
            ("if" code nil nil [11298 11336]))          
      :file "base64.py"
      :pointmax 11336
      :fsize 11335
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "hashlib.py"
      :major-mode 'python-mode
      :tags 
        '( ("__doc__" variable nil nil [178 3031])
            ("__hash_new" function
               (:documentation "new(name, string='') - Return a new hashing object using the named algorithm;
    optionally initialized with a string.

    Override 'usedforsecurity' to False when using for non-security purposes in
    a FIPS environment
    "
                :arguments 
                  ( ("name" variable nil (reparse-symbol function_parameters) [3049 3053])
                    ("string" variable nil (reparse-symbol function_parameters) [3055 3061])
                    ("usedforsecurity" variable nil (reparse-symbol function_parameters) [3066 3081]))                  )
                nil [3034 3433])
            ("try" code nil nil [3434 4428]))          
      :file "hashlib.py"
      :pointmax 4428
      :fsize 4427
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "httplib.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"HTTP/1.1 client library

<intro stuff goes here>
<other stuff, too>

HTTPConnection goes through a number of \"states\", which define when a client
may legally make another request or fetch the response for a particular
request. This diagram details these state transitions:

    (null)
      |
      | HTTPConnection()
      v
    Idle
      |
      | putrequest()
      v
    Request-started
      |
      | ( putheader() )*  endheaders()
      v
    Request-sent
      |
      | response = getresponse()
      v
    Unread-response   [Response-headers-read]
      |\\____________________
      |                     |
      | response.read()     | putrequest()
      v                     v
    Idle                  Req-started-unread-response
                     ______/|
                   /        |
   response.read() |        | ( putheader() )*  endheaders()
                   v        v
       Request-started    Req-sent-unread-response
                            |
                            | response.read()
                            v
                          Request-sent

This diagram presents the following rules:
  -- a second request may not be started until {response-headers-read}
  -- a response [object] cannot be retrieved until {request-sent}
  -- there is no differentiation between an unread response body and a
     partially read response body

Note: this enforcement is applied by the HTTPConnection class. The
      HTTPResponse class does not enforce this state machine, which
      implies sophisticated clients may accelerate the request/response
      pipeline. Caution should be taken, though: accelerating the states
      beyond the above pattern may imply knowledge of the server's
      connection-close behavior for certain requests. For example, it
      is impossible to tell whether the server will close the connection
      UNTIL the response headers have been read; this means that further
      requests cannot be placed into the pipeline until it is known that
      the server will NOT be closing the connection.

Logical State                  __state            __response
-------------                  -------            ----------
Idle                           _CS_IDLE           None
Request-started                _CS_REQ_STARTED    None
Request-sent                   _CS_REQ_SENT       None
Unread-response                _CS_IDLE           <response_class>
Req-started-unread-response    _CS_REQ_STARTED    <response_class>
Req-sent-unread-response       _CS_REQ_SENT       <response_class>
\"\"\"" code nil nil [1 2564])
            ("array" include nil nil [2566 2589])
            ("socket" include nil nil [2590 2603])
            ("sys" include nil nil [2604 2631])
            ("urlparse" include nil nil [2632 2661])
            ("warnings" include nil nil [2662 2677])
            ("with" code nil nil [2678 2877])
            ("try" code nil nil [2878 2972])
            ("__all__" variable nil nil [2973 3343])
            ("HTTP_PORT" variable nil nil [3345 3359])
            ("HTTPS_PORT" variable nil nil [3360 3376])
            ("_UNKNOWN" variable nil nil [3378 3398])
            ("_CS_IDLE" variable nil nil [3420 3437])
            ("_CS_REQ_STARTED" variable nil nil [3438 3473])
            ("_CS_REQ_SENT" variable nil nil [3474 3503])
            ("CONTINUE" variable nil nil [3536 3550])
            ("SWITCHING_PROTOCOLS" variable nil nil [3551 3576])
            ("PROCESSING" variable nil nil [3577 3593])
            ("OK" variable nil nil [3608 3616])
            ("CREATED" variable nil nil [3617 3630])
            ("ACCEPTED" variable nil nil [3631 3645])
            ("NON_AUTHORITATIVE_INFORMATION" variable nil nil [3646 3681])
            ("NO_CONTENT" variable nil nil [3682 3698])
            ("RESET_CONTENT" variable nil nil [3699 3718])
            ("PARTIAL_CONTENT" variable nil nil [3719 3740])
            ("MULTI_STATUS" variable nil nil [3741 3759])
            ("IM_USED" variable nil nil [3760 3773])
            ("MULTIPLE_CHOICES" variable nil nil [3789 3811])
            ("MOVED_PERMANENTLY" variable nil nil [3812 3835])
            ("FOUND" variable nil nil [3836 3847])
            ("SEE_OTHER" variable nil nil [3848 3863])
            ("NOT_MODIFIED" variable nil nil [3864 3882])
            ("USE_PROXY" variable nil nil [3883 3898])
            ("TEMPORARY_REDIRECT" variable nil nil [3899 3923])
            ("BAD_REQUEST" variable nil nil [3940 3957])
            ("UNAUTHORIZED" variable nil nil [3958 3976])
            ("PAYMENT_REQUIRED" variable nil nil [3977 3999])
            ("FORBIDDEN" variable nil nil [4000 4015])
            ("NOT_FOUND" variable nil nil [4016 4031])
            ("METHOD_NOT_ALLOWED" variable nil nil [4032 4056])
            ("NOT_ACCEPTABLE" variable nil nil [4057 4077])
            ("PROXY_AUTHENTICATION_REQUIRED" variable nil nil [4078 4113])
            ("REQUEST_TIMEOUT" variable nil nil [4114 4135])
            ("CONFLICT" variable nil nil [4136 4150])
            ("GONE" variable nil nil [4151 4161])
            ("LENGTH_REQUIRED" variable nil nil [4162 4183])
            ("PRECONDITION_FAILED" variable nil nil [4184 4209])
            ("REQUEST_ENTITY_TOO_LARGE" variable nil nil [4210 4240])
            ("REQUEST_URI_TOO_LONG" variable nil nil [4241 4267])
            ("UNSUPPORTED_MEDIA_TYPE" variable nil nil [4268 4296])
            ("REQUESTED_RANGE_NOT_SATISFIABLE" variable nil nil [4297 4334])
            ("EXPECTATION_FAILED" variable nil nil [4335 4359])
            ("UNPROCESSABLE_ENTITY" variable nil nil [4360 4386])
            ("LOCKED" variable nil nil [4387 4399])
            ("FAILED_DEPENDENCY" variable nil nil [4400 4423])
            ("UPGRADE_REQUIRED" variable nil nil [4424 4446])
            ("INTERNAL_SERVER_ERROR" variable nil nil [4463 4490])
            ("NOT_IMPLEMENTED" variable nil nil [4491 4512])
            ("BAD_GATEWAY" variable nil nil [4513 4530])
            ("SERVICE_UNAVAILABLE" variable nil nil [4531 4556])
            ("GATEWAY_TIMEOUT" variable nil nil [4557 4578])
            ("HTTP_VERSION_NOT_SUPPORTED" variable nil nil [4579 4611])
            ("INSUFFICIENT_STORAGE" variable nil nil [4612 4638])
            ("NOT_EXTENDED" variable nil nil [4639 4657])
            ("responses" variable nil nil [4704 5862])
            ("MAXAMOUNT" variable nil nil [5923 5942])
            ("HTTPMessage" type
               (:superclasses ("mimetools.Message")
                :members 
                  ( ("addheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6001 6005])
                            ("key" variable nil (reparse-symbol function_parameters) [6007 6010])
                            ("value" variable nil (reparse-symbol function_parameters) [6012 6017]))                          
                        :documentation "Add header for field key handling repeats.")
                        (reparse-symbol indented_block_body) [5987 6271])
                    ("addcontinue" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6292 6296])
                            ("key" variable nil (reparse-symbol function_parameters) [6298 6301])
                            ("more" variable nil (reparse-symbol function_parameters) [6303 6307]))                          
                        :documentation "Add more field data from a continuation line.")
                        (reparse-symbol indented_block_body) [6276 6445])
                    ("readheaders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6466 6470]))                          
                        :documentation "Read header lines.

        Read header lines up to the entirely blank line that terminates them.
        The (normally blank) line that ends the headers is skipped, but not
        included in the returned list.  If a non-header line ends the headers,
        (which is an error), an attempt is made to backspace over it; it is
        never included in the returned list.

        The variable self.status is set to the empty string if all went well,
        otherwise it is an error message.  The variable self.headers is a
        completely uninterpreted list of lines contained in the header (so
        printing them will reproduce the header exactly as it appears in the
        file).

        If multiple header fields with the same name occur, they are combined
        according to the rules in RFC 2616 sec 4.2:

        Appending each subsequent field-value to the first, each separated
        by a comma. The order in which header fields with the same field-name
        are received is significant to the interpretation of the combined
        field value.
        ")
                        (reparse-symbol indented_block_body) [6450 10109]))                  
                :type "class")
                nil [5944 10109])
            ("HTTPResponse" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10597 10629])
                            ("self" variable nil (reparse-symbol indented_block_body) [10638 10666])
                            ("self" variable nil (reparse-symbol indented_block_body) [10675 10695])
                            ("self" variable nil (reparse-symbol indented_block_body) [10704 10725])
                            ("self" variable nil (reparse-symbol indented_block_body) [10735 10750])
                            ("self" variable nil (reparse-symbol indented_block_body) [10807 10830])
                            ("self" variable nil (reparse-symbol indented_block_body) [10854 10876])
                            ("self" variable nil (reparse-symbol indented_block_body) [10900 10922])
                            ("self" variable nil (reparse-symbol indented_block_body) [10949 10972])
                            ("self" variable nil (reparse-symbol indented_block_body) [11016 11042])
                            ("self" variable nil (reparse-symbol indented_block_body) [11094 11116])
                            ("self" variable nil (reparse-symbol indented_block_body) [11169 11195]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10539 10543])
                            ("sock" variable nil (reparse-symbol function_parameters) [10545 10549])
                            ("debuglevel" variable nil (reparse-symbol function_parameters) [10551 10561])
                            ("strict" variable nil (reparse-symbol function_parameters) [10565 10571])
                            ("method" variable nil (reparse-symbol function_parameters) [10575 10581]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10526 11238])
                    ("_read_status" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11260 11264]))                          )
                        (reparse-symbol indented_block_body) [11243 12591])
                    ("begin" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12606 12610]))                          )
                        (reparse-symbol indented_block_body) [12596 15401])
                    ("_check_close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15423 15427]))                          )
                        (reparse-symbol indented_block_body) [15406 16472])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16487 16491]))                          )
                        (reparse-symbol indented_block_body) [16477 16569])
                    ("isclosed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16587 16591]))                          )
                        (reparse-symbol indented_block_body) [16574 16989])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17076 17080])
                            ("amt" variable nil (reparse-symbol function_parameters) [17082 17085]))                          )
                        (reparse-symbol indented_block_body) [17067 18135])
                    ("_read_chunked" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18158 18162])
                            ("amt" variable nil (reparse-symbol function_parameters) [18164 18167]))                          )
                        (reparse-symbol indented_block_body) [18140 20094])
                    ("_safe_read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20114 20118])
                            ("amt" variable nil (reparse-symbol function_parameters) [20120 20123]))                          
                        :documentation "Read the number of bytes requested, compensating for partial reads.

        Normally, we have a blocking socket, but a read() can be interrupted
        by a signal (resulting in a partial read).

        Note that we cannot distinguish between EOF and an interrupt when zero
        bytes have been read. IncompleteRead() will be raised in this
        situation.

        This function should be used when <amt> bytes \"should\" be present for
        reading. If the bytes are truly not available (due to EOF), then the
        IncompleteRead exception can be used to detect the problem.
        ")
                        (reparse-symbol indented_block_body) [20099 20995])
                    ("getheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21014 21018])
                            ("name" variable nil (reparse-symbol function_parameters) [21020 21024])
                            ("default" variable nil (reparse-symbol function_parameters) [21026 21033]))                          )
                        (reparse-symbol indented_block_body) [21000 21156])
                    ("getheaders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21176 21180]))                          
                        :documentation "Return list of (header, value) tuples.")
                        (reparse-symbol indented_block_body) [21161 21334]))                  
                :type "class")
                nil [10110 21334])
            ("HTTPConnection" type
               (:members 
                  ( ("_http_vsn" variable nil (reparse-symbol indented_block_body) [21363 21377])
                    ("_http_vsn_str" variable nil (reparse-symbol indented_block_body) [21382 21408])
                    ("response_class" variable nil (reparse-symbol indented_block_body) [21414 21443])
                    ("default_port" variable nil (reparse-symbol indented_block_body) [21448 21472])
                    ("auto_open" variable nil (reparse-symbol indented_block_body) [21477 21490])
                    ("debuglevel" variable nil (reparse-symbol indented_block_body) [21495 21509])
                    ("strict" variable nil (reparse-symbol indented_block_body) [21514 21524])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [21645 21667])
                            ("self" variable nil (reparse-symbol indented_block_body) [21676 21692])
                            ("self" variable nil (reparse-symbol indented_block_body) [21701 21718])
                            ("self" variable nil (reparse-symbol indented_block_body) [21727 21749])
                            ("self" variable nil (reparse-symbol indented_block_body) [21758 21781])
                            ("self" variable nil (reparse-symbol indented_block_body) [21790 21809])
                            ("self" variable nil (reparse-symbol indented_block_body) [21818 21842])
                            ("self" variable nil (reparse-symbol indented_block_body) [21851 21875])
                            ("self" variable nil (reparse-symbol indented_block_body) [21884 21909])
                            ("self" code nil (reparse-symbol indented_block_body) [21919 21949])
                            ("if" code nil (reparse-symbol indented_block_body) [21958 22014]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [21543 21547])
                            ("host" variable nil (reparse-symbol function_parameters) [21549 21553])
                            ("port" variable nil (reparse-symbol function_parameters) [21555 21559])
                            ("strict" variable nil (reparse-symbol function_parameters) [21566 21572])
                            ("timeout" variable nil (reparse-symbol function_parameters) [21596 21603]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [21530 22014])
                    ("_set_tunnel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22035 22039])
                            ("host" variable nil (reparse-symbol function_parameters) [22041 22045])
                            ("port" variable nil (reparse-symbol function_parameters) [22047 22051])
                            ("headers" variable nil (reparse-symbol function_parameters) [22058 22065]))                          
                        :documentation " Sets up the host and the port for the HTTP CONNECT Tunnelling.

        The headers argument should be a mapping of extra HTTP headers
        to send with the CONNECT request.
        ")
                        (reparse-symbol indented_block_body) [22019 22458])
                    ("_set_hostport" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22481 22485])
                            ("host" variable nil (reparse-symbol function_parameters) [22487 22491])
                            ("port" variable nil (reparse-symbol function_parameters) [22493 22497]))                          )
                        (reparse-symbol indented_block_body) [22463 23056])
                    ("set_debuglevel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23080 23084])
                            ("level" variable nil (reparse-symbol function_parameters) [23086 23091]))                          )
                        (reparse-symbol indented_block_body) [23061 23126])
                    ("_tunnel" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23143 23147]))                          )
                        (reparse-symbol indented_block_body) [23131 23933])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23951 23955]))                          
                        :documentation "Connect to the host and port specified in __init__.")
                        (reparse-symbol indented_block_body) [23939 24209])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24224 24228]))                          
                        :documentation "Close the connection to the HTTP server.")
                        (reparse-symbol indented_block_body) [24214 24547])
                    ("send" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24561 24565])
                            ("str" variable nil (reparse-symbol function_parameters) [24567 24570]))                          
                        :documentation "Send `str' to the server.")
                        (reparse-symbol indented_block_body) [24552 25666])
                    ("_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25683 25687])
                            ("s" variable nil (reparse-symbol function_parameters) [25689 25690]))                          
                        :documentation "Add a line of output to the current request buffer.

        Assumes that the line does *not* end with \\\\r\\\\n.
        ")
                        (reparse-symbol indented_block_body) [25671 25858])
                    ("_send_output" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25880 25884]))                          
                        :documentation "Send the currently buffered request and clear the buffer.

        Appends an extra \\\\r\\\\n to the buffer.
        ")
                        (reparse-symbol indented_block_body) [25863 26145])
                    ("putrequest" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26165 26169])
                            ("method" variable nil (reparse-symbol function_parameters) [26171 26177])
                            ("url" variable nil (reparse-symbol function_parameters) [26179 26182])
                            ("skip_host" variable nil (reparse-symbol function_parameters) [26184 26193])
                            ("skip_accept_encoding" variable nil (reparse-symbol function_parameters) [26197 26217]))                          
                        :documentation "Send a request to the server.

        `method' specifies an HTTP request method, e.g. 'GET'.
        `url' specifies the object being requested, e.g. '/index.html'.
        `skip_host' if True does not add automatically a 'Host:' header
        `skip_accept_encoding' if True does not add automatically an
           'Accept-Encoding:' header
        ")
                        (reparse-symbol indented_block_body) [26150 30902])
                    ("putheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [30921 30925])
                            ("header" variable nil (reparse-symbol function_parameters) [30927 30933])
                            ("value" variable nil (reparse-symbol function_parameters) [30935 30940]))                          
                        :documentation "Send a request header line to the server.

        For example: h.putheader('Accept', 'text/html')
        ")
                        (reparse-symbol indented_block_body) [30907 31214])
                    ("endheaders" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31234 31238]))                          
                        :documentation "Indicate that the last header line has been sent to the server.")
                        (reparse-symbol indented_block_body) [31219 31484])
                    ("request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31501 31505])
                            ("method" variable nil (reparse-symbol function_parameters) [31507 31513])
                            ("url" variable nil (reparse-symbol function_parameters) [31515 31518])
                            ("body" variable nil (reparse-symbol function_parameters) [31520 31524])
                            ("headers" variable nil (reparse-symbol function_parameters) [31531 31538]))                          
                        :documentation "Send a complete request to the server.")
                        (reparse-symbol indented_block_body) [31489 31946])
                    ("_send_request" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [31969 31973])
                            ("method" variable nil (reparse-symbol function_parameters) [31975 31981])
                            ("url" variable nil (reparse-symbol function_parameters) [31983 31986])
                            ("body" variable nil (reparse-symbol function_parameters) [31988 31992])
                            ("headers" variable nil (reparse-symbol function_parameters) [31994 32001]))                          )
                        (reparse-symbol indented_block_body) [31951 33181])
                    ("getresponse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [33202 33206]))                          )
                        (reparse-symbol indented_block_body) [33186 35070]))                  
                :type "class")
                nil [21336 35070])
            ("HTTP" type
               (:members 
                  ( ("\"Compatibility class with httplib.py from 1.5.\"" code nil (reparse-symbol indented_block_body) [35088 35135])
                    ("_http_vsn" variable nil (reparse-symbol indented_block_body) [35141 35155])
                    ("_http_vsn_str" variable nil (reparse-symbol indented_block_body) [35160 35186])
                    ("debuglevel" variable nil (reparse-symbol indented_block_body) [35192 35206])
                    ("_connection_class" variable nil (reparse-symbol indented_block_body) [35212 35246])
                    ("__init__" function
                       (:suite 
                          ( ("\"Provide a default host, since the superclass requires one.\"" code nil (reparse-symbol indented_block_body) [35313 35373])
                            ("if" code nil (reparse-symbol indented_block_body) [35446 35484])
                            ("self" code nil (reparse-symbol indented_block_body) [35706 35761]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35265 35269])
                            ("host" variable nil (reparse-symbol function_parameters) [35271 35275])
                            ("port" variable nil (reparse-symbol function_parameters) [35280 35284])
                            ("strict" variable nil (reparse-symbol function_parameters) [35291 35297]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [35252 35762])
                    ("_setup" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [35778 35782])
                            ("conn" variable nil (reparse-symbol function_parameters) [35784 35788]))                          )
                        (reparse-symbol indented_block_body) [35767 36148])
                    ("connect" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36165 36169])
                            ("host" variable nil (reparse-symbol function_parameters) [36171 36175])
                            ("port" variable nil (reparse-symbol function_parameters) [36182 36186]))                          )
                        (reparse-symbol indented_block_body) [36153 36381])
                    ("getfile" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36398 36402]))                          )
                        (reparse-symbol indented_block_body) [36386 36508])
                    ("putheader" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36527 36531])
                            ("header" variable nil (reparse-symbol function_parameters) [36533 36539])
                            ("values" variable nil (reparse-symbol function_parameters) [36541 36548]))                          )
                        (reparse-symbol indented_block_body) [36513 36668])
                    ("getreply" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [36686 36690]))                          
                        :documentation "Compat definition since superclass does not define it.

        Returns a tuple consisting of:
        - server status code (e.g. '200' if all goes well)
        - server \"reason\" corresponding to status code
        - any RFC822 headers in the response from the server
        ")
                        (reparse-symbol indented_block_body) [36673 37714])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [37729 37733]))                          )
                        (reparse-symbol indented_block_body) [37719 38077]))                  
                :type "class")
                nil [35072 38077])
            ("try" code nil nil [38078 40114])
            ("HTTPException" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [40278 40282]))                  
                :type "class")
                nil [40116 40283])
            ("NotConnected" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [40323 40327]))                  
                :type "class")
                nil [40284 40328])
            ("InvalidURL" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [40366 40370]))                  
                :type "class")
                nil [40329 40371])
            ("UnknownProtocol" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [40451 40471])
                            ("self" variable nil (reparse-symbol indented_block_body) [40480 40502]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40427 40431])
                            ("version" variable nil (reparse-symbol function_parameters) [40433 40440]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40414 40503]))                  
                :type "class")
                nil [40372 40503])
            ("UnknownTransferEncoding" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [40554 40558]))                  
                :type "class")
                nil [40504 40559])
            ("UnimplementedFileMode" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [40608 40612]))                  
                :type "class")
                nil [40560 40613])
            ("IncompleteRead" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [40707 40727])
                            ("self" variable nil (reparse-symbol indented_block_body) [40736 40758])
                            ("self" variable nil (reparse-symbol indented_block_body) [40767 40791]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40668 40672])
                            ("partial" variable nil (reparse-symbol function_parameters) [40674 40681])
                            ("expected" variable nil (reparse-symbol function_parameters) [40683 40691]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [40655 40792])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [40809 40813]))                          )
                        (reparse-symbol indented_block_body) [40796 41014])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41030 41034]))                          )
                        (reparse-symbol indented_block_body) [41018 41063]))                  
                :type "class")
                nil [40614 41063])
            ("ImproperConnectionState" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [41114 41118]))                  
                :type "class")
                nil [41064 41119])
            ("CannotSendRequest" type
               (:superclasses ("ImproperConnectionState")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [41174 41178]))                  
                :type "class")
                nil [41120 41179])
            ("CannotSendHeader" type
               (:superclasses ("ImproperConnectionState")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [41233 41237]))                  
                :type "class")
                nil [41180 41238])
            ("ResponseNotReady" type
               (:superclasses ("ImproperConnectionState")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [41292 41296]))                  
                :type "class")
                nil [41239 41297])
            ("BadStatusLine" type
               (:superclasses ("HTTPException")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [41372 41389])
                            ("self" variable nil (reparse-symbol indented_block_body) [41398 41414]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41351 41355])
                            ("line" variable nil (reparse-symbol function_parameters) [41357 41361]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41338 41415]))                  
                :type "class")
                nil [41298 41415])
            ("error" variable nil nil [41446 41467])
            ("LineAndFileWrapper" type
               (:documentation "A limited file-like object for HTTP/0.9 responses."
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [41858 41875])
                            ("self" variable nil (reparse-symbol indented_block_body) [41884 41901])
                            ("self" variable nil (reparse-symbol indented_block_body) [41910 41933])
                            ("self" variable nil (reparse-symbol indented_block_body) [41942 41963])
                            ("self" variable nil (reparse-symbol indented_block_body) [41972 41999]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [41831 41835])
                            ("line" variable nil (reparse-symbol function_parameters) [41837 41841])
                            ("file" variable nil (reparse-symbol function_parameters) [41843 41847]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [41818 42000])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42021 42025])
                            ("attr" variable nil (reparse-symbol function_parameters) [42027 42031]))                          )
                        (reparse-symbol indented_block_body) [42005 42075])
                    ("_done" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42090 42094]))                          )
                        (reparse-symbol indented_block_body) [42080 42413])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [42427 42431])
                            ("amt" variable nil (reparse-symbol function_parameters) [42433 42436]))                          )
                        (reparse-symbol indented_block_body) [42418 43118])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43136 43140]))                          )
                        (reparse-symbol indented_block_body) [43123 43328])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [43347 43351])
                            ("size" variable nil (reparse-symbol function_parameters) [43353 43357]))                          )
                        (reparse-symbol indented_block_body) [43333 43675]))                  
                :type "class")
                nil [41469 43675])
            ("test" function (:documentation "Test this module.

    A hodge podge of tests collected here, because they have too many
    external dependencies for the regular test suite.
    ") nil [43676 45448])
            ("if" code nil nil [45449 45487]))          
      :file "httplib.py"
      :pointmax 45487
      :fsize 45486
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "mimetools.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Various tools used by MIME-reading or MIME-writing programs.\"\"\"" code nil nil [1 67])
            ("os" include nil nil [70 79])
            ("sys" include nil nil [80 90])
            ("tempfile" include nil nil [91 106])
            ("warnings" include nil nil [107 158])
            ("with" code nil nil [159 306])
            ("warnings" include nil nil [307 336])
            ("warnpy3k" code nil nil [337 436])
            ("__all__" variable nil nil [438 534])
            ("Message" type
               (:documentation "A derived class of rfc822.Message that knows about MIME headers and
    contains some hooks for decoding encoded and multipart messages."
                :superclasses ("rfc822.Message")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("rfc822" code nil (reparse-symbol indented_block_body) [765 808])
                            ("self" variable nil (reparse-symbol indented_block_body) [817 900])
                            ("self" variable nil (reparse-symbol indented_block_body) [909 975])
                            ("self" code nil (reparse-symbol indented_block_body) [984 1000])
                            ("self" code nil (reparse-symbol indented_block_body) [1009 1026]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [732 736])
                            ("fp" variable nil (reparse-symbol function_parameters) [738 740])
                            ("seekable" variable nil (reparse-symbol function_parameters) [742 750]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [719 1027])
                    ("parsetype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1046 1050]))                          )
                        (reparse-symbol indented_block_body) [1032 1535])
                    ("parseplist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1555 1559]))                          )
                        (reparse-symbol indented_block_body) [1540 2072])
                    ("getplist" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2090 2094]))                          )
                        (reparse-symbol indented_block_body) [2077 2123])
                    ("getparam" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2141 2145])
                            ("name" variable nil (reparse-symbol function_parameters) [2147 2151]))                          )
                        (reparse-symbol indented_block_body) [2128 2334])
                    ("getparamnames" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2357 2361]))                          )
                        (reparse-symbol indented_block_body) [2339 2531])
                    ("getencoding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2552 2556]))                          )
                        (reparse-symbol indented_block_body) [2536 2668])
                    ("gettype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2685 2689]))                          )
                        (reparse-symbol indented_block_body) [2673 2717])
                    ("getmaintype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2738 2742]))                          )
                        (reparse-symbol indented_block_body) [2722 2774])
                    ("getsubtype" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2794 2798]))                          )
                        (reparse-symbol indented_block_body) [2779 2829]))                  
                :type "class")
                nil [536 2829])
            ("try" code nil nil [2874 2951])
            ("_counter_lock" variable nil nil [2951 2989])
            ("del" code nil nil [2990 3000])
            ("_counter" variable nil nil [3002 3014])
            ("_get_next_counter" function nil nil [3015 3174])
            ("_prefix" variable nil nil [3175 3189])
            ("choose_boundary" function (:documentation "Return a string usable as a multipart boundary.

    The string chosen is unique within a single program run, and
    incorporates the user id (if available), process id (if available),
    and current time.  So it's very unlikely the returned string appears
    in message text, but there's no guarantee.

    The boundary contains dots so you have to quote it in the header.") nil [3191 4148])
            ("decode" function
               (:documentation "Decode common content-transfer-encodings (base64, quopri, uuencode)."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [4224 4229])
                    ("output" variable nil (reparse-symbol function_parameters) [4231 4237])
                    ("encoding" variable nil (reparse-symbol function_parameters) [4239 4247]))                  )
                nil [4213 4918])
            ("encode" function
               (:documentation "Encode common content-transfer-encodings (base64, quopri, uuencode)."
                :arguments 
                  ( ("input" variable nil (reparse-symbol function_parameters) [4930 4935])
                    ("output" variable nil (reparse-symbol function_parameters) [4937 4943])
                    ("encoding" variable nil (reparse-symbol function_parameters) [4945 4953]))                  )
                nil [4919 5627])
            ("uudecode_pipe" variable nil nil [5747 5866])
            ("decodetab" variable nil nil [5868 6171])
            ("encodetab" variable nil nil [6173 6494])
            ("pipeto" function (:arguments 
              ( ("input" variable nil (reparse-symbol function_parameters) [6507 6512])
                ("command" variable nil (reparse-symbol function_parameters) [6514 6521]))              ) nil [6496 6604])
            ("pipethrough" function (:arguments 
              ( ("input" variable nil (reparse-symbol function_parameters) [6621 6626])
                ("command" variable nil (reparse-symbol function_parameters) [6628 6635])
                ("output" variable nil (reparse-symbol function_parameters) [6637 6643]))              ) nil [6605 6884])
            ("copyliteral" function (:arguments 
              ( ("input" variable nil (reparse-symbol function_parameters) [6901 6906])
                ("output" variable nil (reparse-symbol function_parameters) [6908 6914]))              ) nil [6885 7016])
            ("copybinary" function (:arguments 
              ( ("input" variable nil (reparse-symbol function_parameters) [7032 7037])
                ("output" variable nil (reparse-symbol function_parameters) [7039 7045]))              ) nil [7017 7169]))          
      :file "mimetools.py"
      :pointmax 7169
      :fsize 7168
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "random.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Random variable generators.

    integers
    --------
           uniform within range

    sequences
    ---------
           pick random element
           pick random sample
           generate random permutation

    distributions on the real line:
    ------------------------------
           uniform
           triangular
           normal (Gaussian)
           lognormal
           negative exponential
           gamma
           beta
           pareto
           Weibull

    distributions on the circle (angles 0 to 2pi)
    ---------------------------------------------
           circular uniform
           von Mises

General notes on the underlying Mersenne Twister core generator:

* The period is 2**19937-1.
* It is one of the most extensively tested generators in existence.
* Without a direct way to compute N steps forward, the semantics of
  jumpahead(n) are weakened to simply jump to another distant state and rely
  on the large period to avoid overlapping sequences.
* The random() method is implemented in C, executes in a single Python step,
  and is, therefore, threadsafe.

\"\"\"" code nil nil [1 1111])
            ("__future__" include nil nil [1113 1144])
            ("warnings" include nil nil [1145 1179])
            ("types" include nil nil [1180 1264])
            ("math" include nil nil [1265 1341])
            ("math" include nil nil [1342 1413])
            ("os" include nil nil [1414 1448])
            ("binascii" include nil nil [1449 1489])
            ("__all__" variable nil nil [1491 1875])
            ("NV_MAGICCONST" code nil nil [1877 1918])
            ("TWOPI" code nil nil [1919 1934])
            ("LOG4" variable nil nil [1935 1951])
            ("SG_MAGICCONST" code nil nil [1952 1983])
            ("BPF" variable nil nil [1984 1992])
            ("RECIP_BPF" variable nil nil [2028 2047])
            ("_random" include nil nil [2230 2244])
            ("Random" type
               (:documentation "Random number generator base class used by bound module functions.

    Used to instantiate instances of Random to get generators that don't
    share state.  Especially useful for multi-threaded programs, creating
    a different instance of Random for each thread, and using the jumpahead()
    method to ensure that the generated sequences seen by each thread don't
    overlap.

    Class Random can also be subclassed if you want to use a different basic
    generator of your own devising: in that case, override the following
    methods: random(), seed(), getstate(), setstate() and jumpahead().
    Optionally, implement a getrandbits() method so that randrange() can cover
    arbitrarily large ranges.

    "
                :superclasses ("_random.Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [3010 3021])
                    ("__init__" function
                       (:suite 
                          ( ("\"\"\"Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        \"\"\"" code nil (reparse-symbol indented_block_body) [3095 3202])
                            ("self" code nil (reparse-symbol indented_block_body) [3212 3224])
                            ("self" variable nil (reparse-symbol indented_block_body) [3233 3255]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3072 3076])
                            ("x" variable nil (reparse-symbol function_parameters) [3078 3079]))                          
                        :documentation "Initialize an instance.

        Optional argument x controls seeding, as for Random.seed().
        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3059 3256])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3270 3274])
                            ("a" variable nil (reparse-symbol function_parameters) [3276 3277]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.
        ")
                        (reparse-symbol indented_block_body) [3261 3854])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3872 3876]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [3859 4028])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4046 4050])
                            ("state" variable nil (reparse-symbol function_parameters) [4052 4057]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [4033 5095])
                    ("__getstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5319 5323]))                          )
                        (reparse-symbol indented_block_body) [5302 5370])
                    ("__setstate__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5392 5396])
                            ("state" variable nil (reparse-symbol function_parameters) [5398 5403]))                          )
                        (reparse-symbol indented_block_body) [5375 5449])
                    ("__reduce__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5469 5473]))                          )
                        (reparse-symbol indented_block_body) [5454 5527])
                    ("randrange" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5608 5612])
                            ("start" variable nil (reparse-symbol function_parameters) [5614 5619])
                            ("stop" variable nil (reparse-symbol function_parameters) [5621 5625])
                            ("step" variable nil (reparse-symbol function_parameters) [5632 5636])
                            ("int" variable nil (reparse-symbol function_parameters) [5640 5643])
                            ("default" variable nil (reparse-symbol function_parameters) [5649 5656])
                            ("maxwidth" variable nil (reparse-symbol function_parameters) [5681 5689]))                          
                        :documentation "Choose a random item from range(start, stop[, step]).

        This fixes the problem with randint() which includes the
        endpoint; in Python this is usually not what you want.
        Do not supply the 'int', 'default', and 'maxwidth' arguments.
        ")
                        (reparse-symbol indented_block_body) [5594 8272])
                    ("randint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8289 8293])
                            ("a" variable nil (reparse-symbol function_parameters) [8295 8296])
                            ("b" variable nil (reparse-symbol function_parameters) [8298 8299]))                          
                        :documentation "Return random integer in range [a, b], including both end points.
        ")
                        (reparse-symbol indented_block_body) [8277 8430])
                    ("_randbelow" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8450 8454])
                            ("n" variable nil (reparse-symbol function_parameters) [8456 8457])
                            ("_log" variable nil (reparse-symbol function_parameters) [8459 8463])
                            ("int" variable nil (reparse-symbol function_parameters) [8470 8473])
                            ("_maxwidth" variable nil (reparse-symbol function_parameters) [8479 8488])
                            ("_Method" variable nil (reparse-symbol function_parameters) [8517 8524])
                            ("_BuiltinMethod" variable nil (reparse-symbol function_parameters) [8538 8552]))                          
                        :documentation "Return a random int in the range [0,n)

        Handles the case where n has more bits than returned
        by a single call to the underlying generator.
        ")
                        (reparse-symbol indented_block_body) [8435 9589])
                    ("choice" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9668 9672])
                            ("seq" variable nil (reparse-symbol function_parameters) [9674 9677]))                          
                        :documentation "Choose a random element from a non-empty sequence.")
                        (reparse-symbol indented_block_body) [9657 9832])
                    ("shuffle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9849 9853])
                            ("x" variable nil (reparse-symbol function_parameters) [9855 9856])
                            ("random" variable nil (reparse-symbol function_parameters) [9858 9864])
                            ("int" variable nil (reparse-symbol function_parameters) [9871 9874]))                          
                        :documentation "x, random=random.random -> shuffle list x in place; return None.

        Optional arg random is a 0-argument function returning a random
        float in [0.0, 1.0); by default, the standard random.random.
        ")
                        (reparse-symbol indented_block_body) [9837 10361])
                    ("sample" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10377 10381])
                            ("population" variable nil (reparse-symbol function_parameters) [10383 10393])
                            ("k" variable nil (reparse-symbol function_parameters) [10395 10396]))                          
                        :documentation "Chooses k unique random elements from a population sequence.

        Returns a new list containing elements from the population while
        leaving the original population unchanged.  The resulting list is
        in selection order so that all sub-slices will also be valid random
        samples.  This allows raffle winners (the sample) to be partitioned
        into grand prize and second place winners (the subslices).

        Members of the population need not be hashable or unique.  If the
        population contains repeats, then each occurrence is a possible
        selection in the sample.

        To choose a sample in a range of integers, use xrange as an argument.
        This is especially fast and space efficient for sampling from a
        large population:   sample(xrange(10000000), 60)
        ")
                        (reparse-symbol indented_block_body) [10366 13747])
                    ("uniform" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13902 13906])
                            ("a" variable nil (reparse-symbol function_parameters) [13908 13909])
                            ("b" variable nil (reparse-symbol function_parameters) [13911 13912]))                          )
                        (reparse-symbol indented_block_body) [13890 14039])
                    ("triangular" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14116 14120])
                            ("low" variable nil (reparse-symbol function_parameters) [14122 14125])
                            ("high" variable nil (reparse-symbol function_parameters) [14131 14135])
                            ("mode" variable nil (reparse-symbol function_parameters) [14141 14145]))                          
                        :documentation "Triangular distribution.

        Continuous distribution bounded by given lower and upper limits,
        and having a given mode value in-between.

        http://en.wikipedia.org/wiki/Triangular_distribution

        ")
                        (reparse-symbol indented_block_body) [14101 14630])
                    ("normalvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [14719 14723])
                            ("mu" variable nil (reparse-symbol function_parameters) [14725 14727])
                            ("sigma" variable nil (reparse-symbol function_parameters) [14729 14734]))                          
                        :documentation "Normal distribution.

        mu is the mean, and sigma is the standard deviation.

        ")
                        (reparse-symbol indented_block_body) [14701 15394])
                    ("lognormvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15487 15491])
                            ("mu" variable nil (reparse-symbol function_parameters) [15493 15495])
                            ("sigma" variable nil (reparse-symbol function_parameters) [15497 15502]))                          
                        :documentation "Log normal distribution.

        If you take the natural logarithm of this distribution, you'll get a
        normal distribution with mean mu and standard deviation sigma.
        mu can have any value, and sigma must be greater than zero.

        ")
                        (reparse-symbol indented_block_body) [15468 15822])
                    ("expovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15914 15918])
                            ("lambd" variable nil (reparse-symbol function_parameters) [15920 15925]))                          
                        :documentation "Exponential distribution.

        lambd is 1.0 divided by the desired mean.  It should be
        nonzero.  (The parameter would be called \"lambda\", but that is
        a reserved word in Python.)  Returned values range from 0 to
        positive infinity if lambd is positive, and from negative
        infinity to 0 if lambd is negative.

        ")
                        (reparse-symbol indented_block_body) [15898 16508])
                    ("vonmisesvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16602 16606])
                            ("mu" variable nil (reparse-symbol function_parameters) [16608 16610])
                            ("kappa" variable nil (reparse-symbol function_parameters) [16612 16617]))                          
                        :documentation "Circular data distribution.

        mu is the mean angle, expressed in radians between 0 and 2*pi, and
        kappa is the concentration parameter, which must be greater than or
        equal to zero.  If kappa is equal to zero, this distribution reduces
        to a uniform random angle over the range 0 to 2*pi.

        ")
                        (reparse-symbol indented_block_body) [16582 18035])
                    ("gammavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [18122 18126])
                            ("alpha" variable nil (reparse-symbol function_parameters) [18128 18133])
                            ("beta" variable nil (reparse-symbol function_parameters) [18135 18139]))                          
                        :documentation "Gamma distribution.  Not the gamma function!

        Conditions on the parameters are alpha > 0 and beta > 0.

        ")
                        (reparse-symbol indented_block_body) [18105 20103])
                    ("gauss" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [20191 20195])
                            ("mu" variable nil (reparse-symbol function_parameters) [20197 20199])
                            ("sigma" variable nil (reparse-symbol function_parameters) [20201 20206]))                          
                        :documentation "Gaussian distribution.

        mu is the mean, and sigma is the standard deviation.  This is
        slightly faster than the normalvariate() function.

        Not thread-safe without a lock around calls.

        ")
                        (reparse-symbol indented_block_body) [20181 21517])
                    ("betavariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22010 22014])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22016 22021])
                            ("beta" variable nil (reparse-symbol function_parameters) [22023 22027]))                          
                        :documentation "Beta distribution.

        Conditions on the parameters are alpha > 0 and beta > 0.
        Returned values range between 0 and 1.

        ")
                        (reparse-symbol indented_block_body) [21994 22485])
                    ("paretovariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22561 22565])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22567 22572]))                          
                        :documentation "Pareto distribution.  alpha is the shape parameter.")
                        (reparse-symbol indented_block_body) [22543 22737])
                    ("weibullvariate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [22815 22819])
                            ("alpha" variable nil (reparse-symbol function_parameters) [22821 22826])
                            ("beta" variable nil (reparse-symbol function_parameters) [22828 22832]))                          
                        :documentation "Weibull distribution.

        alpha is the scale parameter and beta is the shape parameter.

        ")
                        (reparse-symbol indented_block_body) [22796 23084]))                  
                :type "class")
                nil [2246 23084])
            ("WichmannHill" type
               (:superclasses ("Random")
                :members 
                  ( ("VERSION" variable nil (reparse-symbol indented_block_body) [23177 23188])
                    ("seed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [23235 23239])
                            ("a" variable nil (reparse-symbol function_parameters) [23241 23242]))                          
                        :documentation "Initialize internal state from hashable object.

        None or no argument seeds from current time or from an operating
        system specific randomness source if available.

        If a is not None or an int or long, hash(a) is used instead.

        If a is an int or long, a is used directly.  Distinct values between
        0 and 27814431486575L inclusive are guaranteed to yield distinct
        internal states (this guarantee is specific to the default
        Wichmann-Hill generator).
        ")
                        (reparse-symbol indented_block_body) [23226 24250])
                    ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [24266 24270]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [24255 25322])
                    ("getstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25340 25344]))                          
                        :documentation "Return internal state; can be passed to setstate() later.")
                        (reparse-symbol indented_block_body) [25327 25476])
                    ("setstate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25494 25498])
                            ("state" variable nil (reparse-symbol function_parameters) [25500 25505]))                          
                        :documentation "Restore internal state from object returned by getstate().")
                        (reparse-symbol indented_block_body) [25481 25887])
                    ("jumpahead" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [25906 25910])
                            ("n" variable nil (reparse-symbol function_parameters) [25912 25913]))                          
                        :documentation "Act as if n calls to random() were made, but quickly.

        n is an int, greater than or equal to 0.

        Example use:  If you have 2 threads and know that each will
        consume no more than a million random numbers, create two Random
        objects r1 and r2, then do
            r2.setstate(r1.getstate())
            r2.jumpahead(1000000)
        Then r1 and r2 will use guaranteed-disjoint segments of the full
        period.
        ")
                        (reparse-symbol indented_block_body) [25892 26655])
                    ("__whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [26673 26677])
                            ("x" variable nil (reparse-symbol function_parameters) [26679 26680])
                            ("y" variable nil (reparse-symbol function_parameters) [26684 26685])
                            ("z" variable nil (reparse-symbol function_parameters) [26689 26690]))                          
                        :documentation "Set the Wichmann-Hill seed from (x, y, z).

        These must be integers in the range [0, 256).
        ")
                        (reparse-symbol indented_block_body) [26660 27459])
                    ("whseed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [27475 27479])
                            ("a" variable nil (reparse-symbol function_parameters) [27481 27482]))                          
                        :documentation "Seed from hashable object's hash code.

        None or no argument seeds from current time.  It is not guaranteed
        that objects with distinct hash codes lead to distinct internal
        states.

        This is obsolete, provided for compatibility with the seed routine
        used prior to Python 2.1.  Use the .seed() method instead.
        ")
                        (reparse-symbol indented_block_body) [27464 28163]))                  
                :type "class")
                nil [23144 28163])
            ("SystemRandom" type
               (:documentation "Alternate random number generator using sources provided
    by the operating system (such as /dev/urandom on Unix or
    CryptGenRandom on Windows).

     Not available on all systems (see os.urandom() for details).
    "
                :superclasses ("Random")
                :members 
                  ( ("random" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28511 28515]))                          
                        :documentation "Get the next random number in the range [0.0, 1.0).")
                        (reparse-symbol indented_block_body) [28500 28650])
                    ("getrandbits" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [28671 28675])
                            ("k" variable nil (reparse-symbol function_parameters) [28677 28678]))                          
                        :documentation "getrandbits(k) -> x.  Generates a long int with k random bits.")
                        (reparse-symbol indented_block_body) [28655 29130])
                    ("_stub" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29145 29149])
                            ("args" variable nil (reparse-symbol function_parameters) [29151 29156])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29158 29164]))                          )
                        (reparse-symbol indented_block_body) [29135 29258])
                    ("seed" variable nil (reparse-symbol indented_block_body) [29262 29286])
                    ("_notimplemented" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [29312 29316])
                            ("args" variable nil (reparse-symbol function_parameters) [29318 29323])
                            ("kwds" variable nil (reparse-symbol function_parameters) [29325 29331]))                          )
                        (reparse-symbol indented_block_body) [29292 29490])
                    ("getstate" variable nil (reparse-symbol indented_block_body) [29494 29531]))                  
                :type "class")
                nil [28235 29532])
            ("_test_generator" function (:arguments 
              ( ("n" variable nil (reparse-symbol function_parameters) [29612 29613])
                ("func" variable nil (reparse-symbol function_parameters) [29615 29619])
                ("args" variable nil (reparse-symbol function_parameters) [29621 29625]))              ) nil [29592 30146])
            ("_test" function (:arguments 
              ( ("N" variable nil (reparse-symbol function_parameters) [30158 30159]))              ) nil [30148 30946])
            ("_inst" variable nil nil [31278 31294])
            ("seed" variable nil nil [31295 31312])
            ("random" variable nil nil [31313 31334])
            ("uniform" variable nil nil [31335 31358])
            ("triangular" variable nil nil [31359 31388])
            ("randint" variable nil nil [31389 31412])
            ("choice" variable nil nil [31413 31434])
            ("randrange" variable nil nil [31435 31462])
            ("sample" variable nil nil [31463 31484])
            ("shuffle" variable nil nil [31485 31508])
            ("normalvariate" variable nil nil [31509 31544])
            ("lognormvariate" variable nil nil [31545 31582])
            ("expovariate" variable nil nil [31583 31614])
            ("vonmisesvariate" variable nil nil [31615 31654])
            ("gammavariate" variable nil nil [31655 31688])
            ("gauss" variable nil nil [31689 31708])
            ("betavariate" variable nil nil [31709 31740])
            ("paretovariate" variable nil nil [31741 31776])
            ("weibullvariate" variable nil nil [31777 31814])
            ("getstate" variable nil nil [31815 31840])
            ("setstate" variable nil nil [31841 31866])
            ("jumpahead" variable nil nil [31867 31894])
            ("getrandbits" variable nil nil [31895 31926])
            ("if" code nil nil [31928 31967]))          
      :file "random.py"
      :pointmax 31967
      :fsize 31966
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax '((NAME 14422 . 14423) (IF 14430 . 14432) (ELSE 14446 . 14450)))
    (semanticdb-table "bisect.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Bisection algorithms.\"\"\"" code nil nil [1 28])
            ("insort_right" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the right of the rightmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [47 48])
                    ("x" variable nil (reparse-symbol function_parameters) [50 51])
                    ("lo" variable nil (reparse-symbol function_parameters) [53 55])
                    ("hi" variable nil (reparse-symbol function_parameters) [59 61]))                  )
                nil [30 547])
            ("insort" variable nil nil [548 569])
            ("bisect_right" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e <= x, and all e in
    a[i:] have e > x.  So if x already appears in the list, a.insert(x) will
    insert just after the rightmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [615 616])
                    ("x" variable nil (reparse-symbol function_parameters) [618 619])
                    ("lo" variable nil (reparse-symbol function_parameters) [621 623])
                    ("hi" variable nil (reparse-symbol function_parameters) [627 629]))                  )
                nil [598 1254])
            ("bisect" variable nil nil [1255 1276])
            ("insort_left" function
               (:documentation "Insert item x in list a, and keep it sorted assuming a is sorted.

    If x is already in a, insert it to the left of the leftmost x.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1321 1322])
                    ("x" variable nil (reparse-symbol function_parameters) [1324 1325])
                    ("lo" variable nil (reparse-symbol function_parameters) [1327 1329])
                    ("hi" variable nil (reparse-symbol function_parameters) [1333 1335]))                  )
                nil [1305 1819])
            ("bisect_left" function
               (:documentation "Return the index where to insert item x in list a, assuming a is sorted.

    The return value i is such that all e in a[:i] have e < x, and all e in
    a[i:] have e >= x.  So if x already appears in the list, a.insert(x) will
    insert just before the leftmost x already there.

    Optional args lo (default 0) and hi (default len(a)) bound the
    slice of a to be searched.
    "
                :arguments 
                  ( ("a" variable nil (reparse-symbol function_parameters) [1837 1838])
                    ("x" variable nil (reparse-symbol function_parameters) [1840 1841])
                    ("lo" variable nil (reparse-symbol function_parameters) [1843 1845])
                    ("hi" variable nil (reparse-symbol function_parameters) [1849 1851]))                  )
                nil [1821 2476])
            ("try" code nil nil [2536 2663]))          
      :file "bisect.py"
      :pointmax 2663
      :fsize 2662
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "types.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Define names for all type symbols known in the standard interpreter.

Types that are part of optional modules (e.g. array) are not listed.
\"\"\"" code nil nil [1 146])
            ("sys" include nil nil [147 157])
            ("NoneType" variable nil nil [408 429])
            ("TypeType" variable nil nil [430 445])
            ("ObjectType" variable nil nil [446 465])
            ("IntType" variable nil nil [467 480])
            ("LongType" variable nil nil [481 496])
            ("FloatType" variable nil nil [497 514])
            ("BooleanType" variable nil nil [515 533])
            ("try" code nil nil [534 592])
            ("StringType" variable nil nil [593 609])
            ("try" code nil nil [801 926])
            ("BufferType" variable nil nil [927 946])
            ("TupleType" variable nil nil [948 965])
            ("ListType" variable nil nil [966 981])
            ("DictType" variable nil nil [982 1014])
            ("_f" function nil nil [1016 1031])
            ("FunctionType" variable nil nil [1031 1054])
            ("LambdaType" variable nil nil [1055 1086])
            ("try" code nil nil [1118 1229])
            ("_g" function nil nil [1230 1252])
            ("GeneratorType" variable nil nil [1252 1278])
            ("_C" type
               (:members 
                  ( ("_m" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1301 1305]))                          )
                        (reparse-symbol indented_block_body) [1294 1313]))                  
                :type "class")
                nil [1280 1313])
            ("ClassType" variable nil nil [1313 1333])
            ("UnboundMethodType" variable nil nil [1334 1365])
            ("_x" variable nil nil [1395 1404])
            ("InstanceType" variable nil nil [1405 1428])
            ("MethodType" variable nil nil [1429 1453])
            ("BuiltinFunctionType" variable nil nil [1455 1486])
            ("BuiltinMethodType" variable nil nil [1487 1522])
            ("ModuleType" variable nil nil [1558 1580])
            ("FileType" variable nil nil [1581 1596])
            ("XRangeType" variable nil nil [1597 1616])
            ("try" code nil nil [1618 1964])
            ("SliceType" variable nil nil [1965 1982])
            ("EllipsisType" variable nil nil [1983 2012])
            ("DictProxyType" variable nil nil [2014 2053])
            ("NotImplementedType" variable nil nil [2054 2095])
            ("GetSetDescriptorType" variable nil nil [2149 2200])
            ("MemberDescriptorType" variable nil nil [2201 2255])
            ("del" code nil nil [2257 2280]))          
      :file "types.py"
      :pointmax 2324
      :fsize 2323
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "sre_constants.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Internal support module for sre\"\"\"" code nil nil [296 333])
            ("MAGIC" variable nil nil [381 397])
            ("MAXREPEAT" variable nil nil [432 449])
            ("error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [557 561]))                  
                :type "class")
                nil [529 562])
            ("FAILURE" variable nil nil [576 595])
            ("SUCCESS" variable nil nil [596 615])
            ("ANY" variable nil nil [617 628])
            ("ANY_ALL" variable nil nil [629 648])
            ("ASSERT" variable nil nil [649 666])
            ("ASSERT_NOT" variable nil nil [667 692])
            ("AT" variable nil nil [693 702])
            ("BIGCHARSET" variable nil nil [703 728])
            ("BRANCH" variable nil nil [729 746])
            ("CALL" variable nil nil [747 760])
            ("CATEGORY" variable nil nil [761 782])
            ("CHARSET" variable nil nil [783 802])
            ("GROUPREF" variable nil nil [803 824])
            ("GROUPREF_IGNORE" variable nil nil [825 860])
            ("GROUPREF_EXISTS" variable nil nil [861 896])
            ("IN" variable nil nil [897 906])
            ("IN_IGNORE" variable nil nil [907 930])
            ("INFO" variable nil nil [931 944])
            ("JUMP" variable nil nil [945 958])
            ("LITERAL" variable nil nil [959 978])
            ("LITERAL_IGNORE" variable nil nil [979 1012])
            ("MARK" variable nil nil [1013 1026])
            ("MAX_REPEAT" variable nil nil [1027 1052])
            ("MAX_UNTIL" variable nil nil [1053 1076])
            ("MIN_REPEAT" variable nil nil [1077 1102])
            ("MIN_UNTIL" variable nil nil [1103 1126])
            ("NEGATE" variable nil nil [1127 1144])
            ("NOT_LITERAL" variable nil nil [1145 1172])
            ("NOT_LITERAL_IGNORE" variable nil nil [1173 1214])
            ("RANGE" variable nil nil [1215 1230])
            ("REPEAT" variable nil nil [1231 1248])
            ("REPEAT_ONE" variable nil nil [1249 1274])
            ("SUBPATTERN" variable nil nil [1275 1300])
            ("MIN_REPEAT_ONE" variable nil nil [1301 1334])
            ("AT_BEGINNING" variable nil nil [1348 1377])
            ("AT_BEGINNING_LINE" variable nil nil [1378 1417])
            ("AT_BEGINNING_STRING" variable nil nil [1418 1461])
            ("AT_BOUNDARY" variable nil nil [1462 1489])
            ("AT_NON_BOUNDARY" variable nil nil [1490 1525])
            ("AT_END" variable nil nil [1526 1543])
            ("AT_END_LINE" variable nil nil [1544 1571])
            ("AT_END_STRING" variable nil nil [1572 1603])
            ("AT_LOC_BOUNDARY" variable nil nil [1604 1639])
            ("AT_LOC_NON_BOUNDARY" variable nil nil [1640 1683])
            ("AT_UNI_BOUNDARY" variable nil nil [1684 1719])
            ("AT_UNI_NON_BOUNDARY" variable nil nil [1720 1763])
            ("CATEGORY_DIGIT" variable nil nil [1778 1811])
            ("CATEGORY_NOT_DIGIT" variable nil nil [1812 1853])
            ("CATEGORY_SPACE" variable nil nil [1854 1887])
            ("CATEGORY_NOT_SPACE" variable nil nil [1888 1929])
            ("CATEGORY_WORD" variable nil nil [1930 1961])
            ("CATEGORY_NOT_WORD" variable nil nil [1962 2001])
            ("CATEGORY_LINEBREAK" variable nil nil [2002 2043])
            ("CATEGORY_NOT_LINEBREAK" variable nil nil [2044 2093])
            ("CATEGORY_LOC_WORD" variable nil nil [2094 2133])
            ("CATEGORY_LOC_NOT_WORD" variable nil nil [2134 2181])
            ("CATEGORY_UNI_DIGIT" variable nil nil [2182 2223])
            ("CATEGORY_UNI_NOT_DIGIT" variable nil nil [2224 2273])
            ("CATEGORY_UNI_SPACE" variable nil nil [2274 2315])
            ("CATEGORY_UNI_NOT_SPACE" variable nil nil [2316 2365])
            ("CATEGORY_UNI_WORD" variable nil nil [2366 2405])
            ("CATEGORY_UNI_NOT_WORD" variable nil nil [2406 2453])
            ("CATEGORY_UNI_LINEBREAK" variable nil nil [2454 2503])
            ("CATEGORY_UNI_NOT_LINEBREAK" variable nil nil [2504 2561])
            ("OPCODES" variable nil nil [2563 3060])
            ("ATCODES" variable nil nil [3062 3286])
            ("CHCODES" variable nil nil [3288 3702])
            ("makedict" function (:arguments 
              ( ("list" variable nil (reparse-symbol function_parameters) [3717 3721]))              ) nil [3704 3818])
            ("OPCODES" variable nil nil [3819 3846])
            ("ATCODES" variable nil nil [3847 3874])
            ("CHCODES" variable nil nil [3875 3902])
            ("OP_IGNORE" variable nil nil [3952 4082])
            ("AT_MULTILINE" variable nil nil [4084 4163])
            ("AT_LOCALE" variable nil nil [4165 4255])
            ("AT_UNICODE" variable nil nil [4257 4348])
            ("CH_LOCALE" variable nil nil [4350 4704])
            ("CH_UNICODE" variable nil nil [4706 5085])
            ("SRE_FLAG_TEMPLATE" variable nil nil [5095 5116])
            ("SRE_FLAG_IGNORECASE" variable nil nil [5156 5179])
            ("SRE_FLAG_LOCALE" variable nil nil [5199 5218])
            ("SRE_FLAG_MULTILINE" variable nil nil [5242 5264])
            ("SRE_FLAG_DOTALL" variable nil nil [5300 5320])
            ("SRE_FLAG_UNICODE" variable nil nil [5355 5376])
            ("SRE_FLAG_VERBOSE" variable nil nil [5398 5419])
            ("SRE_FLAG_DEBUG" variable nil nil [5453 5473])
            ("SRE_INFO_PREFIX" variable nil nil [5514 5533])
            ("SRE_INFO_LITERAL" variable nil nil [5547 5567])
            ("SRE_INFO_CHARSET" variable nil nil [5614 5634])
            ("if" code nil nil [5683 7138]))          
      :file "sre_constants.py"
      :pointmax 7138
      :fsize 7137
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "stat.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Constants/functions for interpreting results of os.stat() and os.lstat().

Suggested usage: from stat import *
\"\"\"" code nil nil [1 118])
            ("ST_MODE" variable nil nil [190 202])
            ("ST_INO" variable nil nil [203 215])
            ("ST_DEV" variable nil nil [216 228])
            ("ST_NLINK" variable nil nil [229 241])
            ("ST_UID" variable nil nil [242 254])
            ("ST_GID" variable nil nil [255 267])
            ("ST_SIZE" variable nil nil [268 280])
            ("ST_ATIME" variable nil nil [281 293])
            ("ST_MTIME" variable nil nil [294 306])
            ("ST_CTIME" variable nil nil [307 319])
            ("S_IMODE" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [363 367]))              ) nil [351 394])
            ("S_IFMT" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [406 410]))              ) nil [395 439])
            ("S_IFDIR" variable nil nil [536 554])
            ("S_IFCHR" variable nil nil [555 573])
            ("S_IFBLK" variable nil nil [574 592])
            ("S_IFREG" variable nil nil [593 611])
            ("S_IFIFO" variable nil nil [612 630])
            ("S_IFLNK" variable nil nil [631 649])
            ("S_IFSOCK" variable nil nil [650 668])
            ("S_ISDIR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [722 726]))              ) nil [710 764])
            ("S_ISCHR" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [777 781]))              ) nil [765 819])
            ("S_ISBLK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [832 836]))              ) nil [820 874])
            ("S_ISREG" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [887 891]))              ) nil [875 929])
            ("S_ISFIFO" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [943 947]))              ) nil [930 985])
            ("S_ISLNK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [998 1002]))              ) nil [986 1040])
            ("S_ISSOCK" function (:arguments 
              ( ("mode" variable nil (reparse-symbol function_parameters) [1054 1058]))              ) nil [1041 1097])
            ("S_ISUID" variable nil nil [1127 1142])
            ("S_ISGID" variable nil nil [1143 1158])
            ("S_ENFMT" variable nil nil [1159 1176])
            ("S_ISVTX" variable nil nil [1177 1192])
            ("S_IREAD" variable nil nil [1193 1208])
            ("S_IWRITE" variable nil nil [1209 1225])
            ("S_IEXEC" variable nil nil [1226 1241])
            ("S_IRWXU" variable nil nil [1242 1257])
            ("S_IRUSR" variable nil nil [1258 1273])
            ("S_IWUSR" variable nil nil [1274 1289])
            ("S_IXUSR" variable nil nil [1290 1305])
            ("S_IRWXG" variable nil nil [1306 1321])
            ("S_IRGRP" variable nil nil [1322 1337])
            ("S_IWGRP" variable nil nil [1338 1353])
            ("S_IXGRP" variable nil nil [1354 1369])
            ("S_IRWXO" variable nil nil [1370 1385])
            ("S_IROTH" variable nil nil [1386 1401])
            ("S_IWOTH" variable nil nil [1402 1417])
            ("S_IXOTH" variable nil nil [1418 1433])
            ("UF_NODUMP" variable nil nil [1459 1484])
            ("UF_IMMUTABLE" variable nil nil [1485 1510])
            ("UF_APPEND" variable nil nil [1511 1536])
            ("UF_OPAQUE" variable nil nil [1537 1562])
            ("UF_NOUNLINK" variable nil nil [1563 1588])
            ("SF_ARCHIVED" variable nil nil [1589 1614])
            ("SF_IMMUTABLE" variable nil nil [1615 1640])
            ("SF_APPEND" variable nil nil [1641 1666])
            ("SF_NOUNLINK" variable nil nil [1667 1692])
            ("SF_SNAPSHOT" variable nil nil [1693 1718]))          
      :file "stat.py"
      :pointmax 1719
      :fsize 1718
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "genericpath.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"
Path operations common to more than one OS
Do not use directly.  The OS specific modules import the appropriate
functions from this module themselves.
\"\"\"" code nil nil [1 159])
            ("os" include nil nil [160 169])
            ("stat" include nil nil [170 181])
            ("__all__" variable nil nil [183 296])
            ("exists" function
               (:documentation "Test whether a path exists.  Returns False for broken symbolic links"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [405 409]))                  )
                nil [394 585])
            ("isfile" function
               (:documentation "Test whether a path is a regular file"
                :arguments 
                  ( ("path" variable nil (reparse-symbol function_parameters) [724 728]))                  )
                nil [713 893])
            ("isdir" function
               (:documentation "Return true if the pathname refers to an existing directory."
                :arguments 
                  ( ("s" variable nil (reparse-symbol function_parameters) [1055 1056]))                  )
                nil [1045 1241])
            ("getsize" function
               (:documentation "Return the size of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1255 1263]))                  )
                nil [1243 1363])
            ("getmtime" function
               (:documentation "Return the last modification time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1378 1386]))                  )
                nil [1365 1505])
            ("getatime" function
               (:documentation "Return the last access time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1520 1528]))                  )
                nil [1507 1641])
            ("getctime" function
               (:documentation "Return the metadata change time of a file, reported by os.stat()."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1656 1664]))                  )
                nil [1643 1781])
            ("commonprefix" function (:arguments 
              ( ("m" variable nil (reparse-symbol function_parameters) [1850 1851]))              ) nil [1833 2082])
            ("_splitext" function
               (:documentation "Split the extension from a pathname.

    Extension is everything from the last dot to the end, ignoring
    leading dots.  Returns \"(root, ext)\"; ext may be empty."
                :arguments 
                  ( ("p" variable nil (reparse-symbol function_parameters) [2382 2383])
                    ("sep" variable nil (reparse-symbol function_parameters) [2385 2388])
                    ("altsep" variable nil (reparse-symbol function_parameters) [2390 2396])
                    ("extsep" variable nil (reparse-symbol function_parameters) [2398 2404]))                  )
                nil [2368 3021]))          
      :file "genericpath.py"
      :pointmax 3021
      :fsize 3020
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "warnings.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Python part of the warnings subsystem.\"\"\"" code nil nil [1 45])
            ("linecache" include nil nil [172 188])
            ("sys" include nil nil [189 199])
            ("types" include nil nil [200 212])
            ("__all__" variable nil nil [214 328])
            ("warnpy3k" function
               (:documentation "Issue a deprecation warning for Python 3.x related changes.

    Warnings are omitted unless Python is started with the -3 option.
    "
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [344 351])
                    ("category" variable nil (reparse-symbol function_parameters) [353 361])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [368 378]))                  )
                nil [331 670])
            ("_show_warning" function
               (:documentation "Hook to write a warning to a file; replace if you like."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [689 696])
                    ("category" variable nil (reparse-symbol function_parameters) [698 706])
                    ("filename" variable nil (reparse-symbol function_parameters) [708 716])
                    ("lineno" variable nil (reparse-symbol function_parameters) [718 724])
                    ("file" variable nil (reparse-symbol function_parameters) [726 730])
                    ("line" variable nil (reparse-symbol function_parameters) [737 741]))                  )
                nil [671 1047])
            ("showwarning" variable nil nil [1134 1161])
            ("formatwarning" function
               (:documentation "Function to format a warning the standard way."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [1181 1188])
                    ("category" variable nil (reparse-symbol function_parameters) [1190 1198])
                    ("filename" variable nil (reparse-symbol function_parameters) [1200 1208])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1210 1216])
                    ("line" variable nil (reparse-symbol function_parameters) [1218 1222]))                  )
                nil [1163 1519])
            ("filterwarnings" function
               (:documentation "Insert an entry into the list of warnings filters (at the front).

    Use assertions to check that all arguments have the right type."
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [1539 1545])
                    ("message" variable nil (reparse-symbol function_parameters) [1547 1554])
                    ("category" variable nil (reparse-symbol function_parameters) [1559 1567])
                    ("module" variable nil (reparse-symbol function_parameters) [1577 1583])
                    ("lineno" variable nil (reparse-symbol function_parameters) [1588 1594])
                    ("append" variable nil (reparse-symbol function_parameters) [1617 1623]))                  )
                nil [1520 2518])
            ("simplefilter" function
               (:documentation "Insert a simple entry into the list of warnings filters (at the front).

    A simple filter matches all modules and messages.
    "
                :arguments 
                  ( ("action" variable nil (reparse-symbol function_parameters) [2536 2542])
                    ("category" variable nil (reparse-symbol function_parameters) [2544 2552])
                    ("lineno" variable nil (reparse-symbol function_parameters) [2562 2568])
                    ("append" variable nil (reparse-symbol function_parameters) [2572 2578]))                  )
                nil [2519 3091])
            ("resetwarnings" function (:documentation "Clear the list of warning filters, so that no filters are active.") nil [3092 3209])
            ("_OptionError" type
               (:documentation "Exception used by option processing helpers."
                :superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [3300 3304]))                  
                :type "class")
                nil [3210 3305])
            ("_processoptions" function (:arguments 
              ( ("args" variable nil (reparse-symbol function_parameters) [3384 3388]))              ) nil [3364 3553])
            ("_setoption" function (:arguments 
              ( ("arg" variable nil (reparse-symbol function_parameters) [3600 3603]))              ) nil [3585 4411])
            ("_getaction" function (:arguments 
              ( ("action" variable nil (reparse-symbol function_parameters) [4453 4459]))              ) nil [4438 4738])
            ("_getcategory" function (:arguments 
              ( ("category" variable nil (reparse-symbol function_parameters) [4782 4790]))              ) nil [4765 5598])
            ("warn" function
               (:documentation "Issue a warning, or maybe ignore it or raise an exception."
                :arguments 
                  ( ("message" variable nil (reparse-symbol function_parameters) [5648 5655])
                    ("category" variable nil (reparse-symbol function_parameters) [5657 5665])
                    ("stacklevel" variable nil (reparse-symbol function_parameters) [5672 5682]))                  )
                nil [5639 6978])
            ("warn_explicit" function (:arguments 
              ( ("message" variable nil (reparse-symbol function_parameters) [6997 7004])
                ("category" variable nil (reparse-symbol function_parameters) [7006 7014])
                ("filename" variable nil (reparse-symbol function_parameters) [7016 7024])
                ("lineno" variable nil (reparse-symbol function_parameters) [7026 7032])
                ("module" variable nil (reparse-symbol function_parameters) [7052 7058])
                ("registry" variable nil (reparse-symbol function_parameters) [7065 7073])
                ("module_globals" variable nil (reparse-symbol function_parameters) [7080 7094]))              ) nil [6979 9894])
            ("WarningMessage" type
               (:documentation "Holds the result of a single showwarning() call."
                :superclasses ("object")
                :members 
                  ( ("_WARNING_DETAILS" variable nil (reparse-symbol indented_block_body) [9991 10095])
                    ("__init__" function
                       (:suite 
                          ( ("local_values" variable nil (reparse-symbol indented_block_body) [10208 10231])
                            ("for" code nil (reparse-symbol indented_block_body) [10240 10327])
                            ("None" code nil (reparse-symbol indented_block_body) [10392 10396]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10114 10118])
                            ("message" variable nil (reparse-symbol function_parameters) [10120 10127])
                            ("category" variable nil (reparse-symbol function_parameters) [10129 10137])
                            ("filename" variable nil (reparse-symbol function_parameters) [10139 10147])
                            ("lineno" variable nil (reparse-symbol function_parameters) [10149 10155])
                            ("file" variable nil (reparse-symbol function_parameters) [10157 10161])
                            ("line" variable nil (reparse-symbol function_parameters) [10188 10192]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10101 10397])
                    ("__str__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10414 10418]))                          )
                        (reparse-symbol indented_block_body) [10402 10645]))                  
                :type "class")
                nil [9896 10645])
            ("catch_warnings" type
               (:documentation "A context manager that copies and restores the warnings filter upon
    exiting the context.

    The 'record' argument specifies whether warnings should be captured by a
    custom implementation of warnings.showwarning() and be appended to a list
    returned by the context manager. Otherwise None is returned by the context
    manager. The objects appended to the list are arguments whose attributes
    mirror the arguments to showwarning().

    The 'module' argument is to specify an alternative module to the module
    named 'warnings' and imported under that name. This argument is only useful
    when testing the warnings module itself.

    "
                :superclasses ("object")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("\"\"\"Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        \"\"\"" code nil (reparse-symbol indented_block_body) [11404 11644])
                            ("self" variable nil (reparse-symbol indented_block_body) [11653 11674])
                            ("module" code nil (reparse-symbol indented_block_body) [11745 11751])
                            ("self" variable nil (reparse-symbol indented_block_body) [11760 11781]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11362 11366])
                            ("record" variable nil (reparse-symbol function_parameters) [11368 11374])
                            ("module" variable nil (reparse-symbol function_parameters) [11382 11388]))                          
                        :documentation "Specify whether to record warnings and if an alternative module
        should be used other than sys.modules['warnings'].

        For compatibility with Python 3.0, please consider all arguments to be
        keyword-only.

        "
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [11349 11782])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11800 11804]))                          )
                        (reparse-symbol indented_block_body) [11787 12082])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12101 12105]))                          )
                        (reparse-symbol indented_block_body) [12087 12636])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12654 12658])
                            ("exc_info" variable nil (reparse-symbol function_parameters) [12660 12669]))                          )
                        (reparse-symbol indented_block_body) [12641 12879]))                  
                :type "class")
                nil [10647 12879])
            ("_warnings_defaults" variable nil nil [13331 13357])
            ("try" code nil nil [13358 13666])
            ("_processoptions" code nil nil [13692 13724])
            ("if" code nil nil [13725 14150])
            ("del" code nil nil [14150 14172]))          
      :file "warnings.py"
      :pointmax 14173
      :fsize 14172
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax '((NAME 11683 . 11687) (IF 11722 . 11724) (ELSE 11740 . 11744) (NAME 10335 . 10339) (IF 10375 . 10377) (ELSE 10387 . 10391) (NAME 1367 . 1371) (IF 1410 . 1412) (ELSE 1426 . 1430)))
    (semanticdb-table "collections.py"
      :major-mode 'python-mode
      :tags 
        '( ("__all__" variable nil nil [1 49])
            ("_abcoll" include nil nil [198 219])
            ("_abcoll" include nil nil [220 234])
            ("__all__" variable nil nil [235 261])
            ("_collections" include nil nil [263 306])
            ("operator" include nil nil [307 353])
            ("keyword" include nil nil [354 397])
            ("sys" include nil nil [398 416])
            ("namedtuple" function
               (:documentation "Returns a new subclass of tuple with named fields.

    >>> Point = namedtuple('Point', 'x y')
    >>> Point.__doc__                   # docstring for the new class
    'Point(x, y)'
    >>> p = Point(11, y=22)             # instantiate with positional args or keywords
    >>> p[0] + p[1]                     # indexable like a plain tuple
    33
    >>> x, y = p                        # unpack like a regular tuple
    >>> x, y
    (11, 22)
    >>> p.x + p.y                       # fields also accessable by name
    33
    >>> d = p._asdict()                 # convert to a dictionary
    >>> d['x']
    11
    >>> Point(**d)                      # convert from a dictionary
    Point(x=11, y=22)
    >>> p._replace(x=100)               # _replace() is like str.replace() but targets named fields
    Point(x=100, y=22)

    "
                :arguments 
                  ( ("typename" variable nil (reparse-symbol function_parameters) [433 441])
                    ("field_names" variable nil (reparse-symbol function_parameters) [443 454])
                    ("verbose" variable nil (reparse-symbol function_parameters) [456 463]))                  )
                nil [418 4978])
            ("if" code nil nil [4984 6151]))          
      :file "collections.py"
      :pointmax 6151
      :fsize 6150
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax '((NAME 5609 . 5619) (PAREN_BLOCK 5619 . 5635) (NAME 5267 . 5277) (PAREN_BLOCK 5277 . 5293)))
    (semanticdb-table "struct.py"
      :major-mode 'python-mode
      :tags 
        '( ("_struct" include nil nil [1 22])
            ("_struct" include nil nil [23 54])
            ("_struct" include nil nil [55 82]))          
      :file "struct.py"
      :pointmax 83
      :fsize 82
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "tempfile.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Temporary files.

This module provides generic, low- and high-level interfaces for
creating temporary files and directories.  The interfaces listed
as \"safe\" just below can be used without fear of race conditions.
Those listed as \"unsafe\" cannot, and are provided for backward
compatibility only.

This module also provides some data items to the user:

  TMP_MAX  - maximum number of names that will be tried before
             giving up.
  template - the default prefix for all temporary names.
             You may change this to control the default prefix.
  tempdir  - If this is set to a string before the first use of
             any routine from this module, it will be considered as
             another candidate location to store temporary files.
\"\"\"" code nil nil [1 767])
            ("__all__" variable nil nil [769 1112])
            ("os" include nil nil [1127 1143])
            ("errno" include nil nil [1144 1166])
            ("random" include nil nil [1167 1203])
            ("try" code nil nil [1205 1325])
            ("try" code nil nil [1326 1710])
            ("try" code nil nil [1712 1801])
            ("_allocate_lock" variable nil nil [1801 1839])
            ("_text_openflags" code nil nil [1841 1896])
            ("if" code nil nil [1897 1968])
            ("if" code nil nil [1968 2037])
            ("_bin_openflags" variable nil nil [2038 2070])
            ("if" code nil nil [2071 2135])
            ("if" code nil nil [2136 2216])
            ("template" variable nil nil [2217 2233])
            ("_once_lock" variable nil nil [2257 2286])
            ("if" code nil nil [2288 2613])
            ("_exists" function (:arguments 
              ( ("fn" variable nil (reparse-symbol function_parameters) [2626 2628]))              ) nil [2614 2731])
            ("_RandomNameSequence" type
               (:documentation "An instance of _RandomNameSequence generates an endless
    sequence of unpredictable strings which can safely be incorporated
    into file names.  Each string is six characters long.  Multiple
    threads can safely use the same instance at the same time.

    _RandomNameSequence is an iterator."
                :members 
                  ( ("characters" variable nil (reparse-symbol indented_block_body) [3073 3199])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [3233 3262])
                            ("self" variable nil (reparse-symbol indented_block_body) [3271 3291])
                            ("self" variable nil (reparse-symbol indented_block_body) [3300 3333]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3218 3222]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3205 3334])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3352 3356]))                          )
                        (reparse-symbol indented_block_body) [3339 3379])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3393 3397]))                          )
                        (reparse-symbol indented_block_body) [3384 3663]))                  
                :type "class")
                nil [2732 3663])
            ("_candidate_tempdir_list" function (:documentation "Generate a list of candidate temporary directories which
    _get_default_tempdir will try.") nil [3664 4497])
            ("_get_default_tempdir" function (:documentation "Calculate the default directory to use for temporary files.
    This routine should be called exactly once.

    We determine whether or not a candidate temp dir is usable by
    trying to create and write to a file in that directory.  If this
    is successful, the test file is deleted.  To prevent denial of
    service, the name of the test file must be randomized.") nil [4498 5833])
            ("_name_sequence" variable nil nil [5834 5855])
            ("_get_candidate_names" function (:documentation "Common setup sequence for all user-callable interfaces.") nil [5857 6221])
            ("_mkstemp_inner" function
               (:documentation "Code common to mkstemp, TemporaryFile, and NamedTemporaryFile."
                :arguments 
                  ( ("dir" variable nil (reparse-symbol function_parameters) [6242 6245])
                    ("pre" variable nil (reparse-symbol function_parameters) [6247 6250])
                    ("suf" variable nil (reparse-symbol function_parameters) [6252 6255])
                    ("flags" variable nil (reparse-symbol function_parameters) [6257 6262]))                  )
                nil [6223 6820])
            ("gettempprefix" function (:documentation "Accessor for tempdir.template.") nil [6850 6932])
            ("tempdir" variable nil nil [6933 6947])
            ("gettempdir" function (:documentation "Accessor for tempfile.tempdir.") nil [6949 7243])
            ("mkstemp" function
               (:documentation "User-callable function to create and return a unique temporary
    file.  The return value is a pair (fd, name) where fd is the
    file descriptor returned by os.open, and name is the filename.

    If 'suffix' is specified, the file name will end with that suffix,
    otherwise there will be no suffix.

    If 'prefix' is specified, the file name will begin with that prefix,
    otherwise a default prefix is used.

    If 'dir' is specified, the file will be created in that directory,
    otherwise a default directory is used.

    If 'text' is specified and true, the file is opened in text
    mode.  Else (the default) the file is opened in binary mode.  On
    some operating systems, this makes no difference.

    The file is readable and writable only by the creating user ID.
    If the operating system uses permission bits to indicate whether a
    file is executable, the file is executable by no one. The file
    descriptor is not inherited by children of this process.

    Caller is responsible for deleting the file when done with it.
    "
                :arguments 
                  ( ("suffix" variable nil (reparse-symbol function_parameters) [7256 7262])
                    ("prefix" variable nil (reparse-symbol function_parameters) [7267 7273])
                    ("dir" variable nil (reparse-symbol function_parameters) [7284 7287])
                    ("text" variable nil (reparse-symbol function_parameters) [7294 7298]))                  )
                nil [7244 8571])
            ("mkdtemp" function
               (:documentation "User-callable function to create and return a unique temporary
    directory.  The return value is the pathname of the directory.

    Arguments are as for mkstemp, except that the 'text' argument is
    not accepted.

    The directory is readable, writable, and searchable only by the
    creating user.

    Caller is responsible for deleting the directory when done with it.
    "
                :arguments 
                  ( ("suffix" variable nil (reparse-symbol function_parameters) [8585 8591])
                    ("prefix" variable nil (reparse-symbol function_parameters) [8596 8602])
                    ("dir" variable nil (reparse-symbol function_parameters) [8613 8616]))                  )
                nil [8573 9495])
            ("mktemp" function
               (:documentation "User-callable function to return a unique temporary file name.  The
    file is not created.

    Arguments are as for mkstemp, except that the 'text' argument is
    not accepted.

    This function is unsafe and should not be used.  The file name
    refers to a file that did not exist at some point, but by the time
    you get around to creating it, someone else may have beaten you to
    the punch.
    "
                :arguments 
                  ( ("suffix" variable nil (reparse-symbol function_parameters) [9507 9513])
                    ("prefix" variable nil (reparse-symbol function_parameters) [9518 9524])
                    ("dir" variable nil (reparse-symbol function_parameters) [9535 9538]))                  )
                nil [9496 10448])
            ("_TemporaryFileWrapper" type
               (:documentation "Temporary file wrapper

    This class provides a wrapper around files opened for
    temporary use.  In particular, it seeks to automatically
    remove the file when it is no longer needed.
    "
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [10744 10760])
                            ("self" variable nil (reparse-symbol indented_block_body) [10769 10785])
                            ("self" variable nil (reparse-symbol indented_block_body) [10794 10819])
                            ("self" variable nil (reparse-symbol indented_block_body) [10828 10848]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10704 10708])
                            ("file" variable nil (reparse-symbol function_parameters) [10710 10714])
                            ("name" variable nil (reparse-symbol function_parameters) [10716 10720])
                            ("delete" variable nil (reparse-symbol function_parameters) [10722 10728]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [10691 10849])
                    ("__getattr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10870 10874])
                            ("name" variable nil (reparse-symbol function_parameters) [10876 10880]))                          )
                        (reparse-symbol indented_block_body) [10854 11223])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11360 11364]))                          )
                        (reparse-symbol indented_block_body) [11346 11417])
                    ("if" code nil (reparse-symbol indented_block_body) [11629 12503]))                  
                :type "class")
                nil [10450 12503])
            ("NamedTemporaryFile" function
               (:documentation "Create and return a temporary file.
    Arguments:
    'prefix', 'suffix', 'dir' -- as for mkstemp.
    'mode' -- the mode argument to os.fdopen (default \"w+b\").
    'bufsize' -- the buffer size argument to os.fdopen (default -1).
    'delete' -- whether the file is deleted on close (default True).
    The file is created as mkstemp() would do it.

    Returns an object with a file-like interface; the name of the file
    is accessible as file.name.  The file will be automatically deleted
    when it is closed unless the 'delete' argument is set to False.
    "
                :arguments 
                  ( ("mode" variable nil (reparse-symbol function_parameters) [12528 12532])
                    ("bufsize" variable nil (reparse-symbol function_parameters) [12540 12547])
                    ("suffix" variable nil (reparse-symbol function_parameters) [12552 12558])
                    ("prefix" variable nil (reparse-symbol function_parameters) [12586 12592])
                    ("dir" variable nil (reparse-symbol function_parameters) [12603 12606])
                    ("delete" variable nil (reparse-symbol function_parameters) [12613 12619]))                  )
                nil [12505 13704])
            ("if" code nil nil [13705 14848])
            ("SpooledTemporaryFile" type
               (:documentation "Temporary file wrapper, specialized to switch from
    StringIO to a real file when it exceeds a certain size or
    when a fileno is needed.
    "
                :members 
                  ( ("_rolled" variable nil (reparse-symbol indented_block_body) [15038 15053])
                    ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [15178 15202])
                            ("self" variable nil (reparse-symbol indented_block_body) [15211 15236])
                            ("self" variable nil (reparse-symbol indented_block_body) [15245 15265])
                            ("self" variable nil (reparse-symbol indented_block_body) [15274 15336]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15072 15076])
                            ("max_size" variable nil (reparse-symbol function_parameters) [15078 15086])
                            ("mode" variable nil (reparse-symbol function_parameters) [15090 15094])
                            ("bufsize" variable nil (reparse-symbol function_parameters) [15102 15109])
                            ("suffix" variable nil (reparse-symbol function_parameters) [15131 15137])
                            ("prefix" variable nil (reparse-symbol function_parameters) [15142 15148])
                            ("dir" variable nil (reparse-symbol function_parameters) [15159 15162]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [15059 15337])
                    ("_check" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15353 15357])
                            ("file" variable nil (reparse-symbol function_parameters) [15359 15363]))                          )
                        (reparse-symbol indented_block_body) [15342 15508])
                    ("rollover" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [15526 15530]))                          )
                        (reparse-symbol indented_block_body) [15513 15804])
                    ("__enter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16052 16056]))                          )
                        (reparse-symbol indented_block_body) [16038 16179])
                    ("__exit__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16197 16201])
                            ("exc" variable nil (reparse-symbol function_parameters) [16203 16206])
                            ("value" variable nil (reparse-symbol function_parameters) [16208 16213])
                            ("tb" variable nil (reparse-symbol function_parameters) [16215 16217]))                          )
                        (reparse-symbol indented_block_body) [16184 16247])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16285 16289]))                          )
                        (reparse-symbol indented_block_body) [16272 16329])
                    ("close" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16344 16348]))                          )
                        (reparse-symbol indented_block_body) [16334 16378])
                    ("closed" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16408 16412]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16383 16448])
                    ("encoding" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16480 16484]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16453 16522])
                    ("fileno" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16538 16542]))                          )
                        (reparse-symbol indented_block_body) [16527 16604])
                    ("flush" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16619 16623]))                          )
                        (reparse-symbol indented_block_body) [16609 16653])
                    ("isatty" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16669 16673]))                          )
                        (reparse-symbol indented_block_body) [16658 16711])
                    ("mode" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16739 16743]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16716 16777])
                    ("name" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16805 16809]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16782 16843])
                    ("newlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16875 16879]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [16848 16917])
                    ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16931 16935]))                          )
                        (reparse-symbol indented_block_body) [16922 16969])
                    ("read" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [16983 16987])
                            ("args" variable nil (reparse-symbol function_parameters) [16989 16994]))                          )
                        (reparse-symbol indented_block_body) [16974 17035])
                    ("readline" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17053 17057])
                            ("args" variable nil (reparse-symbol function_parameters) [17059 17064]))                          )
                        (reparse-symbol indented_block_body) [17040 17109])
                    ("readlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17128 17132])
                            ("args" variable nil (reparse-symbol function_parameters) [17134 17139]))                          )
                        (reparse-symbol indented_block_body) [17114 17185])
                    ("seek" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17199 17203])
                            ("args" variable nil (reparse-symbol function_parameters) [17205 17210]))                          )
                        (reparse-symbol indented_block_body) [17190 17244])
                    ("softspace" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17277 17281]))                          
                        :decorators 
                          ( ("property" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [17249 17320])
                    ("tell" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17334 17338]))                          )
                        (reparse-symbol indented_block_body) [17325 17374])
                    ("truncate" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17392 17396]))                          )
                        (reparse-symbol indented_block_body) [17379 17429])
                    ("write" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17444 17448])
                            ("s" variable nil (reparse-symbol function_parameters) [17450 17451]))                          )
                        (reparse-symbol indented_block_body) [17434 17551])
                    ("writelines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17571 17575])
                            ("iterable" variable nil (reparse-symbol function_parameters) [17577 17585]))                          )
                        (reparse-symbol indented_block_body) [17556 17697])
                    ("xreadlines" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [17717 17721])
                            ("args" variable nil (reparse-symbol function_parameters) [17723 17728]))                          )
                        (reparse-symbol indented_block_body) [17702 17775]))                  
                :type "class")
                nil [14849 17775]))          
      :file "tempfile.py"
      :pointmax 17775
      :fsize 17774
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "__future__.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Record of phased-in incompatible language changes.

Each line is of the form:

    FeatureName = \"_Feature(\" OptionalRelease \",\" MandatoryRelease \",\"
                              CompilerFlag \")\"

where, normally, OptionalRelease < MandatoryRelease, and both are 5-tuples
of the same form as sys.version_info:

    (PY_MAJOR_VERSION, # the 2 in 2.1.0a3; an int
     PY_MINOR_VERSION, # the 1; an int
     PY_MICRO_VERSION, # the 0; an int
     PY_RELEASE_LEVEL, # \"alpha\", \"beta\", \"candidate\" or \"final\"; string
     PY_RELEASE_SERIAL # the 3; an int
    )

OptionalRelease records the first release in which

    from __future__ import FeatureName

was accepted.

In the case of MandatoryReleases that have not yet occurred,
MandatoryRelease predicts the release in which the feature will become part
of the language.

Else MandatoryRelease records when the feature became part of the language;
in releases at or after that, modules no longer need

    from __future__ import FeatureName

to use the feature in question, but may continue to use such imports.

MandatoryRelease may also be None, meaning that a planned feature got
dropped.

Instances of class _Feature have two corresponding methods,
.getOptionalRelease() and .getMandatoryRelease().

CompilerFlag is the (bitfield) flag that should be passed in the fourth
argument to the builtin function compile() to enable the feature in
dynamically compiled code.  This flag is stored in the .compiler_flag
attribute on _Future instances.  These values must match the appropriate
#defines of CO_xxx flags in Include/compile.h.

No feature line is ever to be deleted from this file.
\"\"\"" code nil nil [1 1645])
            ("all_feature_names" variable nil nil [1647 1816])
            ("__all__" code nil nil [1818 1869])
            ("CO_NESTED" variable nil nil [2093 2122])
            ("CO_GENERATOR_ALLOWED" variable nil nil [2141 2165])
            ("CO_FUTURE_DIVISION" variable nil nil [2209 2238])
            ("CO_FUTURE_ABSOLUTE_IMPORT" variable nil nil [2252 2286])
            ("CO_FUTURE_WITH_STATEMENT" variable nil nil [2325 2359])
            ("CO_FUTURE_PRINT_FUNCTION" variable nil nil [2379 2414])
            ("CO_FUTURE_UNICODE_LITERALS" variable nil nil [2434 2470])
            ("_Feature" type
               (:members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [2596 2627])
                            ("self" variable nil (reparse-symbol indented_block_body) [2636 2669])
                            ("self" variable nil (reparse-symbol indented_block_body) [2678 2712]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2531 2535])
                            ("optionalRelease" variable nil (reparse-symbol function_parameters) [2537 2552])
                            ("mandatoryRelease" variable nil (reparse-symbol function_parameters) [2554 2570])
                            ("compiler_flag" variable nil (reparse-symbol function_parameters) [2572 2585]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2518 2713])
                    ("getOptionalRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2741 2745]))                          
                        :documentation "Return first release in which this feature was recognized.

        This is a 5-tuple, of the same form as sys.version_info.
        ")
                        (reparse-symbol indented_block_body) [2718 2926])
                    ("getMandatoryRelease" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2955 2959]))                          
                        :documentation "Return release in which this feature will become mandatory.

        This is a 5-tuple, of the same form as sys.version_info, or, if
        the feature was dropped, is None.
        ")
                        (reparse-symbol indented_block_body) [2931 3191])
                    ("__repr__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3209 3213]))                          )
                        (reparse-symbol indented_block_body) [3196 3370]))                  
                :type "class")
                nil [2498 3370])
            ("nested_scopes" variable nil nil [3371 3502])
            ("generators" variable nil nil [3504 3637])
            ("division" variable nil nil [3639 3764])
            ("absolute_import" variable nil nil [3766 3919])
            ("with_statement" variable nil nil [3921 4070])
            ("print_function" variable nil nil [4072 4221])
            ("unicode_literals" variable nil nil [4223 4380]))          
      :file "__future__.py"
      :pointmax 4381
      :fsize 4380
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "linecache.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Cache lines from files.

This is intended to read lines from modules imported -- hence if a filename
is not found, it will look down the module search path for a file by
that name.
\"\"\"" code nil nil [1 188])
            ("sys" include nil nil [190 200])
            ("os" include nil nil [201 210])
            ("__all__" variable nil nil [212 261])
            ("getline" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [275 283])
                ("lineno" variable nil (reparse-symbol function_parameters) [285 291])
                ("module_globals" variable nil (reparse-symbol function_parameters) [293 307]))              ) nil [263 455])
            ("cache" variable nil nil [470 480])
            ("clearcache" function (:documentation "Clear the cache entirely.") nil [495 582])
            ("getlines" function
               (:documentation "Get the lines for a file from the cache.
    Update the cache if it doesn't contain an entry for this file already."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [597 605])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [607 621]))                  )
                nil [584 879])
            ("checkcache" function
               (:documentation "Discard cache entries that are out of date.
    (This is not checked upon each call!)"
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [896 904]))                  )
                nil [881 1572])
            ("updatecache" function
               (:documentation "Update a cache entry and return its list of lines.
    If something's wrong, print a message, discard the cache entry,
    and return an empty list."
                :arguments 
                  ( ("filename" variable nil (reparse-symbol function_parameters) [1590 1598])
                    ("module_globals" variable nil (reparse-symbol function_parameters) [1600 1614]))                  )
                nil [1574 4129]))          
      :file "linecache.py"
      :pointmax 4129
      :fsize 4128
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "_abcoll.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) for collections, according to PEP 3119.

DON'T USE THIS MODULE DIRECTLY!  The classes here should be imported
via collections; they are defined here only to alleviate certain
bootstrapping issues.  Unit tests are in test_collections.
\"\"\"" code nil nil [102 371])
            ("abc" include nil nil [373 412])
            ("sys" include nil nil [413 423])
            ("__all__" variable nil nil [425 708])
            ("_hasattr" function (:arguments 
              ( ("C" variable nil (reparse-symbol function_parameters) [749 750])
                ("attr" variable nil (reparse-symbol function_parameters) [752 756]))              ) nil [736 911])
            ("Hashable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [933 956])
                    ("__hash__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [995 999]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [962 1019])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1062 1065])
                            ("C" variable nil (reparse-symbol function_parameters) [1067 1068]))                          )
                        (reparse-symbol indented_block_body) [1024 1502]))                  
                :type "class")
                nil [913 1502])
            ("Iterable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [1524 1547])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1586 1590]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1553 1637])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [1680 1683])
                            ("C" variable nil (reparse-symbol function_parameters) [1685 1686]))                          )
                        (reparse-symbol indented_block_body) [1642 1815]))                  
                :type "class")
                nil [1504 1815])
            ("Iterable" code nil nil [1816 1838])
            ("Iterator" type
               (:superclasses ("Iterable")
                :members 
                  ( ("next" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1901 1905]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [1872 1936])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [1954 1958]))                          )
                        (reparse-symbol indented_block_body) [1941 1981])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2024 2027])
                            ("C" variable nil (reparse-symbol function_parameters) [2029 2030]))                          )
                        (reparse-symbol indented_block_body) [1986 2155]))                  
                :type "class")
                nil [1841 2155])
            ("Sized" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2174 2197])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2235 2239]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2203 2259])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2302 2305])
                            ("C" variable nil (reparse-symbol function_parameters) [2307 2308]))                          )
                        (reparse-symbol indented_block_body) [2264 2433]))                  
                :type "class")
                nil [2157 2433])
            ("Container" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2456 2479])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2522 2526])
                            ("x" variable nil (reparse-symbol function_parameters) [2528 2529]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2485 2553])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2596 2599])
                            ("C" variable nil (reparse-symbol function_parameters) [2601 2602]))                          )
                        (reparse-symbol indented_block_body) [2558 2736]))                  
                :type "class")
                nil [2435 2736])
            ("Callable" type
               (:members 
                  ( ("__metaclass__" variable nil (reparse-symbol indented_block_body) [2758 2781])
                    ("__call__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2820 2824])
                            ("args" variable nil (reparse-symbol function_parameters) [2826 2831])
                            ("kwds" variable nil (reparse-symbol function_parameters) [2833 2839]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [2787 2863])
                    ("__subclasshook__" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [2906 2909])
                            ("C" variable nil (reparse-symbol function_parameters) [2911 2912]))                          )
                        (reparse-symbol indented_block_body) [2868 3041]))                  
                :type "class")
                nil [2738 3041])
            ("Set" type
               (:documentation "A set is a finite, iterable container.

    This class provides concrete generic implementations of all
    methods except for __contains__, __iter__ and __len__.

    To override the comparisons (presumably for speed, as the
    semantics are fixed), all you have to do is redefine __le__ and
    then the other operations will automatically follow suit.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__le__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3484 3488])
                            ("other" variable nil (reparse-symbol function_parameters) [3490 3495]))                          )
                        (reparse-symbol indented_block_body) [3473 3740])
                    ("__lt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3756 3760])
                            ("other" variable nil (reparse-symbol function_parameters) [3762 3767]))                          )
                        (reparse-symbol indented_block_body) [3745 3904])
                    ("__gt__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3920 3924])
                            ("other" variable nil (reparse-symbol function_parameters) [3926 3931]))                          )
                        (reparse-symbol indented_block_body) [3909 4035])
                    ("__ge__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4051 4055])
                            ("other" variable nil (reparse-symbol function_parameters) [4057 4062]))                          )
                        (reparse-symbol indented_block_body) [4040 4167])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4183 4187])
                            ("other" variable nil (reparse-symbol function_parameters) [4189 4194]))                          )
                        (reparse-symbol indented_block_body) [4172 4332])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4348 4352])
                            ("other" variable nil (reparse-symbol function_parameters) [4354 4359]))                          )
                        (reparse-symbol indented_block_body) [4337 4397])
                    ("_from_iterable" function
                       (:decorators 
                          ( ("classmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4438 4441])
                            ("it" variable nil (reparse-symbol function_parameters) [4443 4445]))                          )
                        (reparse-symbol indented_block_body) [4402 4674])
                    ("__and__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4691 4695])
                            ("other" variable nil (reparse-symbol function_parameters) [4697 4702]))                          )
                        (reparse-symbol indented_block_body) [4679 4861])
                    ("isdisjoint" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4881 4885])
                            ("other" variable nil (reparse-symbol function_parameters) [4887 4892]))                          )
                        (reparse-symbol indented_block_body) [4866 5002])
                    ("__or__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5018 5022])
                            ("other" variable nil (reparse-symbol function_parameters) [5024 5029]))                          )
                        (reparse-symbol indented_block_body) [5007 5206])
                    ("__sub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5223 5227])
                            ("other" variable nil (reparse-symbol function_parameters) [5229 5234]))                          )
                        (reparse-symbol indented_block_body) [5211 5526])
                    ("__xor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5543 5547])
                            ("other" variable nil (reparse-symbol function_parameters) [5549 5554]))                          )
                        (reparse-symbol indented_block_body) [5531 5776])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [5852 5867])
                    ("_hash" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [5883 5887]))                          
                        :documentation "Compute the hash value of a set.

        Note that we don't define __hash__: not all sets are hashable.
        But if you define a hashable set type, its __hash__ should
        call this function.

        This must be compatible __eq__.

        All sets ought to compare equal if they contain the same
        elements, regardless of how they are implemented, and
        regardless of the order of the elements; so there's not much
        freedom for __eq__ or __hash__.  We match the algorithm used
        by the built-in frozenset type.
        ")
                        (reparse-symbol indented_block_body) [5873 6876]))                  
                :type "class")
                nil [3058 6876])
            ("Set" code nil nil [6877 6900])
            ("MutableSet" type
               (:superclasses ("Set")
                :members 
                  ( ("add" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [6959 6963])
                            ("value" variable nil (reparse-symbol function_parameters) [6965 6970]))                          
                        :documentation "Add an element.")
                        (reparse-symbol indented_block_body) [6931 7037])
                    ("discard" function
                       (:parent "dummy"
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7074 7078])
                            ("value" variable nil (reparse-symbol function_parameters) [7080 7085]))                          
                        :documentation "Remove an element.  Do not raise an exception if absent.")
                        (reparse-symbol indented_block_body) [7042 7193])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7209 7213])
                            ("value" variable nil (reparse-symbol function_parameters) [7215 7220]))                          
                        :documentation "Remove an element. If not a member, raise a KeyError.")
                        (reparse-symbol indented_block_body) [7198 7383])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7396 7400]))                          
                        :documentation "Return the popped value.  Raise KeyError if empty.")
                        (reparse-symbol indented_block_body) [7388 7640])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7655 7659]))                          
                        :documentation "This is slow (creates N new iterators!) but effective.")
                        (reparse-symbol indented_block_body) [7645 7837])
                    ("__ior__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7854 7858])
                            ("it" variable nil (reparse-symbol function_parameters) [7860 7862]))                          )
                        (reparse-symbol indented_block_body) [7842 7938])
                    ("__iand__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [7956 7960])
                            ("it" variable nil (reparse-symbol function_parameters) [7962 7964]))                          )
                        (reparse-symbol indented_block_body) [7943 8053])
                    ("__ixor__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8071 8075])
                            ("it" variable nil (reparse-symbol function_parameters) [8077 8079]))                          )
                        (reparse-symbol indented_block_body) [8058 8320])
                    ("__isub__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8338 8342])
                            ("it" variable nil (reparse-symbol function_parameters) [8344 8346]))                          )
                        (reparse-symbol indented_block_body) [8325 8426]))                  
                :type "class")
                nil [6903 8426])
            ("MutableSet" code nil nil [8427 8451])
            ("Mapping" type
               (:superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8557 8561])
                            ("key" variable nil (reparse-symbol function_parameters) [8563 8566]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [8521 8592])
                    ("get" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8605 8609])
                            ("key" variable nil (reparse-symbol function_parameters) [8611 8614])
                            ("default" variable nil (reparse-symbol function_parameters) [8616 8623]))                          )
                        (reparse-symbol indented_block_body) [8597 8725])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8747 8751])
                            ("key" variable nil (reparse-symbol function_parameters) [8753 8756]))                          )
                        (reparse-symbol indented_block_body) [8730 8882])
                    ("iterkeys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8900 8904]))                          )
                        (reparse-symbol indented_block_body) [8887 8933])
                    ("itervalues" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [8953 8957]))                          )
                        (reparse-symbol indented_block_body) [8938 9013])
                    ("iteritems" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9032 9036]))                          )
                        (reparse-symbol indented_block_body) [9018 9099])
                    ("keys" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9113 9117]))                          )
                        (reparse-symbol indented_block_body) [9104 9146])
                    ("items" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9161 9165]))                          )
                        (reparse-symbol indented_block_body) [9151 9218])
                    ("values" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9234 9238]))                          )
                        (reparse-symbol indented_block_body) [9223 9284])
                    ("__hash__" variable nil (reparse-symbol indented_block_body) [9364 9379])
                    ("__eq__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9396 9400])
                            ("other" variable nil (reparse-symbol function_parameters) [9402 9407]))                          )
                        (reparse-symbol indented_block_body) [9385 9544])
                    ("__ne__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9560 9564])
                            ("other" variable nil (reparse-symbol function_parameters) [9566 9571]))                          )
                        (reparse-symbol indented_block_body) [9549 9609]))                  
                :type "class")
                nil [8473 9609])
            ("MappingView" type
               (:superclasses ("Sized")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("self" variable nil (reparse-symbol indented_block_body) [9678 9701]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9654 9658])
                            ("mapping" variable nil (reparse-symbol function_parameters) [9660 9667]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [9641 9702])
                    ("__len__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9719 9723]))                          )
                        (reparse-symbol indented_block_body) [9707 9760]))                  
                :type "class")
                nil [9610 9760])
            ("KeysView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9818 9822])
                            ("key" variable nil (reparse-symbol function_parameters) [9824 9827]))                          )
                        (reparse-symbol indented_block_body) [9801 9866])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [9884 9888]))                          )
                        (reparse-symbol indented_block_body) [9871 9947]))                  
                :type "class")
                nil [9762 9947])
            ("ItemsView" type
               (:superclasses ("MappingView" "Set")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10006 10010])
                            ("item" variable nil (reparse-symbol function_parameters) [10012 10016]))                          )
                        (reparse-symbol indented_block_body) [9989 10187])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10205 10209]))                          )
                        (reparse-symbol indented_block_body) [10192 10290]))                  
                :type "class")
                nil [9949 10290])
            ("ValuesView" type
               (:superclasses ("MappingView")
                :members 
                  ( ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10345 10349])
                            ("value" variable nil (reparse-symbol function_parameters) [10351 10356]))                          )
                        (reparse-symbol indented_block_body) [10328 10486])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10504 10508]))                          )
                        (reparse-symbol indented_block_body) [10491 10582]))                  
                :type "class")
                nil [10292 10582])
            ("MutableMapping" type
               (:superclasses ("Mapping")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10656 10660])
                            ("key" variable nil (reparse-symbol function_parameters) [10662 10665])
                            ("value" variable nil (reparse-symbol function_parameters) [10667 10672]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10620 10698])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10739 10743])
                            ("key" variable nil (reparse-symbol function_parameters) [10745 10748]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [10703 10774])
                    ("__marker" variable nil (reparse-symbol indented_block_body) [10779 10798])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10812 10816])
                            ("key" variable nil (reparse-symbol function_parameters) [10818 10821])
                            ("default" variable nil (reparse-symbol function_parameters) [10823 10830]))                          )
                        (reparse-symbol indented_block_body) [10804 11065])
                    ("popitem" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11082 11086]))                          )
                        (reparse-symbol indented_block_body) [11070 11268])
                    ("clear" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11283 11287]))                          )
                        (reparse-symbol indented_block_body) [11273 11400])
                    ("update" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11416 11420])
                            ("other" variable nil (reparse-symbol function_parameters) [11422 11427])
                            ("kwds" variable nil (reparse-symbol function_parameters) [11432 11438]))                          )
                        (reparse-symbol indented_block_body) [11405 11817])
                    ("setdefault" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11837 11841])
                            ("key" variable nil (reparse-symbol function_parameters) [11843 11846])
                            ("default" variable nil (reparse-symbol function_parameters) [11848 11855]))                          )
                        (reparse-symbol indented_block_body) [11822 11985]))                  
                :type "class")
                nil [10584 11985])
            ("MutableMapping" code nil nil [11986 12015])
            ("Sequence" type
               (:documentation "All the operations on a read-only sequence.

    Concrete subclasses must override __new__ or __init__,
    __getitem__, and __len__.
    "
                :superclasses ("Sized" "Iterable" "Container")
                :members 
                  ( ("__getitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12272 12276])
                            ("index" variable nil (reparse-symbol function_parameters) [12278 12283]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [12236 12311])
                    ("__iter__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12329 12333]))                          )
                        (reparse-symbol indented_block_body) [12316 12508])
                    ("__contains__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12530 12534])
                            ("value" variable nil (reparse-symbol function_parameters) [12536 12541]))                          )
                        (reparse-symbol indented_block_body) [12513 12643])
                    ("__reversed__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12665 12669]))                          )
                        (reparse-symbol indented_block_body) [12648 12743])
                    ("index" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12758 12762])
                            ("value" variable nil (reparse-symbol function_parameters) [12764 12769]))                          )
                        (reparse-symbol indented_block_body) [12748 12886])
                    ("count" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [12901 12905])
                            ("value" variable nil (reparse-symbol function_parameters) [12907 12912]))                          )
                        (reparse-symbol indented_block_body) [12891 12965]))                  
                :type "class")
                nil [12038 12965])
            ("Sequence" code nil nil [12966 12990])
            ("Sequence" code nil nil [12991 13020])
            ("Sequence" code nil nil [13021 13046])
            ("Sequence" code nil nil [13047 13072])
            ("MutableSequence" type
               (:superclasses ("Sequence")
                :members 
                  ( ("__setitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13149 13153])
                            ("index" variable nil (reparse-symbol function_parameters) [13155 13160])
                            ("value" variable nil (reparse-symbol function_parameters) [13162 13167]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13113 13195])
                    ("__delitem__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13236 13240])
                            ("index" variable nil (reparse-symbol function_parameters) [13242 13247]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13200 13275])
                    ("insert" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13311 13315])
                            ("index" variable nil (reparse-symbol function_parameters) [13317 13322])
                            ("value" variable nil (reparse-symbol function_parameters) [13324 13329]))                          
                        :decorators 
                          ( ("abstractmethod" function (:type "decorator") nil nil))                          )
                        (reparse-symbol indented_block_body) [13280 13357])
                    ("append" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13373 13377])
                            ("value" variable nil (reparse-symbol function_parameters) [13379 13384]))                          )
                        (reparse-symbol indented_block_body) [13362 13425])
                    ("reverse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13442 13446]))                          )
                        (reparse-symbol indented_block_body) [13430 13557])
                    ("extend" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13573 13577])
                            ("values" variable nil (reparse-symbol function_parameters) [13579 13585]))                          )
                        (reparse-symbol indented_block_body) [13562 13640])
                    ("pop" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13653 13657])
                            ("index" variable nil (reparse-symbol function_parameters) [13659 13664]))                          )
                        (reparse-symbol indented_block_body) [13645 13735])
                    ("remove" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13751 13755])
                            ("value" variable nil (reparse-symbol function_parameters) [13757 13762]))                          )
                        (reparse-symbol indented_block_body) [13740 13801])
                    ("__iadd__" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [13819 13823])
                            ("values" variable nil (reparse-symbol function_parameters) [13825 13831]))                          )
                        (reparse-symbol indented_block_body) [13806 13882]))                  
                :type "class")
                nil [13075 13882])
            ("MutableSequence" code nil nil [13883 13913]))          
      :file "_abcoll.py"
      :pointmax 13914
      :fsize 13913
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "keyword.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Keywords (from \"graminit.c\")

This file is automatically generated; please don't muck it up!

To update the symbols in this file, 'cd' to the top directory of
the python source tree after building the interpreter and run:

    python Lib/keyword.py
\"\"\"" code nil nil [28 283])
            ("__all__" variable nil nil [285 318])
            ("kwlist" variable nil nil [320 883])
            ("iskeyword" variable nil nil [885 927])
            ("main" function nil nil [929 1959])
            ("if" code nil nil [1960 1998]))          
      :file "keyword.py"
      :pointmax 1998
      :fsize 1997
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "abc.py"
      :major-mode 'python-mode
      :tags 
        '( ("\"\"\"Abstract Base Classes (ABCs) according to PEP 3119.\"\"\"" code nil nil [102 159])
            ("_C" type
               (:members 
                  ( ("pass" code nil nil nil))                  
                :type "class")
                nil [192 207])
            ("_InstanceType" variable nil nil [207 233])
            ("abstractmethod" function
               (:documentation "A decorator indicating abstract methods.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract methods are overridden.
    The abstract methods can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractmethod
            def my_abstract_method(self, ...):
                ...
    "
                :arguments 
                  ( ("funcobj" variable nil (reparse-symbol function_parameters) [255 262]))                  )
                nil [236 830])
            ("abstractproperty" type
               (:documentation "A decorator indicating abstract properties.

    Requires that the metaclass is ABCMeta or derived from it.  A
    class that has a metaclass derived from ABCMeta cannot be
    instantiated unless all of its abstract properties are overridden.
    The abstract properties can be called using any of the normal
    'super' call mechanisms.

    Usage:

        class C:
            __metaclass__ = ABCMeta
            @abstractproperty
            def my_abstract_property(self):
                ...

    This defines a read-only property; you can also define a read-write
    abstract property using the 'long' form of property declaration:

        class C:
            __metaclass__ = ABCMeta
            def getx(self): ...
            def setx(self, value): ...
            x = abstractproperty(getx, setx)
    "
                :superclasses ("property")
                :members 
                  ( ("__isabstractmethod__" variable nil (reparse-symbol indented_block_body) [1696 1723]))                  
                :type "class")
                nil [832 1724])
            ("ABCMeta" type
               (:documentation "Metaclass for defining Abstract Base Classes (ABCs).

    Use this metaclass to create an ABC.  An ABC can be subclassed
    directly, and then acts as a mix-in class.  You can also register
    unrelated concrete classes (even built-in classes) and unrelated
    ABCs as 'virtual subclasses' -- these and their descendants will
    be considered subclasses of the registering ABC by the built-in
    issubclass() function, but the registering ABC won't show up in
    their MRO (Method Resolution Order) nor will method
    implementations defined by the registering ABC be callable (not
    even via super()).

    "
                :superclasses ("type")
                :members 
                  ( ("_abc_invalidation_counter" variable nil (reparse-symbol indented_block_body) [2568 2597])
                    ("__new__" function (:arguments 
                      ( ("mcls" variable nil (reparse-symbol function_parameters) [2615 2619])
                        ("name" variable nil (reparse-symbol function_parameters) [2621 2625])
                        ("bases" variable nil (reparse-symbol function_parameters) [2627 2632])
                        ("namespace" variable nil (reparse-symbol function_parameters) [2634 2643]))                      ) (reparse-symbol indented_block_body) [2603 3468])
                    ("register" function
                       (:documentation "Register a virtual subclass of an ABC."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [3486 3489])
                            ("subclass" variable nil (reparse-symbol function_parameters) [3491 3499]))                          )
                        (reparse-symbol indented_block_body) [3473 4184])
                    ("_dump_registry" function
                       (:documentation "Debug helper to print the ABC registry."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4208 4211])
                            ("file" variable nil (reparse-symbol function_parameters) [4213 4217]))                          )
                        (reparse-symbol indented_block_body) [4189 4616])
                    ("__instancecheck__" function
                       (:documentation "Override for isinstance(instance, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [4643 4646])
                            ("instance" variable nil (reparse-symbol function_parameters) [4648 4656]))                          )
                        (reparse-symbol indented_block_body) [4621 5452])
                    ("__subclasscheck__" function
                       (:documentation "Override for issubclass(subclass, cls)."
                        :arguments 
                          ( ("cls" variable nil (reparse-symbol function_parameters) [5479 5482])
                            ("subclass" variable nil (reparse-symbol function_parameters) [5484 5492]))                          )
                        (reparse-symbol indented_block_body) [5457 7035]))                  
                :type "class")
                nil [1726 7035]))          
      :file "abc.py"
      :pointmax 7035
      :fsize 7034
      :lastmodtime '(20191 53536 0 0)
      :unmatched-syntax nil))
  :file "!usr!lib64!python2.6!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
